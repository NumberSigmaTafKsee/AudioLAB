///////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Lua REPL
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "LuaJIT.hpp"
LuaJIT * lua;

int test(lua_State *L)
{
    printf("test\n");
    return 0;
}

bool is_cmd(const char * cmd, const char * key)
{
    return !strcmp(cmd,key);
}

void strupr(char * s)
{
    for(size_t i = 0; i < strlen(s); i++)
        s[i] = toupper(s[i]);
}
int setValueCmd(lua_State *L)
{
    char cmd[128];
    const char * cmdS = lua_tostring(L,-2);
    strcpy(cmd,cmdS);
    strupr((char*)cmd);
                                
    float val = lua_tonumber(L,-1);
    if(is_cmd(cmd,"LIST"))
    {
        std::cout << "DELAY,BPM,INVERT,FEEDBACK,WAVESHAPE\n";
    }
    if(is_cmd(cmd,"DELAY")) 
    {
        if(val < 0.0f) val = 0.0f;
        if(val > 1.0f) val = 1.0f;
        lv2flangerL->connections[0][0] = val;
        lv2flangerR->connections[0][0] = val;
    }
    if(is_cmd(cmd,"BPM")) {
        if(val < 5) val = 5.0f;
        if(val > 300.0f) val = 300.0f;
        lv2flangerL->connections[1][0] = val;
        lv2flangerR->connections[1][0] = val;
    }
    if(is_cmd(cmd,"DEPTH")) {
        if(val < 0) val = 0;
        if(val > 1) val = 1;
        lv2flangerL->connections[2][0] = val;
        lv2flangerR->connections[2][0] = val;
    }
    if(is_cmd(cmd,"INVERT"))
    {
        if(val < 0.5) val = 0;
        if(val > 0.5) val = 1.0;
        lv2flangerL->connections[3][0] = val;
        lv2flangerR->connections[3][0] = val;
    }
    if(is_cmd(cmd,"FEEDBACK"))
    {
        if(val < -0.995) val = -0.995;
        if(val > 0.995) val = 0.995;
        lv2flangerL->connections[4][0] = val;
        lv2flangerR->connections[4][0] = val;
    }
    if(is_cmd(cmd,"WAVESHAPE")) 
    {
        if(val < -0.995) val = 0;
        if(val > 0.995) val = 1;
        lv2flangerL->connections[5][0] = val;
        lv2flangerR->connections[5][0] = val;
    }    
    return 0;
}

void connectLua()
{
    lua = new LuaJIT("main.lua");
    lua->CreateCFunction("flanger",setValueCmd);
}

void repl() {
    std::string cmd;
    std::cin >> cmd;
    lua->DoCmd(cmd);
}

