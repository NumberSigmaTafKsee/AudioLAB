# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyVAAnalogSVF
else:
    import _PyVAAnalogSVF

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class float_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.float_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.float_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.float_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.float_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.float_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.float_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.float_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.float_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.float_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_float_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_float_numeric_limits

# Register float_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.float_numeric_limits_swigregister(float_numeric_limits)

class double_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.double_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.double_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.double_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.double_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.double_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.double_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.double_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.double_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.double_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_double_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_double_numeric_limits

# Register double_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.double_numeric_limits_swigregister(double_numeric_limits)

class int_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.int_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.int_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.int_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.int_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.int_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.int_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.int_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.int_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.int_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_int_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_int_numeric_limits

# Register int_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.int_numeric_limits_swigregister(int_numeric_limits)

class uint_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.uint_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.uint_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.uint_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.uint_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.uint_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.uint_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.uint_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.uint_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.uint_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_uint_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_uint_numeric_limits

# Register uint_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.uint_numeric_limits_swigregister(uint_numeric_limits)

class short_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.short_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.short_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.short_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.short_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.short_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.short_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.short_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.short_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.short_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_short_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_short_numeric_limits

# Register short_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.short_numeric_limits_swigregister(short_numeric_limits)

class ushort_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.ushort_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.ushort_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_ushort_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_ushort_numeric_limits

# Register ushort_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.ushort_numeric_limits_swigregister(ushort_numeric_limits)

class long_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.long_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.long_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.long_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.long_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.long_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.long_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.long_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.long_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.long_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_long_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_long_numeric_limits

# Register long_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.long_numeric_limits_swigregister(long_numeric_limits)

class ulong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.ulong_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.ulong_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_ulong_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_ulong_numeric_limits

# Register ulong_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.ulong_numeric_limits_swigregister(ulong_numeric_limits)

class llong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.llong_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.llong_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.llong_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.llong_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.llong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.llong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.llong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.llong_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.llong_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_llong_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_llong_numeric_limits

# Register llong_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.llong_numeric_limits_swigregister(llong_numeric_limits)

class ullong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_min(self)

    def max(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_max(self)

    def epsilon(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_epsilon(self)

    def round_error(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_round_error(self)

    def infinity(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _PyVAAnalogSVF.ullong_numeric_limits_denorm_min(self)

    def __init__(self):
        _PyVAAnalogSVF.ullong_numeric_limits_swiginit(self, _PyVAAnalogSVF.new_ullong_numeric_limits())
    __swig_destroy__ = _PyVAAnalogSVF.delete_ullong_numeric_limits

# Register ullong_numeric_limits in _PyVAAnalogSVF:
_PyVAAnalogSVF.ullong_numeric_limits_swigregister(ullong_numeric_limits)


def Huge():
    return _PyVAAnalogSVF.Huge()

def Hugef():
    return _PyVAAnalogSVF.Hugef()

def Infinity():
    return _PyVAAnalogSVF.Infinity()

def NaN():
    return _PyVAAnalogSVF.NaN()
char_bit = _PyVAAnalogSVF.char_bit
schar_min = _PyVAAnalogSVF.schar_min
schar_max = _PyVAAnalogSVF.schar_max
uchar_max = _PyVAAnalogSVF.uchar_max
char_min = _PyVAAnalogSVF.char_min
char_max = _PyVAAnalogSVF.char_max
mb_len_max = _PyVAAnalogSVF.mb_len_max
shrt_min = _PyVAAnalogSVF.shrt_min
shrt_max = _PyVAAnalogSVF.shrt_max
ushrt_max = _PyVAAnalogSVF.ushrt_max
int_min = _PyVAAnalogSVF.int_min
int_max = _PyVAAnalogSVF.int_max
uint_max = _PyVAAnalogSVF.uint_max
long_min = _PyVAAnalogSVF.long_min
long_max = _PyVAAnalogSVF.long_max
ulong_max = _PyVAAnalogSVF.ulong_max
llong_min = _PyVAAnalogSVF.llong_min
llong_max = _PyVAAnalogSVF.llong_max
ullong_max = _PyVAAnalogSVF.ullong_max
class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.Random_swiginit(self, _PyVAAnalogSVF.new_Random())

    @staticmethod
    def seed():
        return _PyVAAnalogSVF.Random_seed()

    def frand(self):
        return _PyVAAnalogSVF.Random_frand(self)

    def rand(self):
        return _PyVAAnalogSVF.Random_rand(self)

    def randint(self, min, max):
        return _PyVAAnalogSVF.Random_randint(self, min, max)

    def flip(self, prob):
        return _PyVAAnalogSVF.Random_flip(self, prob)

    def random(self, mod):
        return _PyVAAnalogSVF.Random_random(self, mod)
    __swig_destroy__ = _PyVAAnalogSVF.delete_Random

# Register Random in _PyVAAnalogSVF:
_PyVAAnalogSVF.Random_swigregister(Random)

PARAMETER2_PROCESSOR = _PyVAAnalogSVF.PARAMETER2_PROCESSOR
STEREOSPLITTER_PROCESSOR = _PyVAAnalogSVF.STEREOSPLITTER_PROCESSOR
MONO_GENERATOR_PROCESSOR = _PyVAAnalogSVF.MONO_GENERATOR_PROCESSOR
MONO_FUNCTION_PROCESSOR = _PyVAAnalogSVF.MONO_FUNCTION_PROCESSOR
MONO_OSCILLATOR_PROCESSOR = _PyVAAnalogSVF.MONO_OSCILLATOR_PROCESSOR
MONO_FILTER_PROCESSOR = _PyVAAnalogSVF.MONO_FILTER_PROCESSOR
MONO_AMPLIFIER_PROCESSOR = _PyVAAnalogSVF.MONO_AMPLIFIER_PROCESSOR
MONO_FX_PROCESSOR = _PyVAAnalogSVF.MONO_FX_PROCESSOR
MONO_CASCADE_PROCESSOR = _PyVAAnalogSVF.MONO_CASCADE_PROCESSOR
MONO_MIXER_PROCESSOR = _PyVAAnalogSVF.MONO_MIXER_PROCESSOR
MONO_MORPHER_PROCESSOR = _PyVAAnalogSVF.MONO_MORPHER_PROCESSOR
MONO_OPERATOR_PROCESSOR = _PyVAAnalogSVF.MONO_OPERATOR_PROCESSOR
MONO_OVERSAMPLE_PROCESSOR = _PyVAAnalogSVF.MONO_OVERSAMPLE_PROCESSOR
MONO_UPSAMPLE_PROCESSOR = _PyVAAnalogSVF.MONO_UPSAMPLE_PROCESSOR
MONO_DOWNSAMPLE_PROCESSOR = _PyVAAnalogSVF.MONO_DOWNSAMPLE_PROCESSOR
STEREO_FX_PROCESSOR = _PyVAAnalogSVF.STEREO_FX_PROCESSOR
STEREO_OVERSAMPLER_PROCESSOR = _PyVAAnalogSVF.STEREO_OVERSAMPLER_PROCESSOR
STEREO_UPSAMPLER_PROCESSOR = _PyVAAnalogSVF.STEREO_UPSAMPLER_PROCESSOR
STEREO_DOWNSAMPLER_PROCESSOR = _PyVAAnalogSVF.STEREO_DOWNSAMPLER_PROCESSOR
STEREO_GENERATOR_PROCESSOR = _PyVAAnalogSVF.STEREO_GENERATOR_PROCESSOR
STEREO_FUNCTION_PROCESSOR = _PyVAAnalogSVF.STEREO_FUNCTION_PROCESSOR
STEREO_PARAMETER2_PROCESSOR = _PyVAAnalogSVF.STEREO_PARAMETER2_PROCESSOR
STEREO_OSCILLATOR_PROCESSOR = _PyVAAnalogSVF.STEREO_OSCILLATOR_PROCESSOR
STEREO_FILTER_PROCESSOR = _PyVAAnalogSVF.STEREO_FILTER_PROCESSOR
STEREO_AMPLIFIER_PROCESSOR = _PyVAAnalogSVF.STEREO_AMPLIFIER_PROCESSOR
STEREO_CASCADE_PROCESSOR = _PyVAAnalogSVF.STEREO_CASCADE_PROCESSOR
STEREO_OPERATOR_PROCESSOR = _PyVAAnalogSVF.STEREO_OPERATOR_PROCESSOR
MONO_SIGNAL_SOURCE_PROCESSOR = _PyVAAnalogSVF.MONO_SIGNAL_SOURCE_PROCESSOR
STEREO_SIGNAL_SOURCE_PROCESSOR = _PyVAAnalogSVF.STEREO_SIGNAL_SOURCE_PROCESSOR
MONO_SIGNAL_SINK_PROCESSOR = _PyVAAnalogSVF.MONO_SIGNAL_SINK_PROCESSOR
STEREO_SIGNAL_SINK_PROCESSOR = _PyVAAnalogSVF.STEREO_SIGNAL_SINK_PROCESSOR
INTERLEAVE_PROCESSOR = _PyVAAnalogSVF.INTERLEAVE_PROCESSOR
DEINERLEAVE_PROCESSOR = _PyVAAnalogSVF.DEINERLEAVE_PROCESSOR
FILTER_BANK_PROCESSOR = _PyVAAnalogSVF.FILTER_BANK_PROCESSOR
SPECTRUM_PROCESSOR = _PyVAAnalogSVF.SPECTRUM_PROCESSOR
class SoundProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    preGain = property(_PyVAAnalogSVF.SoundProcessor_preGain_get, _PyVAAnalogSVF.SoundProcessor_preGain_set)
    postGain = property(_PyVAAnalogSVF.SoundProcessor_postGain_get, _PyVAAnalogSVF.SoundProcessor_postGain_set)

    def getType(self):
        return _PyVAAnalogSVF.SoundProcessor_getType(self)

    def setPort(self, port, value):
        return _PyVAAnalogSVF.SoundProcessor_setPort(self, port, value)

    def setPort2(self, port, a, b):
        return _PyVAAnalogSVF.SoundProcessor_setPort2(self, port, a, b)

    def setPortV(self, port, v):
        return _PyVAAnalogSVF.SoundProcessor_setPortV(self, port, v)

    def getPort(self, port):
        return _PyVAAnalogSVF.SoundProcessor_getPort(self, port)

    def getPort2(self, port, v):
        return _PyVAAnalogSVF.SoundProcessor_getPort2(self, port, v)

    def getPortV(self, port, v):
        return _PyVAAnalogSVF.SoundProcessor_getPortV(self, port, v)

    def printPortMap(self):
        return _PyVAAnalogSVF.SoundProcessor_printPortMap(self)

    def randomize(self):
        return _PyVAAnalogSVF.SoundProcessor_randomize(self)

    def loadPreset(self, filename):
        return _PyVAAnalogSVF.SoundProcessor_loadPreset(self, filename)

    def savePreset(self, filename):
        return _PyVAAnalogSVF.SoundProcessor_savePreset(self, filename)
    __swig_destroy__ = _PyVAAnalogSVF.delete_SoundProcessor

# Register SoundProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.SoundProcessor_swigregister(SoundProcessor)

class Port(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    port = property(_PyVAAnalogSVF.Port_port_get, _PyVAAnalogSVF.Port_port_set)
    value = property(_PyVAAnalogSVF.Port_value_get, _PyVAAnalogSVF.Port_value_set)
    p = property(_PyVAAnalogSVF.Port_p_get, _PyVAAnalogSVF.Port_p_set)

    def __init__(self):
        _PyVAAnalogSVF.Port_swiginit(self, _PyVAAnalogSVF.new_Port())
    __swig_destroy__ = _PyVAAnalogSVF.delete_Port

# Register Port in _PyVAAnalogSVF:
_PyVAAnalogSVF.Port_swigregister(Port)

class Ports(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ports = property(_PyVAAnalogSVF.Ports_ports_get, _PyVAAnalogSVF.Ports_ports_set)
    portmap = property(_PyVAAnalogSVF.Ports_portmap_get, _PyVAAnalogSVF.Ports_portmap_set)

    def __init__(self):
        _PyVAAnalogSVF.Ports_swiginit(self, _PyVAAnalogSVF.new_Ports())

    def addPort(self, name, p):
        return _PyVAAnalogSVF.Ports_addPort(self, name, p)

    def Run(self):
        return _PyVAAnalogSVF.Ports_Run(self)
    __swig_destroy__ = _PyVAAnalogSVF.delete_Ports

# Register Ports in _PyVAAnalogSVF:
_PyVAAnalogSVF.Ports_swigregister(Ports)

class MonoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InplaceProcess(self, n, buffer):
        return _PyVAAnalogSVF.MonoProcessor_InplaceProcess(self, n, buffer)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.MonoProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoProcessor

# Register MonoProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoProcessor_swigregister(MonoProcessor)

class MonoCascadeProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_PyVAAnalogSVF.MonoCascadeProcessor_procs_get, _PyVAAnalogSVF.MonoCascadeProcessor_procs_set)

    def __init__(self):
        _PyVAAnalogSVF.MonoCascadeProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoCascadeProcessor())

    def getType(self):
        return _PyVAAnalogSVF.MonoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoCascadeProcessor

# Register MonoCascadeProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoCascadeProcessor_swigregister(MonoCascadeProcessor)

class StereoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    pan = property(_PyVAAnalogSVF.StereoProcessor_pan_get, _PyVAAnalogSVF.StereoProcessor_pan_set)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.StereoProcessor_ProcessBlock(self, n, inputs, outputs)

    def Tick(self, IL, IR, L, R, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.StereoProcessor_Tick(self, IL, IR, L, R, A, X, Y)

    def InplaceProcess(self, n, buffer):
        return _PyVAAnalogSVF.StereoProcessor_InplaceProcess(self, n, buffer)

    def Run(self, n, inputs, outputs):
        return _PyVAAnalogSVF.StereoProcessor_Run(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoProcessor

# Register StereoProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoProcessor_swigregister(StereoProcessor)

class StereoCascadeProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_PyVAAnalogSVF.StereoCascadeProcessor_procs_get, _PyVAAnalogSVF.StereoCascadeProcessor_procs_set)

    def __init__(self):
        _PyVAAnalogSVF.StereoCascadeProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoCascadeProcessor())

    def getType(self):
        return _PyVAAnalogSVF.StereoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.StereoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoCascadeProcessor

# Register StereoCascadeProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoCascadeProcessor_swigregister(StereoCascadeProcessor)

class MonoFXProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.MonoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoFXProcessor

# Register MonoFXProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoFXProcessor_swigregister(MonoFXProcessor)

class StereoFXProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.StereoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.StereoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoFXProcessor

# Register StereoFXProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoFXProcessor_swigregister(StereoFXProcessor)

class GeneratorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.GeneratorProcessor_getType(self)

    def Tick(self, I=0, A=0, X=0, Y=0):
        return _PyVAAnalogSVF.GeneratorProcessor_Tick(self, I, A, X, Y)

    def Generate(self, n, output):
        return _PyVAAnalogSVF.GeneratorProcessor_Generate(self, n, output)

    def ProcessBlock(self, n, _in, out):
        return _PyVAAnalogSVF.GeneratorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _PyVAAnalogSVF.delete_GeneratorProcessor

# Register GeneratorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.GeneratorProcessor_swigregister(GeneratorProcessor)

class MixerProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MixerProcessor_swiginit(self, _PyVAAnalogSVF.new_MixerProcessor())

    def getType(self):
        return _PyVAAnalogSVF.MixerProcessor_getType(self)

    def ProcessBlock(self, *args):
        return _PyVAAnalogSVF.MixerProcessor_ProcessBlock(self, *args)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MixerProcessor

# Register MixerProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MixerProcessor_swigregister(MixerProcessor)

class FunctionProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.FunctionProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.FunctionProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, input, output):
        return _PyVAAnalogSVF.FunctionProcessor_ProcessBlock(self, n, input, output)
    __swig_destroy__ = _PyVAAnalogSVF.delete_FunctionProcessor

# Register FunctionProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.FunctionProcessor_swigregister(FunctionProcessor)

class Parameter2Processor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.Parameter2Processor_getType(self)

    def Tick(self, a, b):
        return _PyVAAnalogSVF.Parameter2Processor_Tick(self, a, b)

    def ProcessBlock(self, n, x, y, output):
        return _PyVAAnalogSVF.Parameter2Processor_ProcessBlock(self, n, x, y, output)
    __swig_destroy__ = _PyVAAnalogSVF.delete_Parameter2Processor

# Register Parameter2Processor in _PyVAAnalogSVF:
_PyVAAnalogSVF.Parameter2Processor_swigregister(Parameter2Processor)

class StereoSplitterProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.StereoSplitterProcessor_getType(self)

    def Tick(self, _in, a, b):
        return _PyVAAnalogSVF.StereoSplitterProcessor_Tick(self, _in, a, b)

    def ProcessBlock(self, n, _in, a, b):
        return _PyVAAnalogSVF.StereoSplitterProcessor_ProcessBlock(self, n, _in, a, b)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoSplitterProcessor

# Register StereoSplitterProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoSplitterProcessor_swigregister(StereoSplitterProcessor)

class OscillatorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.OscillatorProcessor_getType(self)

    def Tick(self, I=0, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.OscillatorProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, _in, out):
        return _PyVAAnalogSVF.OscillatorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _PyVAAnalogSVF.delete_OscillatorProcessor

# Register OscillatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.OscillatorProcessor_swigregister(OscillatorProcessor)

class FilterProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.FilterProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.FilterProcessor_Tick(self, I, A, X, Y)

    def Run(self, I, A=1, X=0, Y=0):
        return _PyVAAnalogSVF.FilterProcessor_Run(self, I, A, X, Y)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _PyVAAnalogSVF.FilterProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_FilterProcessor

# Register FilterProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.FilterProcessor_swigregister(FilterProcessor)

class AmplifierProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Tick(self, I, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.AmplifierProcessor_Tick(self, I, A, X, Y)

    def getType(self):
        return _PyVAAnalogSVF.AmplifierProcessor_getType(self)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _PyVAAnalogSVF.AmplifierProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_AmplifierProcessor

# Register AmplifierProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.AmplifierProcessor_swigregister(AmplifierProcessor)

class StereoOscillatorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_PyVAAnalogSVF.StereoOscillatorProcessor_osc_get, _PyVAAnalogSVF.StereoOscillatorProcessor_osc_set)

    def __init__(self, o):
        _PyVAAnalogSVF.StereoOscillatorProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoOscillatorProcessor(o))

    def getType(self):
        return _PyVAAnalogSVF.StereoOscillatorProcessor_getType(self)

    def setPan(self, p):
        return _PyVAAnalogSVF.StereoOscillatorProcessor_setPan(self, p)

    def ProcessBlock(self, n, out):
        return _PyVAAnalogSVF.StereoOscillatorProcessor_ProcessBlock(self, n, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.StereoOscillatorProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoOscillatorProcessor

# Register StereoOscillatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoOscillatorProcessor_swigregister(StereoOscillatorProcessor)

class StereoGeneratorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_PyVAAnalogSVF.StereoGeneratorProcessor_osc_get, _PyVAAnalogSVF.StereoGeneratorProcessor_osc_set)

    def __init__(self, o):
        _PyVAAnalogSVF.StereoGeneratorProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoGeneratorProcessor(o))

    def getType(self):
        return _PyVAAnalogSVF.StereoGeneratorProcessor_getType(self)

    def setPan(self, p):
        return _PyVAAnalogSVF.StereoGeneratorProcessor_setPan(self, p)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.StereoGeneratorProcessor_Tick(self, iL, iR, L, R, A, X, Y)

    def ProcessBlock(self, n, out):
        return _PyVAAnalogSVF.StereoGeneratorProcessor_ProcessBlock(self, n, out)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoGeneratorProcessor

# Register StereoGeneratorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoGeneratorProcessor_swigregister(StereoGeneratorProcessor)

class StereoFunctionProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_PyVAAnalogSVF.StereoFunctionProcessor_filter_get, _PyVAAnalogSVF.StereoFunctionProcessor_filter_set)

    def __init__(self, L, R):
        _PyVAAnalogSVF.StereoFunctionProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoFunctionProcessor(L, R))

    def getType(self):
        return _PyVAAnalogSVF.StereoFunctionProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _PyVAAnalogSVF.StereoFunctionProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.StereoFunctionProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoFunctionProcessor

# Register StereoFunctionProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoFunctionProcessor_swigregister(StereoFunctionProcessor)

class StereoFilterProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_PyVAAnalogSVF.StereoFilterProcessor_filter_get, _PyVAAnalogSVF.StereoFilterProcessor_filter_set)

    def __init__(self, L, R):
        _PyVAAnalogSVF.StereoFilterProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoFilterProcessor(L, R))

    def getType(self):
        return _PyVAAnalogSVF.StereoFilterProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _PyVAAnalogSVF.StereoFilterProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.StereoFilterProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoFilterProcessor

# Register StereoFilterProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoFilterProcessor_swigregister(StereoFilterProcessor)

class StereoAmplifierProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amp = property(_PyVAAnalogSVF.StereoAmplifierProcessor_amp_get, _PyVAAnalogSVF.StereoAmplifierProcessor_amp_set)

    def __init__(self, L, R):
        _PyVAAnalogSVF.StereoAmplifierProcessor_swiginit(self, _PyVAAnalogSVF.new_StereoAmplifierProcessor(L, R))

    def getType(self):
        return _PyVAAnalogSVF.StereoAmplifierProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _PyVAAnalogSVF.StereoAmplifierProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=0, X=0, Y=0):
        return _PyVAAnalogSVF.StereoAmplifierProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _PyVAAnalogSVF.delete_StereoAmplifierProcessor

# Register StereoAmplifierProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.StereoAmplifierProcessor_swigregister(StereoAmplifierProcessor)

class SpectrumProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.SpectrumProcessor_getType(self)

    def __init__(self):
        _PyVAAnalogSVF.SpectrumProcessor_swiginit(self, _PyVAAnalogSVF.new_SpectrumProcessor())
    __swig_destroy__ = _PyVAAnalogSVF.delete_SpectrumProcessor

# Register SpectrumProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.SpectrumProcessor_swigregister(SpectrumProcessor)

class SignalSourceProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyVAAnalogSVF.delete_SignalSourceProcessor

# Register SignalSourceProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.SignalSourceProcessor_swigregister(SignalSourceProcessor)

class SignalSinkProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyVAAnalogSVF.delete_SignalSinkProcessor

# Register SignalSinkProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.SignalSinkProcessor_swigregister(SignalSinkProcessor)

class MonoOversampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.MonoOversampleProcessor_getType(self)

    def __init__(self):
        _PyVAAnalogSVF.MonoOversampleProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoOversampleProcessor())
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoOversampleProcessor

# Register MonoOversampleProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoOversampleProcessor_swigregister(MonoOversampleProcessor)

class MonoUpsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.MonoUpsampleProcessor_getType(self)

    def __init__(self):
        _PyVAAnalogSVF.MonoUpsampleProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoUpsampleProcessor())
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoUpsampleProcessor

# Register MonoUpsampleProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoUpsampleProcessor_swigregister(MonoUpsampleProcessor)

class MonoDownsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _PyVAAnalogSVF.MonoDownsampleProcessor_getType(self)

    def __init__(self):
        _PyVAAnalogSVF.MonoDownsampleProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoDownsampleProcessor())
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoDownsampleProcessor

# Register MonoDownsampleProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoDownsampleProcessor_swigregister(MonoDownsampleProcessor)

class OperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyVAAnalogSVF.delete_OperatorProcessor

# Register OperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.OperatorProcessor_swigregister(OperatorProcessor)

class MonoOperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_PyVAAnalogSVF.MonoOperatorProcessor_list_get, _PyVAAnalogSVF.MonoOperatorProcessor_list_set)

    def __init__(self):
        _PyVAAnalogSVF.MonoOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoOperatorProcessor())

    def getType(self):
        return _PyVAAnalogSVF.MonoOperatorProcessor_getType(self)

    def GetSamples(self, p, n, input, output):
        return _PyVAAnalogSVF.MonoOperatorProcessor_GetSamples(self, p, n, input, output)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoOperatorProcessor

# Register MonoOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoOperatorProcessor_swigregister(MonoOperatorProcessor)

class MonoCascadeOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MonoCascadeOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoCascadeOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoCascadeOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoCascadeOperatorProcessor

# Register MonoCascadeOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoCascadeOperatorProcessor_swigregister(MonoCascadeOperatorProcessor)

class MonoMultiplierOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MonoMultiplierOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoMultiplierOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoMultiplierOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoMultiplierOperatorProcessor

# Register MonoMultiplierOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoMultiplierOperatorProcessor_swigregister(MonoMultiplierOperatorProcessor)

class MonoAdderOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MonoAdderOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoAdderOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoAdderOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoAdderOperatorProcessor

# Register MonoAdderOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoAdderOperatorProcessor_swigregister(MonoAdderOperatorProcessor)

class MonoSubtractorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MonoSubtractorOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoSubtractorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoSubtractorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoSubtractorOperatorProcessor

# Register MonoSubtractorOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoSubtractorOperatorProcessor_swigregister(MonoSubtractorOperatorProcessor)

class MonoModulatorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PyVAAnalogSVF.MonoModulatorOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoModulatorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoModulatorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoModulatorOperatorProcessor

# Register MonoModulatorOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoModulatorOperatorProcessor_swigregister(MonoModulatorOperatorProcessor)

class MonoBlendOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blend = property(_PyVAAnalogSVF.MonoBlendOperatorProcessor_blend_get, _PyVAAnalogSVF.MonoBlendOperatorProcessor_blend_set)

    def __init__(self):
        _PyVAAnalogSVF.MonoBlendOperatorProcessor_swiginit(self, _PyVAAnalogSVF.new_MonoBlendOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _PyVAAnalogSVF.MonoBlendOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _PyVAAnalogSVF.delete_MonoBlendOperatorProcessor

# Register MonoBlendOperatorProcessor in _PyVAAnalogSVF:
_PyVAAnalogSVF.MonoBlendOperatorProcessor_swigregister(MonoBlendOperatorProcessor)

class AnalogSVF(FilterProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fc = property(_PyVAAnalogSVF.AnalogSVF_fc_get, _PyVAAnalogSVF.AnalogSVF_fc_set)
    fs = property(_PyVAAnalogSVF.AnalogSVF_fs_get, _PyVAAnalogSVF.AnalogSVF_fs_set)
    q = property(_PyVAAnalogSVF.AnalogSVF_q_get, _PyVAAnalogSVF.AnalogSVF_q_set)
    K = property(_PyVAAnalogSVF.AnalogSVF_K_get, _PyVAAnalogSVF.AnalogSVF_K_set)
    lp = property(_PyVAAnalogSVF.AnalogSVF_lp_get, _PyVAAnalogSVF.AnalogSVF_lp_set)
    hp = property(_PyVAAnalogSVF.AnalogSVF_hp_get, _PyVAAnalogSVF.AnalogSVF_hp_set)
    bp = property(_PyVAAnalogSVF.AnalogSVF_bp_get, _PyVAAnalogSVF.AnalogSVF_bp_set)
    ubp = property(_PyVAAnalogSVF.AnalogSVF_ubp_get, _PyVAAnalogSVF.AnalogSVF_ubp_set)
    shelf = property(_PyVAAnalogSVF.AnalogSVF_shelf_get, _PyVAAnalogSVF.AnalogSVF_shelf_set)
    notch = property(_PyVAAnalogSVF.AnalogSVF_notch_get, _PyVAAnalogSVF.AnalogSVF_notch_set)
    apf = property(_PyVAAnalogSVF.AnalogSVF_apf_get, _PyVAAnalogSVF.AnalogSVF_apf_set)
    peak = property(_PyVAAnalogSVF.AnalogSVF_peak_get, _PyVAAnalogSVF.AnalogSVF_peak_set)
    z1 = property(_PyVAAnalogSVF.AnalogSVF_z1_get, _PyVAAnalogSVF.AnalogSVF_z1_set)
    z2 = property(_PyVAAnalogSVF.AnalogSVF_z2_get, _PyVAAnalogSVF.AnalogSVF_z2_set)
    minC = property(_PyVAAnalogSVF.AnalogSVF_minC_get, _PyVAAnalogSVF.AnalogSVF_minC_set)
    maxC = property(_PyVAAnalogSVF.AnalogSVF_maxC_get, _PyVAAnalogSVF.AnalogSVF_maxC_set)
    gain = property(_PyVAAnalogSVF.AnalogSVF_gain_get, _PyVAAnalogSVF.AnalogSVF_gain_set)
    LP = _PyVAAnalogSVF.AnalogSVF_LP
    HP = _PyVAAnalogSVF.AnalogSVF_HP
    BP = _PyVAAnalogSVF.AnalogSVF_BP
    UBP = _PyVAAnalogSVF.AnalogSVF_UBP
    SHELF = _PyVAAnalogSVF.AnalogSVF_SHELF
    NOTCH = _PyVAAnalogSVF.AnalogSVF_NOTCH
    APF = _PyVAAnalogSVF.AnalogSVF_APF
    PEAK = _PyVAAnalogSVF.AnalogSVF_PEAK
    type = property(_PyVAAnalogSVF.AnalogSVF_type_get, _PyVAAnalogSVF.AnalogSVF_type_set)

    def __init__(self, *args):
        _PyVAAnalogSVF.AnalogSVF_swiginit(self, _PyVAAnalogSVF.new_AnalogSVF(*args))

    def init(self, Fs, Fc, Q):
        return _PyVAAnalogSVF.AnalogSVF_init(self, Fs, Fc, Q)

    def reset(self):
        return _PyVAAnalogSVF.AnalogSVF_reset(self)

    def setCutoff(self, f):
        return _PyVAAnalogSVF.AnalogSVF_setCutoff(self, f)

    def setQ(self, Q):
        return _PyVAAnalogSVF.AnalogSVF_setQ(self, Q)
    PORT_CUTOFF = _PyVAAnalogSVF.AnalogSVF_PORT_CUTOFF
    PORT_Q = _PyVAAnalogSVF.AnalogSVF_PORT_Q
    PORT_TYPE = _PyVAAnalogSVF.AnalogSVF_PORT_TYPE
    PORT_GAIN = _PyVAAnalogSVF.AnalogSVF_PORT_GAIN
    PORT_MINC = _PyVAAnalogSVF.AnalogSVF_PORT_MINC
    PORT_MAXC = _PyVAAnalogSVF.AnalogSVF_PORT_MAXC

    def setPort(self, port, v):
        return _PyVAAnalogSVF.AnalogSVF_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _PyVAAnalogSVF.AnalogSVF_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, input, output):
        return _PyVAAnalogSVF.AnalogSVF_ProcessSIMD(self, n, input, output)

    def ProcessBlock(self, n, input, output):
        return _PyVAAnalogSVF.AnalogSVF_ProcessBlock(self, n, input, output)

    def ProcessInplace(self, n, input):
        return _PyVAAnalogSVF.AnalogSVF_ProcessInplace(self, n, input)
    __swig_destroy__ = _PyVAAnalogSVF.delete_AnalogSVF

# Register AnalogSVF in _PyVAAnalogSVF:
_PyVAAnalogSVF.AnalogSVF_swigregister(AnalogSVF)

class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyVAAnalogSVF.float_vector_swiginit(self, _PyVAAnalogSVF.new_float_vector(*args))

    def __getitem__(self, i):
        return _PyVAAnalogSVF.float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _PyVAAnalogSVF.float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _PyVAAnalogSVF.float_vector_ibegin(self)

    def iend(self):
        return _PyVAAnalogSVF.float_vector_iend(self)

    def erase(self, *args):
        return _PyVAAnalogSVF.float_vector_erase(self, *args)

    def front(self):
        return _PyVAAnalogSVF.float_vector_front(self)

    def back(self):
        return _PyVAAnalogSVF.float_vector_back(self)

    def push_back(self, q):
        return _PyVAAnalogSVF.float_vector_push_back(self, q)

    def pop_back(self):
        return _PyVAAnalogSVF.float_vector_pop_back(self)

    def at(self, i):
        return _PyVAAnalogSVF.float_vector_at(self, i)

    def assign(self, n, val):
        return _PyVAAnalogSVF.float_vector_assign(self, n, val)

    def data(self):
        return _PyVAAnalogSVF.float_vector_data(self)

    def size(self):
        return _PyVAAnalogSVF.float_vector_size(self)

    def empty(self):
        return _PyVAAnalogSVF.float_vector_empty(self)

    def resize(self, n):
        return _PyVAAnalogSVF.float_vector_resize(self, n)

    def clear(self):
        return _PyVAAnalogSVF.float_vector_clear(self)

    def swap(self, x):
        return _PyVAAnalogSVF.float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _PyVAAnalogSVF.float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _PyVAAnalogSVF.float_vector_reserve(self, n)

    def max_size(self):
        return _PyVAAnalogSVF.float_vector_max_size(self)

    def capacity(self):
        return _PyVAAnalogSVF.float_vector_capacity(self)
    __swig_destroy__ = _PyVAAnalogSVF.delete_float_vector

# Register float_vector in _PyVAAnalogSVF:
_PyVAAnalogSVF.float_vector_swigregister(float_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyVAAnalogSVF.double_vector_swiginit(self, _PyVAAnalogSVF.new_double_vector(*args))

    def __getitem__(self, i):
        return _PyVAAnalogSVF.double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _PyVAAnalogSVF.double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _PyVAAnalogSVF.double_vector_ibegin(self)

    def iend(self):
        return _PyVAAnalogSVF.double_vector_iend(self)

    def erase(self, *args):
        return _PyVAAnalogSVF.double_vector_erase(self, *args)

    def front(self):
        return _PyVAAnalogSVF.double_vector_front(self)

    def back(self):
        return _PyVAAnalogSVF.double_vector_back(self)

    def push_back(self, q):
        return _PyVAAnalogSVF.double_vector_push_back(self, q)

    def pop_back(self):
        return _PyVAAnalogSVF.double_vector_pop_back(self)

    def at(self, i):
        return _PyVAAnalogSVF.double_vector_at(self, i)

    def assign(self, n, val):
        return _PyVAAnalogSVF.double_vector_assign(self, n, val)

    def data(self):
        return _PyVAAnalogSVF.double_vector_data(self)

    def size(self):
        return _PyVAAnalogSVF.double_vector_size(self)

    def empty(self):
        return _PyVAAnalogSVF.double_vector_empty(self)

    def resize(self, n):
        return _PyVAAnalogSVF.double_vector_resize(self, n)

    def clear(self):
        return _PyVAAnalogSVF.double_vector_clear(self)

    def swap(self, x):
        return _PyVAAnalogSVF.double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _PyVAAnalogSVF.double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _PyVAAnalogSVF.double_vector_reserve(self, n)

    def max_size(self):
        return _PyVAAnalogSVF.double_vector_max_size(self)

    def capacity(self):
        return _PyVAAnalogSVF.double_vector_capacity(self)
    __swig_destroy__ = _PyVAAnalogSVF.delete_double_vector

# Register double_vector in _PyVAAnalogSVF:
_PyVAAnalogSVF.double_vector_swigregister(double_vector)

class complex_float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyVAAnalogSVF.complex_float_vector_swiginit(self, _PyVAAnalogSVF.new_complex_float_vector(*args))

    def __getitem__(self, i):
        return _PyVAAnalogSVF.complex_float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _PyVAAnalogSVF.complex_float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _PyVAAnalogSVF.complex_float_vector_ibegin(self)

    def iend(self):
        return _PyVAAnalogSVF.complex_float_vector_iend(self)

    def erase(self, *args):
        return _PyVAAnalogSVF.complex_float_vector_erase(self, *args)

    def front(self):
        return _PyVAAnalogSVF.complex_float_vector_front(self)

    def back(self):
        return _PyVAAnalogSVF.complex_float_vector_back(self)

    def push_back(self, q):
        return _PyVAAnalogSVF.complex_float_vector_push_back(self, q)

    def pop_back(self):
        return _PyVAAnalogSVF.complex_float_vector_pop_back(self)

    def at(self, i):
        return _PyVAAnalogSVF.complex_float_vector_at(self, i)

    def assign(self, n, val):
        return _PyVAAnalogSVF.complex_float_vector_assign(self, n, val)

    def data(self):
        return _PyVAAnalogSVF.complex_float_vector_data(self)

    def size(self):
        return _PyVAAnalogSVF.complex_float_vector_size(self)

    def empty(self):
        return _PyVAAnalogSVF.complex_float_vector_empty(self)

    def resize(self, n):
        return _PyVAAnalogSVF.complex_float_vector_resize(self, n)

    def clear(self):
        return _PyVAAnalogSVF.complex_float_vector_clear(self)

    def swap(self, x):
        return _PyVAAnalogSVF.complex_float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _PyVAAnalogSVF.complex_float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _PyVAAnalogSVF.complex_float_vector_reserve(self, n)

    def max_size(self):
        return _PyVAAnalogSVF.complex_float_vector_max_size(self)

    def capacity(self):
        return _PyVAAnalogSVF.complex_float_vector_capacity(self)
    __swig_destroy__ = _PyVAAnalogSVF.delete_complex_float_vector

# Register complex_float_vector in _PyVAAnalogSVF:
_PyVAAnalogSVF.complex_float_vector_swigregister(complex_float_vector)

class complex_double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PyVAAnalogSVF.complex_double_vector_swiginit(self, _PyVAAnalogSVF.new_complex_double_vector(*args))

    def __getitem__(self, i):
        return _PyVAAnalogSVF.complex_double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _PyVAAnalogSVF.complex_double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _PyVAAnalogSVF.complex_double_vector_ibegin(self)

    def iend(self):
        return _PyVAAnalogSVF.complex_double_vector_iend(self)

    def erase(self, *args):
        return _PyVAAnalogSVF.complex_double_vector_erase(self, *args)

    def front(self):
        return _PyVAAnalogSVF.complex_double_vector_front(self)

    def back(self):
        return _PyVAAnalogSVF.complex_double_vector_back(self)

    def push_back(self, q):
        return _PyVAAnalogSVF.complex_double_vector_push_back(self, q)

    def pop_back(self):
        return _PyVAAnalogSVF.complex_double_vector_pop_back(self)

    def at(self, i):
        return _PyVAAnalogSVF.complex_double_vector_at(self, i)

    def assign(self, n, val):
        return _PyVAAnalogSVF.complex_double_vector_assign(self, n, val)

    def data(self):
        return _PyVAAnalogSVF.complex_double_vector_data(self)

    def size(self):
        return _PyVAAnalogSVF.complex_double_vector_size(self)

    def empty(self):
        return _PyVAAnalogSVF.complex_double_vector_empty(self)

    def resize(self, n):
        return _PyVAAnalogSVF.complex_double_vector_resize(self, n)

    def clear(self):
        return _PyVAAnalogSVF.complex_double_vector_clear(self)

    def swap(self, x):
        return _PyVAAnalogSVF.complex_double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _PyVAAnalogSVF.complex_double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _PyVAAnalogSVF.complex_double_vector_reserve(self, n)

    def max_size(self):
        return _PyVAAnalogSVF.complex_double_vector_max_size(self)

    def capacity(self):
        return _PyVAAnalogSVF.complex_double_vector_capacity(self)
    __swig_destroy__ = _PyVAAnalogSVF.delete_complex_double_vector

# Register complex_double_vector in _PyVAAnalogSVF:
_PyVAAnalogSVF.complex_double_vector_swigregister(complex_double_vector)



