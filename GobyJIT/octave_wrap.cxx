/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.1.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the location of the innermost Lua call-point
   (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the
   location of the innermost Lua call-point (as formatted by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitrary amount of data */
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  do { if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } } while (0)


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        }
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member)
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;

fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);

}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if it's there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  swig_lua_userdata* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = (swig_lua_userdata*)lua_touserdata(L,1); /* get the userdata address */

  lua_pushfstring(L, "<userdata of type '%s' at %p>", userData->type->str, userData->ptr);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */

  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file.
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all its bases (recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metamethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows skipping searching metamethod in the given class and immediately going to searching in bases. skip_check
 * is not carried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */

  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);

  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));

  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1);

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index);

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);

      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success;
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metamethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  /* special case: lua nil => NULL pointer */
  if (lua_isnil(L,index))
  {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  if (lua_islightuserdata(L,index))
  {
    *ptr=lua_touserdata(L,index);
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result = 0;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Integer)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = (char)constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ArrayT_bool_t swig_types[0]
#define SWIGTYPE_p_ArrayT_char_t swig_types[1]
#define SWIGTYPE_p_ArrayT_double_t swig_types[2]
#define SWIGTYPE_p_ArrayT_float_t swig_types[3]
#define SWIGTYPE_p_ArrayT_int_t swig_types[4]
#define SWIGTYPE_p_ArrayT_long_t swig_types[5]
#define SWIGTYPE_p_ArrayT_octave_intT_int_t_t swig_types[6]
#define SWIGTYPE_p_ArrayT_octave_intT_long_t_t swig_types[7]
#define SWIGTYPE_p_ArrayT_octave_intT_short_t_t swig_types[8]
#define SWIGTYPE_p_ArrayT_octave_intT_signed_char_t_t swig_types[9]
#define SWIGTYPE_p_ArrayT_octave_intT_unsigned_char_t_t swig_types[10]
#define SWIGTYPE_p_ArrayT_octave_intT_unsigned_int_t_t swig_types[11]
#define SWIGTYPE_p_ArrayT_octave_intT_unsigned_long_t_t swig_types[12]
#define SWIGTYPE_p_ArrayT_octave_intT_unsigned_short_t_t swig_types[13]
#define SWIGTYPE_p_ArrayT_octave_value_t swig_types[14]
#define SWIGTYPE_p_ArrayT_std__complexT_double_t_t swig_types[15]
#define SWIGTYPE_p_ArrayT_std__complexT_float_t_t swig_types[16]
#define SWIGTYPE_p_ArrayT_std__string_t swig_types[17]
#define SWIGTYPE_p_Cell swig_types[18]
#define SWIGTYPE_p_ColumnVector swig_types[19]
#define SWIGTYPE_p_ComplexColumnVector swig_types[20]
#define SWIGTYPE_p_ComplexDET swig_types[21]
#define SWIGTYPE_p_ComplexDiagMatrix swig_types[22]
#define SWIGTYPE_p_ComplexMatrix swig_types[23]
#define SWIGTYPE_p_ComplexNDArray swig_types[24]
#define SWIGTYPE_p_ComplexRowVector swig_types[25]
#define SWIGTYPE_p_DET swig_types[26]
#define SWIGTYPE_p_DiagArray2T_double_t swig_types[27]
#define SWIGTYPE_p_DiagArray2T_float_t swig_types[28]
#define SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t swig_types[29]
#define SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t swig_types[30]
#define SWIGTYPE_p_DiagMatrix swig_types[31]
#define SWIGTYPE_p_FloatColumnVector swig_types[32]
#define SWIGTYPE_p_FloatComplexColumnVector swig_types[33]
#define SWIGTYPE_p_FloatComplexDET swig_types[34]
#define SWIGTYPE_p_FloatComplexDiagMatrix swig_types[35]
#define SWIGTYPE_p_FloatComplexMatrix swig_types[36]
#define SWIGTYPE_p_FloatComplexNDArray swig_types[37]
#define SWIGTYPE_p_FloatComplexRowVector swig_types[38]
#define SWIGTYPE_p_FloatDET swig_types[39]
#define SWIGTYPE_p_FloatDiagMatrix swig_types[40]
#define SWIGTYPE_p_FloatMatrix swig_types[41]
#define SWIGTYPE_p_FloatNDArray swig_types[42]
#define SWIGTYPE_p_FloatRowVector swig_types[43]
#define SWIGTYPE_p_MArrayT_double_t swig_types[44]
#define SWIGTYPE_p_MArrayT_float_t swig_types[45]
#define SWIGTYPE_p_MArrayT_std__complexT_double_t_t swig_types[46]
#define SWIGTYPE_p_MArrayT_std__complexT_float_t_t swig_types[47]
#define SWIGTYPE_p_MDiagArray2T_double_t swig_types[48]
#define SWIGTYPE_p_MDiagArray2T_float_t swig_types[49]
#define SWIGTYPE_p_MDiagArray2T_std__complexT_double_t_t swig_types[50]
#define SWIGTYPE_p_MDiagArray2T_std__complexT_float_t_t swig_types[51]
#define SWIGTYPE_p_Matrix swig_types[52]
#define SWIGTYPE_p_MatrixType swig_types[53]
#define SWIGTYPE_p_NDArray swig_types[54]
#define SWIGTYPE_p_PermMatrix swig_types[55]
#define SWIGTYPE_p_Range swig_types[56]
#define SWIGTYPE_p_RowVector swig_types[57]
#define SWIGTYPE_p_SparseBoolMatrix swig_types[58]
#define SWIGTYPE_p_SparseComplexMatrix swig_types[59]
#define SWIGTYPE_p_SparseMatrix swig_types[60]
#define SWIGTYPE_p_SparseT_bool_t swig_types[61]
#define SWIGTYPE_p_SparseT_double_t swig_types[62]
#define SWIGTYPE_p_SparseT_std__complexT_double_t_t swig_types[63]
#define SWIGTYPE_p_blas_trans_type swig_types[64]
#define SWIGTYPE_p_bool swig_types[65]
#define SWIGTYPE_p_boolMatrix swig_types[66]
#define SWIGTYPE_p_boolNDArray swig_types[67]
#define SWIGTYPE_p_builtin_type_t swig_types[68]
#define SWIGTYPE_p_charMatrix swig_types[69]
#define SWIGTYPE_p_charNDArray swig_types[70]
#define SWIGTYPE_p_column_vector_type swig_types[71]
#define SWIGTYPE_p_complex_diag_matrix_type swig_types[72]
#define SWIGTYPE_p_complex_elt_type swig_types[73]
#define SWIGTYPE_p_complex_matrix_type swig_types[74]
#define SWIGTYPE_p_dim_vector swig_types[75]
#define SWIGTYPE_p_double swig_types[76]
#define SWIGTYPE_p_f_double__void swig_types[77]
#define SWIGTYPE_p_f_float__void swig_types[78]
#define SWIGTYPE_p_float swig_types[79]
#define SWIGTYPE_p_float_display_format swig_types[80]
#define SWIGTYPE_p_int swig_types[81]
#define SWIGTYPE_p_int16NDArray swig_types[82]
#define SWIGTYPE_p_int32NDArray swig_types[83]
#define SWIGTYPE_p_int64NDArray swig_types[84]
#define SWIGTYPE_p_int8NDArray swig_types[85]
#define SWIGTYPE_p_long swig_types[86]
#define SWIGTYPE_p_mxArray swig_types[87]
#define SWIGTYPE_p_mxClassID swig_types[88]
#define SWIGTYPE_p_mxComplexity swig_types[89]
#define SWIGTYPE_p_oct_data_conv__data_type swig_types[90]
#define SWIGTYPE_p_octave__idx_vector swig_types[91]
#define SWIGTYPE_p_octave__interpreter swig_types[92]
#define SWIGTYPE_p_octave__mach_info__float_format swig_types[93]
#define SWIGTYPE_p_octave__rangeT_double_t swig_types[94]
#define SWIGTYPE_p_octave__stream swig_types[95]
#define SWIGTYPE_p_octave__sys__time swig_types[96]
#define SWIGTYPE_p_octave_base_value swig_types[97]
#define SWIGTYPE_p_octave_base_value__type_conv_info swig_types[98]
#define SWIGTYPE_p_octave_base_value__unary_mapper_t swig_types[99]
#define SWIGTYPE_p_octave_classdef swig_types[100]
#define SWIGTYPE_p_octave_fcn_handle swig_types[101]
#define SWIGTYPE_p_octave_function swig_types[102]
#define SWIGTYPE_p_octave_hdf5_id swig_types[103]
#define SWIGTYPE_p_octave_intT_int_t swig_types[104]
#define SWIGTYPE_p_octave_intT_long_t swig_types[105]
#define SWIGTYPE_p_octave_intT_short_t swig_types[106]
#define SWIGTYPE_p_octave_intT_signed_char_t swig_types[107]
#define SWIGTYPE_p_octave_intT_unsigned_char_t swig_types[108]
#define SWIGTYPE_p_octave_intT_unsigned_int_t swig_types[109]
#define SWIGTYPE_p_octave_intT_unsigned_long_t swig_types[110]
#define SWIGTYPE_p_octave_intT_unsigned_short_t swig_types[111]
#define SWIGTYPE_p_octave_map swig_types[112]
#define SWIGTYPE_p_octave_scalar_map swig_types[113]
#define SWIGTYPE_p_octave_user_code swig_types[114]
#define SWIGTYPE_p_octave_user_function swig_types[115]
#define SWIGTYPE_p_octave_user_script swig_types[116]
#define SWIGTYPE_p_octave_value swig_types[117]
#define SWIGTYPE_p_octave_value_list swig_types[118]
#define SWIGTYPE_p_real_column_vector_type swig_types[119]
#define SWIGTYPE_p_real_diag_matrix_type swig_types[120]
#define SWIGTYPE_p_real_elt_type swig_types[121]
#define SWIGTYPE_p_real_matrix_type swig_types[122]
#define SWIGTYPE_p_real_row_vector_type swig_types[123]
#define SWIGTYPE_p_row_vector_type swig_types[124]
#define SWIGTYPE_p_short swig_types[125]
#define SWIGTYPE_p_signed_char swig_types[126]
#define SWIGTYPE_p_sortmode swig_types[127]
#define SWIGTYPE_p_std__complexT_double_t swig_types[128]
#define SWIGTYPE_p_std__complexT_float_t swig_types[129]
#define SWIGTYPE_p_std__istream swig_types[130]
#define SWIGTYPE_p_std__listT_octave_value_list_t swig_types[131]
#define SWIGTYPE_p_std__listT_octave_value_t swig_types[132]
#define SWIGTYPE_p_std__listT_std__string_t swig_types[133]
#define SWIGTYPE_p_std__mapT_std__string_octave_value_t swig_types[134]
#define SWIGTYPE_p_std__ostream swig_types[135]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[136]
#define SWIGTYPE_p_std__shared_ptrT_octave__stack_frame_t swig_types[137]
#define SWIGTYPE_p_std__size_t swig_types[138]
#define SWIGTYPE_p_std__string swig_types[139]
#define SWIGTYPE_p_string_vector swig_types[140]
#define SWIGTYPE_p_uint16NDArray swig_types[141]
#define SWIGTYPE_p_uint32NDArray swig_types[142]
#define SWIGTYPE_p_uint64NDArray swig_types[143]
#define SWIGTYPE_p_uint8NDArray swig_types[144]
#define SWIGTYPE_p_unsigned_char swig_types[145]
#define SWIGTYPE_p_unsigned_int swig_types[146]
#define SWIGTYPE_p_unsigned_long swig_types[147]
#define SWIGTYPE_p_unsigned_short swig_types[148]
#define SWIGTYPE_p_void swig_types[149]
static swig_type_info *swig_types[151];
static swig_module_info swig_module = {swig_types, 150, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "octopus"
#define SWIG_init      luaopen_octopus
#define SWIG_init_user luaopen_octopus_user

#define SWIG_LUACODE   luaopen_octopus_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>
using namespace octave;


#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cassert>
#include <iostream>
#include <random>
#include <memory>


namespace std {
    template<typename T>
    struct vector_iterator
    {
        typename std::vector<T>::iterator iter;
        std::vector<T> v;

        vector_iterator(const std::vector<T> & vec) {
            v = vec;
        }   
        vector_iterator(const std::vector<T> & vec, const typename std::vector<T>::iterator & i) {
            iter = i;
            v = vec;
        }

        vector_iterator<T>& operator = (const T& val) {
            *iter = val;
            return *this;
        }
        vector_iterator<T>& operator = (const vector_iterator<T>& val) {
            iter = val.iter;
            v    = val.v;
            return *this;;
        }
                
        void next() {
            if(iter != v.end()) iter++;
        }
        void prev() {
            if(iter != v.begin()) iter--;
        }
        void forward(size_t i) {
            iter += i;
        }
        void backward(size_t i) {
            iter -= i;
        }
        void jump(size_t i) {
            iter = i;
        }
        
        T value() { return *iter; }
        void set_value(const T& val) { *iter = val; }
    };
}

#include <string>
#include <algorithm>
#include <iostream>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char std_string___getitem____SWIG(std::string *self,size_t i){ return (*self)[i]; }
SWIGINTERN void std_string___setitem____SWIG(std::string *self,size_t i,char c){ (*self)[i] = c; }
SWIGINTERN char const *std_string___str____SWIG(std::string *self){ return self->c_str(); }
SWIGINTERN int32_t std_string_to_int32__SWIG_0(std::string *self,int base=10){ return std::stoi(self->c_str(),nullptr,base); }
SWIGINTERN int64_t std_string_to_int64__SWIG_0(std::string *self,int base=10){ return std::stoll(self->c_str(),nullptr,base); }
SWIGINTERN float std_string_to_float__SWIG(std::string *self){ return std::stof(*self); }
SWIGINTERN double std_string_to_double__SWIG(std::string *self){ return std::stod(*self); }
SWIGINTERN void std_string_reverse__SWIG(std::string *self){ std::reverse(self->begin(),self->end()); }
SWIGINTERN void std_string_sort__SWIG(std::string *self){ std::sort(self->begin(),self->end()); }
SWIGINTERN void std_string_shuffle__SWIG(std::string *self){ std::random_shuffle(self->begin(),self->end()); }
SWIGINTERN void std_string_getline__SWIG(std::string *self){
                std::getline(std::cin, *self);
            }
SWIGINTERN void std_string_fill__SWIG(std::string *self,size_t i,char c){
                self->resize(i);
                for(size_t n = 0; n < i; n++) (*self)[i] = c;
            }

#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>


#include <octave/oct.h>
#include <octave/octave.h>
#include <octave/parse.h>
#include <octave/interpreter.h>

SWIGINTERN octave_value octave_value_list___getitem____SWIG(octave_value_list *self,size_t i){ return (*self)(i); }
SWIGINTERN void octave_value_list___setitem____SWIG_0(octave_value_list *self,size_t i,octave_value &v){ (*self)(i) = v; }
SWIGINTERN void octave_value_list___setitem____SWIG_1(octave_value_list *self,size_t i,double v){ (*self)(i) = v; }
SWIGINTERN void octave_value_list___setitem____SWIG_2(octave_value_list *self,size_t i,std::string const &v){ (*self)(i) = v; }
SWIGINTERN void octave_value_list___setitem____SWIG_3(octave_value_list *self,size_t i,bool v){ (*self)(i) = v; }
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("std::string::string",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (std::string *)new std::string((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n"
    "    std::string::string(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char result;
  
  SWIG_check_num_args("std::string::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__getitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___getitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = (char)std_string___getitem____SWIG(arg1,arg2);
  lua_pushlstring(L, &result, 1); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__setitem__",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::__setitem__",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::__setitem__",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___setitem",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string___setitem____SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string___tostring(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::__str__",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string___tostring",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)std_string___str____SWIG(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int32",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int32_t)std_string_to_int32__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int32_t result;
  
  SWIG_check_num_args("std::string::to_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int32",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int32",1,SWIGTYPE_p_std__string);
  }
  
  result = (int32_t)std_string_to_int32__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int32(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int32__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int32__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int32'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int32(int)\n"
    "    std::string::to_int32()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_int64__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int arg2 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::to_int64",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int64_t)std_string_to_int64__SWIG_0(arg1,arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("std::string::to_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_int64",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_int64",1,SWIGTYPE_p_std__string);
  }
  
  result = (int64_t)std_string_to_int64__SWIG_0(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_int64(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_string_to_int64__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_to_int64__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_to_int64'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::to_int64(int)\n"
    "    std::string::to_int64()\n");
  lua_error(L);return 0;
}


static int _wrap_string_to_float(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  float result;
  
  SWIG_check_num_args("std::string::to_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_float",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_float",1,SWIGTYPE_p_std__string);
  }
  
  result = (float)std_string_to_float__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_to_double(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  double result;
  
  SWIG_check_num_args("std::string::to_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::to_double",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_to_double",1,SWIGTYPE_p_std__string);
  }
  
  result = (double)std_string_to_double__SWIG(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_reverse(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::reverse",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_reverse",1,SWIGTYPE_p_std__string);
  }
  
  std_string_reverse__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_sort(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::sort",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_sort",1,SWIGTYPE_p_std__string);
  }
  
  std_string_sort__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_shuffle(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::shuffle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::shuffle",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_shuffle",1,SWIGTYPE_p_std__string);
  }
  
  std_string_shuffle__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_getline(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::getline",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::getline",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_getline",1,SWIGTYPE_p_std__string);
  }
  
  std_string_getline__SWIG(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_fill(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  SWIG_check_num_args("std::string::fill",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::fill",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::fill",2,"size_t");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("std::string::fill",3,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_fill",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  std_string_fill__SWIG(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = ((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)(arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::clear",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_clear",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  
  SWIG_check_num_args("std::string::erase",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::erase",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->erase(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::erase",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::erase",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::erase",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_erase",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->erase(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_erase(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_erase__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_erase__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_erase'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::erase(size_t,size_t)\n"
    "    std::string::erase(size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_string_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::push_back",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::push_back",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_push_back",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  
  SWIG_check_num_args("std::string::pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::pop_back",1,"std::string *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_pop_back",1,SWIGTYPE_p_std__string);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_replace(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  std::string temp4 ;
  std::string result;
  
  SWIG_check_num_args("std::string::replace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::replace",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::replace",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::replace",3,"size_t");
  if(!lua_isstring(L,4)) SWIG_fail_arg("std::string::replace",4,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_replace",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_resize(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  
  SWIG_check_num_args("std::string::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::resize",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::resize",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_resize",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_substr(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string result;
  
  SWIG_check_num_args("std::string::substr",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::substr",1,"std::string *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("std::string::substr",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::substr",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_substr",1,SWIGTYPE_p_std__string);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->substr(arg2,arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::find",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->find((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::find",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_find",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_find(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_find__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_find__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_find'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::find(std::string const &,size_t)\n"
    "    std::string::find(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_rfind__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("std::string::rfind",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative");
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->rfind((std::string const &)*arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  size_t result;
  
  SWIG_check_num_args("std::string::rfind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::rfind",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::rfind",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_rfind",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->rfind((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_rfind(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_string_rfind__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_string_rfind__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'string_rfind'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::rfind(std::string const &,size_t)\n"
    "    std::string::rfind(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_string_compare(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("std::string::compare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::compare",1,"std::string *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::string::compare",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_compare",1,SWIGTYPE_p_std__string);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->compare((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    { "to_int32", _wrap_string_to_int32},
    { "to_int64", _wrap_string_to_int64},
    { "to_float", _wrap_string_to_float},
    { "to_double", _wrap_string_to_double},
    { "reverse", _wrap_string_reverse},
    { "sort", _wrap_string_sort},
    { "shuffle", _wrap_string_shuffle},
    { "getline", _wrap_string_getline},
    { "fill", _wrap_string_fill},
    { "data", _wrap_string_data},
    { "size", _wrap_string_size},
    { "empty", _wrap_string_empty},
    { "clear", _wrap_string_clear},
    { "erase", _wrap_string_erase},
    { "push_back", _wrap_string_push_back},
    { "pop_back", _wrap_string_pop_back},
    { "replace", _wrap_string_replace},
    { "resize", _wrap_string_resize},
    { "substr", _wrap_string_substr},
    { "find", _wrap_string_find},
    { "rfind", _wrap_string_rfind},
    { "compare", _wrap_string_compare},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    { "__getitem", _wrap_string___getitem},
    { "__setitem", _wrap_string___setitem},
    { "__tostring", _wrap_string___tostring},
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_dim_vector_xelem(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  octave_idx_type *result = 0 ;
  
  SWIG_check_num_args("dim_vector::xelem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::xelem",1,"dim_vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::xelem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_xelem",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (octave_idx_type *) &(arg1)->xelem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_elem(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  octave_idx_type *result = 0 ;
  
  SWIG_check_num_args("dim_vector::elem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::elem",1,"dim_vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::elem",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_elem",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (octave_idx_type *) &(arg1)->elem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_chop_trailing_singletons(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  
  SWIG_check_num_args("dim_vector::chop_trailing_singletons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::chop_trailing_singletons",1,"dim_vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_chop_trailing_singletons",1,SWIGTYPE_p_dim_vector);
  }
  
  (arg1)->chop_trailing_singletons();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_chop_all_singletons(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  
  SWIG_check_num_args("dim_vector::chop_all_singletons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::chop_all_singletons",1,"dim_vector *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_chop_all_singletons",1,SWIGTYPE_p_dim_vector);
  }
  
  (arg1)->chop_all_singletons();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_dim_max(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::dim_max",0,0)
  result = (octave_idx_type)dim_vector::dim_max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dim_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *result = 0 ;
  
  SWIG_check_num_args("dim_vector::dim_vector",0,0)
  result = (dim_vector *)new dim_vector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dim_vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dim_vector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  dim_vector *result = 0 ;
  
  SWIG_check_num_args("dim_vector::dim_vector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("dim_vector::dim_vector",1,"dim_vector &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_dim_vector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (dim_vector *)new dim_vector((dim_vector &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_dim_vector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_dim_vector(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_dim_vector__SWIG_1(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_dim_vector__SWIG_2(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_dim_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::dim_vector()\n"
    "    dim_vector::dim_vector(dim_vector &&)\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_alloc(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::alloc",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("dim_vector::alloc",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = dim_vector::alloc(arg1);
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_ndims(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::ndims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::ndims",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_ndims",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)((dim_vector const *)arg1)->ndims();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_length(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int result;
  
  SWIG_check_num_args("dim_vector::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::length",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_length",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (int)((dim_vector const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector___call(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  octave_idx_type *result = 0 ;
  
  SWIG_check_num_args("dim_vector::operator ()",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::operator ()",1,"dim_vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::operator ()",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector___call",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (octave_idx_type *) &(arg1)->operator ()(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("dim_vector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::resize",1,"dim_vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dim_vector::resize",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_resize",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("dim_vector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::resize",1,"dim_vector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::resize",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_resize",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dim_vector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dim_vector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::resize(int,int)\n"
    "    dim_vector::resize(int)\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  char arg2 ;
  std::string result;
  
  SWIG_check_num_args("dim_vector::str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::str",1,"dim_vector const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("dim_vector::str",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_str",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = ((dim_vector const *)arg1)->str(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  std::string result;
  
  SWIG_check_num_args("dim_vector::str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::str",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_str",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->str();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_str(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dim_vector_str__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_dim_vector_str__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::str(char) const\n"
    "    dim_vector::str() const\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_all_zero(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::all_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::all_zero",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_all_zero",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->all_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_empty_2d(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::empty_2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::empty_2d",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_empty_2d",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->empty_2d();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_zero_by_zero(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::zero_by_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::zero_by_zero",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_zero_by_zero",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->zero_by_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_any_zero(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::any_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::any_zero",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_any_zero",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->any_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_num_ones(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int result;
  
  SWIG_check_num_args("dim_vector::num_ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::num_ones",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_num_ones",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (int)((dim_vector const *)arg1)->num_ones();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_all_ones(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::all_ones",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::all_ones",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_all_ones",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->all_ones();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_numel__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::numel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::numel",1,"dim_vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::numel",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_numel",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (octave_idx_type)((dim_vector const *)arg1)->numel(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_numel__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::numel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::numel",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_numel",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)((dim_vector const *)arg1)->numel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_numel(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dim_vector_numel__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dim_vector_numel__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_numel'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::numel(int) const\n"
    "    dim_vector::numel() const\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_safe_numel(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::safe_numel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::safe_numel",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_safe_numel",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)((dim_vector const *)arg1)->safe_numel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_any_neg(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::any_neg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::any_neg",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_any_neg",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->any_neg();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::squeeze",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_squeeze",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->squeeze();
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_concat(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::concat",1,"dim_vector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dim_vector::concat",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dim_vector::concat",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_concat",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_concat",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->concat((dim_vector const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_hvcat(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::hvcat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::hvcat",1,"dim_vector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dim_vector::hvcat",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dim_vector::hvcat",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_hvcat",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_hvcat",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->hvcat((dim_vector const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_redim(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::redim",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::redim",1,"dim_vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::redim",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_redim",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((dim_vector const *)arg1)->redim(arg2);
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_as_column(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::as_column",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::as_column",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_as_column",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->as_column();
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_as_row(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::as_row",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::as_row",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_as_row",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->as_row();
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_isvector(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::isvector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::isvector",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_isvector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->isvector();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_is_nd_vector(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  bool result;
  
  SWIG_check_num_args("dim_vector::is_nd_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::is_nd_vector",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_is_nd_vector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (bool)((dim_vector const *)arg1)->is_nd_vector();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_make_nd_vector(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type arg2 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::make_nd_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::make_nd_vector",1,"dim_vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::make_nd_vector",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_make_nd_vector",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((dim_vector const *)arg1)->make_nd_vector(arg2);
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_first_non_singleton__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("dim_vector::first_non_singleton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::first_non_singleton",1,"dim_vector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dim_vector::first_non_singleton",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_first_non_singleton",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((dim_vector const *)arg1)->first_non_singleton(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_first_non_singleton__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  int result;
  
  SWIG_check_num_args("dim_vector::first_non_singleton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::first_non_singleton",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_first_non_singleton",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (int)((dim_vector const *)arg1)->first_non_singleton();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_first_non_singleton(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_dim_vector_first_non_singleton__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_dim_vector_first_non_singleton__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_first_non_singleton'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::first_non_singleton(int) const\n"
    "    dim_vector::first_non_singleton() const\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_compute_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type *arg2 = (octave_idx_type *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::compute_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::compute_index",1,"dim_vector const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dim_vector::compute_index",2,"octave_idx_type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_compute_index",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("dim_vector_compute_index",2,SWIGTYPE_p_long);
  }
  
  result = (octave_idx_type)((dim_vector const *)arg1)->compute_index((octave_idx_type const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_compute_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type *arg2 = (octave_idx_type *) 0 ;
  int arg3 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::compute_index",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::compute_index",1,"dim_vector const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dim_vector::compute_index",2,"octave_idx_type const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dim_vector::compute_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_compute_index",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("dim_vector_compute_index",2,SWIGTYPE_p_long);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (octave_idx_type)((dim_vector const *)arg1)->compute_index((octave_idx_type const *)arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_compute_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dim_vector_compute_index__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dim_vector_compute_index__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_compute_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::compute_index(octave_idx_type const *) const\n"
    "    dim_vector::compute_index(octave_idx_type const *,int) const\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_increment_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type *arg2 = (octave_idx_type *) 0 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("dim_vector::increment_index",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::increment_index",1,"dim_vector const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dim_vector::increment_index",2,"octave_idx_type *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("dim_vector::increment_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_increment_index",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("dim_vector_increment_index",2,SWIGTYPE_p_long);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((dim_vector const *)arg1)->increment_index(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_increment_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type *arg2 = (octave_idx_type *) 0 ;
  int result;
  
  SWIG_check_num_args("dim_vector::increment_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::increment_index",1,"dim_vector const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dim_vector::increment_index",2,"octave_idx_type *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_increment_index",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("dim_vector_increment_index",2,SWIGTYPE_p_long);
  }
  
  result = (int)((dim_vector const *)arg1)->increment_index(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_increment_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_dim_vector_increment_index__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_dim_vector_increment_index__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'dim_vector_increment_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    dim_vector::increment_index(octave_idx_type *,int) const\n"
    "    dim_vector::increment_index(octave_idx_type *) const\n");
  lua_error(L);return 0;
}


static int _wrap_dim_vector_cumulative(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  dim_vector result;
  
  SWIG_check_num_args("dim_vector::cumulative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::cumulative",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_cumulative",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->cumulative();
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_cum_compute_index(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  octave_idx_type *arg2 = (octave_idx_type *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("dim_vector::cum_compute_index",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::cum_compute_index",1,"dim_vector const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("dim_vector::cum_compute_index",2,"octave_idx_type const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_cum_compute_index",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("dim_vector_cum_compute_index",2,SWIGTYPE_p_long);
  }
  
  result = (octave_idx_type)((dim_vector const *)arg1)->cum_compute_index((octave_idx_type const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_dim_vector_as_array(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = (dim_vector *) 0 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("dim_vector::as_array",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dim_vector::as_array",1,"dim_vector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("dim_vector_as_array",1,SWIGTYPE_p_dim_vector);
  }
  
  result = ((dim_vector const *)arg1)->as_array();
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_dim_vector(void *obj) {
dim_vector *arg1 = (dim_vector *) obj;
delete arg1;
}
static int _proxy__wrap_new_dim_vector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_dim_vector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_dim_vector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_dim_vector_methods[]= {
    { "xelem", _wrap_dim_vector_xelem},
    { "elem", _wrap_dim_vector_elem},
    { "chop_trailing_singletons", _wrap_dim_vector_chop_trailing_singletons},
    { "chop_all_singletons", _wrap_dim_vector_chop_all_singletons},
    { "ndims", _wrap_dim_vector_ndims},
    { "length", _wrap_dim_vector_length},
    { "__call", _wrap_dim_vector___call},
    { "resize", _wrap_dim_vector_resize},
    { "str", _wrap_dim_vector_str},
    { "all_zero", _wrap_dim_vector_all_zero},
    { "empty_2d", _wrap_dim_vector_empty_2d},
    { "zero_by_zero", _wrap_dim_vector_zero_by_zero},
    { "any_zero", _wrap_dim_vector_any_zero},
    { "num_ones", _wrap_dim_vector_num_ones},
    { "all_ones", _wrap_dim_vector_all_ones},
    { "numel", _wrap_dim_vector_numel},
    { "safe_numel", _wrap_dim_vector_safe_numel},
    { "any_neg", _wrap_dim_vector_any_neg},
    { "squeeze", _wrap_dim_vector_squeeze},
    { "concat", _wrap_dim_vector_concat},
    { "hvcat", _wrap_dim_vector_hvcat},
    { "redim", _wrap_dim_vector_redim},
    { "as_column", _wrap_dim_vector_as_column},
    { "as_row", _wrap_dim_vector_as_row},
    { "isvector", _wrap_dim_vector_isvector},
    { "is_nd_vector", _wrap_dim_vector_is_nd_vector},
    { "make_nd_vector", _wrap_dim_vector_make_nd_vector},
    { "first_non_singleton", _wrap_dim_vector_first_non_singleton},
    { "compute_index", _wrap_dim_vector_compute_index},
    { "increment_index", _wrap_dim_vector_increment_index},
    { "cumulative", _wrap_dim_vector_cumulative},
    { "cum_compute_index", _wrap_dim_vector_cum_compute_index},
    { "as_array", _wrap_dim_vector_as_array},
    {0,0}
};
static swig_lua_method swig_dim_vector_meta[] = {
    { "__call", _wrap_dim_vector___call},
    {0,0}
};

static swig_lua_attribute swig_dim_vector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_dim_vector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_dim_vector_Sf_SwigStatic_methods[]= {
    { "dim_max", _wrap_dim_vector_dim_max},
    { "alloc", _wrap_dim_vector_alloc},
    {0,0}
};
static swig_lua_class* swig_dim_vector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_dim_vector_Sf_SwigStatic = {
    "dim_vector",
    swig_dim_vector_Sf_SwigStatic_methods,
    swig_dim_vector_Sf_SwigStatic_attributes,
    swig_dim_vector_Sf_SwigStatic_constants,
    swig_dim_vector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_dim_vector_bases[] = {0};
static const char *swig_dim_vector_base_names[] = {0};
static swig_lua_class _wrap_class_dim_vector = { "dim_vector", "dim_vector", &SWIGTYPE_p_dim_vector,_proxy__wrap_new_dim_vector, swig_delete_dim_vector, swig_dim_vector_methods, swig_dim_vector_attributes, &swig_dim_vector_Sf_SwigStatic, swig_dim_vector_meta, swig_dim_vector_bases, swig_dim_vector_base_names };

static int _wrap_new_ComplexNDArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::ComplexNDArray",0,0)
  result = (ComplexNDArray *)new ComplexNDArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNDArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::ComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::ComplexNDArray",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (ComplexNDArray *)new ComplexNDArray((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNDArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  Complex *arg2 = 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::ComplexNDArray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::ComplexNDArray",1,"dim_vector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::ComplexNDArray",2,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexNDArray",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexNDArray *)new ComplexNDArray((dim_vector const &)*arg1,(Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNDArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::ComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::ComplexNDArray",1,"ComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("new_ComplexNDArray",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (ComplexNDArray *)new ComplexNDArray((ComplexNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNDArray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::ComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::ComplexNDArray",1,"charNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_ComplexNDArray",1,SWIGTYPE_p_charNDArray);
  }
  
  result = (ComplexNDArray *)new ComplexNDArray((charNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexNDArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexNDArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexNDArray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexNDArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexNDArray__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexNDArray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexNDArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::ComplexNDArray()\n"
    "    ComplexNDArray::ComplexNDArray(dim_vector const &)\n"
    "    ComplexNDArray::ComplexNDArray(dim_vector const &,Complex const &)\n"
    "    ComplexNDArray::ComplexNDArray(ComplexNDArray const &)\n"
    "    ComplexNDArray::ComplexNDArray(charNDArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_any_element_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexNDArray::any_element_is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::any_element_is_nan",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_any_element_is_nan",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (bool)((ComplexNDArray const *)arg1)->any_element_is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_any_element_is_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexNDArray::any_element_is_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::any_element_is_inf_or_nan",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_any_element_is_inf_or_nan",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (bool)((ComplexNDArray const *)arg1)->any_element_is_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_all_elements_are_real(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexNDArray::all_elements_are_real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::all_elements_are_real",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_all_elements_are_real",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (bool)((ComplexNDArray const *)arg1)->all_elements_are_real();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_all_integers(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexNDArray::all_integers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::all_integers",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::all_integers",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexNDArray::all_integers",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_all_integers",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexNDArray_all_integers",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexNDArray_all_integers",3,SWIGTYPE_p_double);
  }
  
  result = (bool)((ComplexNDArray const *)arg1)->all_integers(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_too_large_for_float(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexNDArray::too_large_for_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::too_large_for_float",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_too_large_for_float",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (bool)((ComplexNDArray const *)arg1)->too_large_for_float();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::all",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_all",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->all(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::all",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_all",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->all();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::all(int) const\n"
    "    ComplexNDArray::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::any",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_any",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->any(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::any",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_any",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->any();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::any(int) const\n"
    "    ComplexNDArray::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cumprod",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cumprod",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->cumprod(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cumprod",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cumprod",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->cumprod();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::cumprod(int) const\n"
    "    ComplexNDArray::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cumsum",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cumsum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->cumsum(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cumsum",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cumsum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->cumsum();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::cumsum(int) const\n"
    "    ComplexNDArray::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::prod",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_prod",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->prod(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::prod",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_prod",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->prod();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::prod(int) const\n"
    "    ComplexNDArray::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::sum",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_sum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->sum(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::sum",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_sum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->sum();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::sum(int) const\n"
    "    ComplexNDArray::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_xsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::xsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::xsum",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::xsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_xsum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->xsum(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_xsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::xsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::xsum",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_xsum",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->xsum();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_xsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_xsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_xsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_xsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::xsum(int) const\n"
    "    ComplexNDArray::xsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::sumsq",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_sumsq",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->sumsq(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::sumsq",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_sumsq",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->sumsq();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::sumsq(int) const\n"
    "    ComplexNDArray::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_concat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::concat",1,"ComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::concat",2,"ComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",2,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((ComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_concat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  NDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::concat",1,"ComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::concat",2,"NDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",2,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((NDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_concat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexNDArray_concat__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexNDArray_concat__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_concat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::concat(ComplexNDArray const &,Array< octave_idx_type > const &)\n"
    "    ComplexNDArray::concat(NDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::max",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::max",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_max",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->max(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::max",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_max",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->max();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::max",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::max",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::max",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_max",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->max(*arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::max",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_max",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexNDArray const *)arg1)->max(*arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_max(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_max__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexNDArray_max__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_max__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_max__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::max(int) const\n"
    "    ComplexNDArray::max() const\n"
    "    ComplexNDArray::max(Array< octave_idx_type > &,int) const\n"
    "    ComplexNDArray::max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::min",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::min",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_min",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->min(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::min",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_min",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->min();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::min",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::min",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::min",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::min",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_min",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->min(*arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::min",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_min",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexNDArray const *)arg1)->min(*arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_min(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_min__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexNDArray_min__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_min__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_min__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::min(int) const\n"
    "    ComplexNDArray::min() const\n"
    "    ComplexNDArray::min(Array< octave_idx_type > &,int) const\n"
    "    ComplexNDArray::min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_cummax__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummax",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::cummax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->cummax(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummax__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummax",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->cummax();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummax",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::cummax",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::cummax",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->cummax(*arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummax",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::cummax",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexNDArray const *)arg1)->cummax(*arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummax(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_cummax__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexNDArray_cummax__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_cummax__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_cummax__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_cummax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::cummax(int) const\n"
    "    ComplexNDArray::cummax() const\n"
    "    ComplexNDArray::cummax(Array< octave_idx_type > &,int) const\n"
    "    ComplexNDArray::cummax(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_cummin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummin",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::cummin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->cummin(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummin",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->cummin();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummin",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::cummin",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::cummin",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->cummin(*arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::cummin",1,"ComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::cummin",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexNDArray const *)arg1)->cummin(*arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_cummin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_cummin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexNDArray_cummin__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_cummin__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_cummin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_cummin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::cummin(int) const\n"
    "    ComplexNDArray::cummin() const\n"
    "    ComplexNDArray::cummin(Array< octave_idx_type > &,int) const\n"
    "    ComplexNDArray::cummin(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_diff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  int arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diff",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::diff",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::diff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diff",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->diff(arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diff",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::diff",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diff",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->diff(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diff__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diff",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diff",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->diff();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_diff__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_diff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_diff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_diff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::diff(octave_idx_type,int) const\n"
    "    ComplexNDArray::diff(octave_idx_type) const\n"
    "    ComplexNDArray::diff() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  NDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::insert",1,"ComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::insert",2,"NDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexNDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",2,SWIGTYPE_p_NDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexNDArray *) &(arg1)->insert((NDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::insert",1,"ComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::insert",2,"ComplexNDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexNDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",2,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexNDArray *) &(arg1)->insert((ComplexNDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::insert",1,"ComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::insert",2,"ComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexNDArray::insert",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",2,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_insert",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (ComplexNDArray *) &(arg1)->insert((ComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexNDArray_insert__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexNDArray_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexNDArray_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::insert(NDArray const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexNDArray::insert(ComplexNDArray const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexNDArray::insert(ComplexNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_abs(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("ComplexNDArray::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::abs",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_abs",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->abs();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_isnan(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::isnan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::isnan",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_isnan",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->isnan();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_isinf(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::isinf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::isinf",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_isinf",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->isinf();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::isfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::isfinite",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_isfinite",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->isfinite();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"ComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = conj((ComplexNDArray const &)*arg1);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_fourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::fourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::fourier",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::fourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_fourier",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->fourier(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_fourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::fourier",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_fourier",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->fourier();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_fourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_fourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_fourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_fourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::fourier(int) const\n"
    "    ComplexNDArray::fourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_ifourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::ifourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::ifourier",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::ifourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_ifourier",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->ifourier(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_ifourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::ifourier",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_ifourier",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->ifourier();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_ifourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_ifourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_ifourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_ifourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::ifourier(int) const\n"
    "    ComplexNDArray::ifourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::fourier2d",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_fourier2d",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->fourier2d();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::ifourier2d",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_ifourier2d",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->ifourier2d();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_fourierNd(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::fourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::fourierNd",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_fourierNd",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->fourierNd();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_ifourierNd(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::ifourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::ifourierNd",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_ifourierNd",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->ifourierNd();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::squeeze",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_squeeze",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->squeeze();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_increment_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("ComplexNDArray::increment_index",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::increment_index",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::increment_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("ComplexNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  ComplexNDArray::increment_index(*arg1,(dim_vector const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_increment_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::increment_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::increment_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("ComplexNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  ComplexNDArray::increment_index(*arg1,(dim_vector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_increment_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexNDArray_increment_index__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_increment_index__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_increment_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &,int)\n"
    "    ComplexNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_compute_index(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("ComplexNDArray::compute_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexNDArray::compute_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexNDArray::compute_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexNDArray_compute_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("ComplexNDArray_compute_index",2,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)ComplexNDArray::compute_index(*arg1,(dim_vector const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diag",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diag",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((ComplexNDArray const *)arg1)->diag(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diag",1,"ComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diag",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = ((ComplexNDArray const *)arg1)->diag();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("ComplexNDArray::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::diag",1,"ComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexNDArray::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexNDArray::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_diag",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexNDArray const *)arg1)->diag(arg2,arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexNDArray_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexNDArray_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexNDArray_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexNDArray_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexNDArray_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexNDArray::diag(octave_idx_type) const\n"
    "    ComplexNDArray::diag() const\n"
    "    ComplexNDArray::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexNDArray_changesign(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = (ComplexNDArray *) 0 ;
  ComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("ComplexNDArray::changesign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexNDArray::changesign",1,"ComplexNDArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("ComplexNDArray_changesign",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (ComplexNDArray *) &(arg1)->changesign();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexNDArray(void *obj) {
ComplexNDArray *arg1 = (ComplexNDArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexNDArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexNDArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexNDArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexNDArray_methods[]= {
    { "any_element_is_nan", _wrap_ComplexNDArray_any_element_is_nan},
    { "any_element_is_inf_or_nan", _wrap_ComplexNDArray_any_element_is_inf_or_nan},
    { "all_elements_are_real", _wrap_ComplexNDArray_all_elements_are_real},
    { "all_integers", _wrap_ComplexNDArray_all_integers},
    { "too_large_for_float", _wrap_ComplexNDArray_too_large_for_float},
    { "all", _wrap_ComplexNDArray_all},
    { "any", _wrap_ComplexNDArray_any},
    { "cumprod", _wrap_ComplexNDArray_cumprod},
    { "cumsum", _wrap_ComplexNDArray_cumsum},
    { "prod", _wrap_ComplexNDArray_prod},
    { "sum", _wrap_ComplexNDArray_sum},
    { "xsum", _wrap_ComplexNDArray_xsum},
    { "sumsq", _wrap_ComplexNDArray_sumsq},
    { "concat", _wrap_ComplexNDArray_concat},
    { "max", _wrap_ComplexNDArray_max},
    { "min", _wrap_ComplexNDArray_min},
    { "cummax", _wrap_ComplexNDArray_cummax},
    { "cummin", _wrap_ComplexNDArray_cummin},
    { "diff", _wrap_ComplexNDArray_diff},
    { "insert", _wrap_ComplexNDArray_insert},
    { "abs", _wrap_ComplexNDArray_abs},
    { "isnan", _wrap_ComplexNDArray_isnan},
    { "isinf", _wrap_ComplexNDArray_isinf},
    { "isfinite", _wrap_ComplexNDArray_isfinite},
    { "fourier", _wrap_ComplexNDArray_fourier},
    { "ifourier", _wrap_ComplexNDArray_ifourier},
    { "fourier2d", _wrap_ComplexNDArray_fourier2d},
    { "ifourier2d", _wrap_ComplexNDArray_ifourier2d},
    { "fourierNd", _wrap_ComplexNDArray_fourierNd},
    { "ifourierNd", _wrap_ComplexNDArray_ifourierNd},
    { "squeeze", _wrap_ComplexNDArray_squeeze},
    { "diag", _wrap_ComplexNDArray_diag},
    { "changesign", _wrap_ComplexNDArray_changesign},
    {0,0}
};
static swig_lua_method swig_ComplexNDArray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ComplexNDArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexNDArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexNDArray_Sf_SwigStatic_methods[]= {
    { "increment_index", _wrap_ComplexNDArray_increment_index},
    { "compute_index", _wrap_ComplexNDArray_compute_index},
    {0,0}
};
static swig_lua_class* swig_ComplexNDArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexNDArray_Sf_SwigStatic = {
    "ComplexNDArray",
    swig_ComplexNDArray_Sf_SwigStatic_methods,
    swig_ComplexNDArray_Sf_SwigStatic_attributes,
    swig_ComplexNDArray_Sf_SwigStatic_constants,
    swig_ComplexNDArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexNDArray_bases[] = {0};
static const char *swig_ComplexNDArray_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexNDArray = { "ComplexNDArray", "ComplexNDArray", &SWIGTYPE_p_ComplexNDArray,_proxy__wrap_new_ComplexNDArray, swig_delete_ComplexNDArray, swig_ComplexNDArray_methods, swig_ComplexNDArray_attributes, &swig_ComplexNDArray_Sf_SwigStatic, swig_ComplexNDArray_meta, swig_ComplexNDArray_bases, swig_ComplexNDArray_base_names };

static int _wrap_new_ComplexRowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",0,0)
  result = (ComplexRowVector *)new ComplexRowVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (ComplexRowVector *)new ComplexRowVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexRowVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  Complex *arg2 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"octave_idx_type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",2,"Complex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexRowVector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector(arg1,(Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("new_ComplexRowVector",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector((ComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< Complex > *arg1 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"MArray< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexRowVector",1,SWIGTYPE_p_MArrayT_std__complexT_double_t_t);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector((MArray< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< Complex > *arg1 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"Array< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexRowVector",1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector((Array< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::ComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexRowVector::ComplexRowVector",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_ComplexRowVector",1,SWIGTYPE_p_RowVector);
  }
  
  result = (ComplexRowVector *)new ComplexRowVector((RowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexRowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexRowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ComplexRowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexRowVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexRowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexRowVector::ComplexRowVector()\n"
    "    ComplexRowVector::ComplexRowVector(octave_idx_type)\n"
    "    ComplexRowVector::ComplexRowVector(dim_vector const &)\n"
    "    ComplexRowVector::ComplexRowVector(octave_idx_type,Complex const &)\n"
    "    ComplexRowVector::ComplexRowVector(ComplexRowVector const &)\n"
    "    ComplexRowVector::ComplexRowVector(MArray< Complex > const &)\n"
    "    ComplexRowVector::ComplexRowVector(Array< Complex > const &)\n"
    "    ComplexRowVector::ComplexRowVector(RowVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexRowVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexRowVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::operator ==",1,"ComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::operator ==",2,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector___eq",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector___eq",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = (bool)((ComplexRowVector const *)arg1)->operator ==((ComplexRowVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  RowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::insert",1,"ComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::insert",2,"RowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_insert",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_insert",2,SWIGTYPE_p_RowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (ComplexRowVector *) &(arg1)->insert((RowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::insert",1,"ComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::insert",2,"ComplexRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_insert",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_insert",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (ComplexRowVector *) &(arg1)->insert((ComplexRowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexRowVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexRowVector_insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexRowVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexRowVector::insert(RowVector const &,octave_idx_type)\n"
    "    ComplexRowVector::insert(ComplexRowVector const &,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexRowVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  double arg2 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::fill",1,"ComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (ComplexRowVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  Complex *arg2 = 0 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::fill",1,"ComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::fill",2,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexRowVector *) &(arg1)->fill((Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::fill",1,"ComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexRowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexRowVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  Complex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::fill",1,"ComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::fill",2,"Complex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexRowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexRowVector_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexRowVector *) &(arg1)->fill((Complex const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexRowVector_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexRowVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexRowVector_fill__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexRowVector_fill__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexRowVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexRowVector::fill(double)\n"
    "    ComplexRowVector::fill(Complex const &)\n"
    "    ComplexRowVector::fill(double,octave_idx_type,octave_idx_type)\n"
    "    ComplexRowVector::fill(Complex const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexRowVector_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  RowVector *arg2 = 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexRowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::append",1,"ComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::append",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_append",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_append",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->append((RowVector const &)*arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexRowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::append",1,"ComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexRowVector::append",2,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_append",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_append",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->append((ComplexRowVector const &)*arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexRowVector_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexRowVector_append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexRowVector_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexRowVector::append(RowVector const &) const\n"
    "    ComplexRowVector::append(ComplexRowVector const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexRowVector_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexRowVector::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::hermitian",1,"ComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_hermitian",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->hermitian();
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexRowVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::transpose",1,"ComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_transpose",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->transpose();
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = conj((ComplexRowVector const &)*arg1);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexRowVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::extract",1,"ComplexRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_extract",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexRowVector const *)arg1)->extract(arg2,arg3);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexRowVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::extract_n",1,"ComplexRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexRowVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_extract_n",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexRowVector const *)arg1)->extract_n(arg2,arg3);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_min(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  Complex result;
  
  SWIG_check_num_args("ComplexRowVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::min",1,"ComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_min",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->min();
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_max(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  Complex result;
  
  SWIG_check_num_args("ComplexRowVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::max",1,"ComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_max",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexRowVector const *)arg1)->max();
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  Complex *arg3 = 0 ;
  
  SWIG_check_num_args("ComplexRowVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::resize",1,"ComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::resize",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexRowVector::resize",3,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_resize",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexRowVector_resize",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->resize(arg2,(Complex const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ComplexRowVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::resize",1,"ComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_resize",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexRowVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexRowVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexRowVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexRowVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexRowVector::resize(octave_idx_type,Complex const &)\n"
    "    ComplexRowVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexRowVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = (ComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ComplexRowVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexRowVector::clear",1,"ComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexRowVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexRowVector_clear",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexRowVector(void *obj) {
ComplexRowVector *arg1 = (ComplexRowVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexRowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexRowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexRowVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexRowVector_methods[]= {
    { "__eq", _wrap_ComplexRowVector___eq},
    { "insert", _wrap_ComplexRowVector_insert},
    { "fill", _wrap_ComplexRowVector_fill},
    { "append", _wrap_ComplexRowVector_append},
    { "hermitian", _wrap_ComplexRowVector_hermitian},
    { "transpose", _wrap_ComplexRowVector_transpose},
    { "extract", _wrap_ComplexRowVector_extract},
    { "extract_n", _wrap_ComplexRowVector_extract_n},
    { "min", _wrap_ComplexRowVector_min},
    { "max", _wrap_ComplexRowVector_max},
    { "resize", _wrap_ComplexRowVector_resize},
    { "clear", _wrap_ComplexRowVector_clear},
    {0,0}
};
static swig_lua_method swig_ComplexRowVector_meta[] = {
    { "__eq", _wrap_ComplexRowVector___eq},
    {0,0}
};

static swig_lua_attribute swig_ComplexRowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexRowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexRowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexRowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexRowVector_Sf_SwigStatic = {
    "ComplexRowVector",
    swig_ComplexRowVector_Sf_SwigStatic_methods,
    swig_ComplexRowVector_Sf_SwigStatic_attributes,
    swig_ComplexRowVector_Sf_SwigStatic_constants,
    swig_ComplexRowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexRowVector_bases[] = {0};
static const char *swig_ComplexRowVector_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexRowVector = { "ComplexRowVector", "ComplexRowVector", &SWIGTYPE_p_ComplexRowVector,_proxy__wrap_new_ComplexRowVector, swig_delete_ComplexRowVector, swig_ComplexRowVector_methods, swig_ComplexRowVector_attributes, &swig_ComplexRowVector_Sf_SwigStatic, swig_ComplexRowVector_meta, swig_ComplexRowVector_bases, swig_ComplexRowVector_base_names };

static int _wrap_new_ComplexColumnVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",0,0)
  result = (ComplexColumnVector *)new ComplexColumnVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (ComplexColumnVector *)new ComplexColumnVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  Complex *arg2 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"octave_idx_type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",2,"Complex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector(arg1,(Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector((ComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< Complex > *arg1 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"MArray< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",1,SWIGTYPE_p_MArrayT_std__complexT_double_t_t);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector((MArray< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< Complex > *arg1 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"Array< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector((Array< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::ComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexColumnVector::ComplexColumnVector",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_ComplexColumnVector",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (ComplexColumnVector *)new ComplexColumnVector((ColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexColumnVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexColumnVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ComplexColumnVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexColumnVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexColumnVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexColumnVector::ComplexColumnVector()\n"
    "    ComplexColumnVector::ComplexColumnVector(octave_idx_type)\n"
    "    ComplexColumnVector::ComplexColumnVector(dim_vector const &)\n"
    "    ComplexColumnVector::ComplexColumnVector(octave_idx_type,Complex const &)\n"
    "    ComplexColumnVector::ComplexColumnVector(ComplexColumnVector const &)\n"
    "    ComplexColumnVector::ComplexColumnVector(MArray< Complex > const &)\n"
    "    ComplexColumnVector::ComplexColumnVector(Array< Complex > const &)\n"
    "    ComplexColumnVector::ComplexColumnVector(ColumnVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexColumnVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexColumnVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::operator ==",1,"ComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::operator ==",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector___eq",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector___eq",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = (bool)((ComplexColumnVector const *)arg1)->operator ==((ComplexColumnVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::insert",1,"ComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::insert",2,"ColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_insert",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_insert",2,SWIGTYPE_p_ColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (ComplexColumnVector *) &(arg1)->insert((ColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::insert",1,"ComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::insert",2,"ComplexColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_insert",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_insert",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (ComplexColumnVector *) &(arg1)->insert((ComplexColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexColumnVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexColumnVector_insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexColumnVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexColumnVector::insert(ColumnVector const &,octave_idx_type)\n"
    "    ComplexColumnVector::insert(ComplexColumnVector const &,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexColumnVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  double arg2 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::fill",1,"ComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (ComplexColumnVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  Complex *arg2 = 0 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::fill",1,"ComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::fill",2,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexColumnVector *) &(arg1)->fill((Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::fill",1,"ComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexColumnVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  Complex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::fill",1,"ComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::fill",2,"Complex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexColumnVector_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexColumnVector *) &(arg1)->fill((Complex const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexColumnVector_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexColumnVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexColumnVector_fill__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexColumnVector_fill__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexColumnVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexColumnVector::fill(double)\n"
    "    ComplexColumnVector::fill(Complex const &)\n"
    "    ComplexColumnVector::fill(double,octave_idx_type,octave_idx_type)\n"
    "    ComplexColumnVector::fill(Complex const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexColumnVector_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::stack",1,"ComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::stack",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_stack",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_stack",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->stack((ColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::stack",1,"ComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexColumnVector::stack",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_stack",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_stack",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->stack((ComplexColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexColumnVector_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexColumnVector_stack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexColumnVector_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexColumnVector::stack(ColumnVector const &) const\n"
    "    ComplexColumnVector::stack(ComplexColumnVector const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexColumnVector_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexColumnVector::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::hermitian",1,"ComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_hermitian",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->hermitian();
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexColumnVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::transpose",1,"ComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_transpose",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->transpose();
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = conj((ComplexColumnVector const &)*arg1);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexColumnVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::extract",1,"ComplexColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_extract",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexColumnVector const *)arg1)->extract(arg2,arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexColumnVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::extract_n",1,"ComplexColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexColumnVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_extract_n",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexColumnVector const *)arg1)->extract_n(arg2,arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_min(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  Complex result;
  
  SWIG_check_num_args("ComplexColumnVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::min",1,"ComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_min",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->min();
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_max(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  Complex result;
  
  SWIG_check_num_args("ComplexColumnVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::max",1,"ComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_max",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->max();
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("ComplexColumnVector::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::abs",1,"ComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_abs",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexColumnVector const *)arg1)->abs();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  Complex *arg3 = 0 ;
  
  SWIG_check_num_args("ComplexColumnVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::resize",1,"ComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::resize",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexColumnVector::resize",3,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_resize",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexColumnVector_resize",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->resize(arg2,(Complex const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ComplexColumnVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::resize",1,"ComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_resize",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexColumnVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexColumnVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexColumnVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexColumnVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexColumnVector::resize(octave_idx_type,Complex const &)\n"
    "    ComplexColumnVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexColumnVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = (ComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ComplexColumnVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexColumnVector::clear",1,"ComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexColumnVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexColumnVector_clear",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ComplexColumnVector(void *obj) {
ComplexColumnVector *arg1 = (ComplexColumnVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexColumnVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexColumnVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexColumnVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexColumnVector_methods[]= {
    { "__eq", _wrap_ComplexColumnVector___eq},
    { "insert", _wrap_ComplexColumnVector_insert},
    { "fill", _wrap_ComplexColumnVector_fill},
    { "stack", _wrap_ComplexColumnVector_stack},
    { "hermitian", _wrap_ComplexColumnVector_hermitian},
    { "transpose", _wrap_ComplexColumnVector_transpose},
    { "extract", _wrap_ComplexColumnVector_extract},
    { "extract_n", _wrap_ComplexColumnVector_extract_n},
    { "min", _wrap_ComplexColumnVector_min},
    { "max", _wrap_ComplexColumnVector_max},
    { "abs", _wrap_ComplexColumnVector_abs},
    { "resize", _wrap_ComplexColumnVector_resize},
    { "clear", _wrap_ComplexColumnVector_clear},
    {0,0}
};
static swig_lua_method swig_ComplexColumnVector_meta[] = {
    { "__eq", _wrap_ComplexColumnVector___eq},
    {0,0}
};

static swig_lua_attribute swig_ComplexColumnVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexColumnVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexColumnVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexColumnVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexColumnVector_Sf_SwigStatic = {
    "ComplexColumnVector",
    swig_ComplexColumnVector_Sf_SwigStatic_methods,
    swig_ComplexColumnVector_Sf_SwigStatic_attributes,
    swig_ComplexColumnVector_Sf_SwigStatic_constants,
    swig_ComplexColumnVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexColumnVector_bases[] = {0};
static const char *swig_ComplexColumnVector_base_names[] = {0};
static swig_lua_class _wrap_class_ComplexColumnVector = { "ComplexColumnVector", "ComplexColumnVector", &SWIGTYPE_p_ComplexColumnVector,_proxy__wrap_new_ComplexColumnVector, swig_delete_ComplexColumnVector, swig_ComplexColumnVector_methods, swig_ComplexColumnVector_attributes, &swig_ComplexColumnVector_Sf_SwigStatic, swig_ComplexColumnVector_meta, swig_ComplexColumnVector_bases, swig_ComplexColumnVector_base_names };

static int _wrap_new_ComplexMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",0,0)
  result = (ComplexMatrix *)new ComplexMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((ComplexMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",2,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (ComplexMatrix *)new ComplexMatrix(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  Complex *arg3 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",3,"Complex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",3,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix(arg1,arg2,(Complex const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  Complex *arg2 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"dim_vector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",2,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((dim_vector const &)*arg1,(Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  Matrix *arg2 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"Matrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",2,SWIGTYPE_p_Matrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((Matrix const &)*arg1,(Matrix const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_Matrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((Matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_RowVector);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((RowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((ColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  DiagMatrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_DiagMatrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((DiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< double > *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"MDiagArray2< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_double_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_MDiagArray2T_double_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((MDiagArray2< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< double > *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"DiagArray2< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_double_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_DiagArray2T_double_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((DiagArray2< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((ComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((ComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  ComplexDiagMatrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"ComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexDiagMatrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_ComplexDiagMatrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((ComplexDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< Complex > *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"MDiagArray2< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_MDiagArray2T_std__complexT_double_t_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((MDiagArray2< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< Complex > *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"DiagArray2< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((DiagArray2< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"boolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_boolMatrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((boolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::ComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ComplexMatrix::ComplexMatrix",1,"charMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_ComplexMatrix",1,SWIGTYPE_p_charMatrix);
  }
  
  result = (ComplexMatrix *)new ComplexMatrix((charMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ComplexMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ComplexMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_15(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_16(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_17(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_18(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_19(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_20(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ComplexMatrix__SWIG_21(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexMatrix__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_ComplexMatrix__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ComplexMatrix__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_ComplexMatrix__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ComplexMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::ComplexMatrix()\n"
    "    ComplexMatrix::ComplexMatrix(ComplexMatrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::ComplexMatrix(octave_idx_type,octave_idx_type,Complex const &)\n"
    "    ComplexMatrix::ComplexMatrix(dim_vector const &)\n"
    "    ComplexMatrix::ComplexMatrix(dim_vector const &,Complex const &)\n"
    "    ComplexMatrix::ComplexMatrix(Matrix const &,Matrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(Matrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(RowVector const &)\n"
    "    ComplexMatrix::ComplexMatrix(ColumnVector const &)\n"
    "    ComplexMatrix::ComplexMatrix(DiagMatrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(MDiagArray2< double > const &)\n"
    "    ComplexMatrix::ComplexMatrix(DiagArray2< double > const &)\n"
    "    ComplexMatrix::ComplexMatrix(ComplexRowVector const &)\n"
    "    ComplexMatrix::ComplexMatrix(ComplexColumnVector const &)\n"
    "    ComplexMatrix::ComplexMatrix(ComplexDiagMatrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(MDiagArray2< Complex > const &)\n"
    "    ComplexMatrix::ComplexMatrix(DiagArray2< Complex > const &)\n"
    "    ComplexMatrix::ComplexMatrix(boolMatrix const &)\n"
    "    ComplexMatrix::ComplexMatrix(charMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexMatrix::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::operator ==",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::operator ==",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix___eq",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix___eq",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = (bool)((ComplexMatrix const *)arg1)->operator ==((ComplexMatrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_ishermitian(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("ComplexMatrix::ishermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::ishermitian",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_ishermitian",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = (bool)((ComplexMatrix const *)arg1)->ishermitian();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"Matrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_Matrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((Matrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  RowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"RowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_RowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((RowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"ColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_ColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((ColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"DiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_DiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((DiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"ComplexMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((ComplexMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"ComplexRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((ComplexRowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"ComplexColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((ComplexColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexDiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::insert",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::insert",2,"ComplexDiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexDiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_insert",2,SWIGTYPE_p_ComplexDiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ComplexMatrix *) &(arg1)->insert((ComplexDiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_insert__SWIG_7(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::insert(Matrix const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(RowVector const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(ColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(DiagMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(ComplexMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(ComplexRowVector const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(ComplexColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::insert(ComplexDiagMatrix const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  double arg2 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fill",1,"ComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (ComplexMatrix *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Complex *arg2 = 0 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fill",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::fill",2,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (ComplexMatrix *) &(arg1)->fill((Complex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fill",1,"ComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ComplexMatrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ComplexMatrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (ComplexMatrix *) &(arg1)->fill(arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Complex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  ComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fill",1,"ComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::fill",2,"Complex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ComplexMatrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("ComplexMatrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexMatrix_fill",2,SWIGTYPE_p_std__complexT_double_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (ComplexMatrix *) &(arg1)->fill((Complex const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_fill(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ComplexMatrix_fill__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_ComplexMatrix_fill__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::fill(double)\n"
    "    ComplexMatrix::fill(Complex const &)\n"
    "    ComplexMatrix::fill(double,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n"
    "    ComplexMatrix::fill(Complex const &,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((Matrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  RowVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((RowVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((ColumnVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_DiagMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((DiagMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((ComplexRowVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((ComplexColumnVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexDiagMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::append",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::append",2,"ComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexDiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_append",2,SWIGTYPE_p_ComplexDiagMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->append((ComplexDiagMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_append__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::append(Matrix const &) const\n"
    "    ComplexMatrix::append(RowVector const &) const\n"
    "    ComplexMatrix::append(ColumnVector const &) const\n"
    "    ComplexMatrix::append(DiagMatrix const &) const\n"
    "    ComplexMatrix::append(ComplexMatrix const &) const\n"
    "    ComplexMatrix::append(ComplexRowVector const &) const\n"
    "    ComplexMatrix::append(ComplexColumnVector const &) const\n"
    "    ComplexMatrix::append(ComplexDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((Matrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  RowVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((RowVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((ColumnVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_DiagMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((DiagMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexRowVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((ComplexRowVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((ComplexColumnVector const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexDiagMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::stack",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::stack",2,"ComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexDiagMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_stack",2,SWIGTYPE_p_ComplexDiagMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->stack((ComplexDiagMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_stack__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::stack(Matrix const &) const\n"
    "    ComplexMatrix::stack(RowVector const &) const\n"
    "    ComplexMatrix::stack(ColumnVector const &) const\n"
    "    ComplexMatrix::stack(DiagMatrix const &) const\n"
    "    ComplexMatrix::stack(ComplexMatrix const &) const\n"
    "    ComplexMatrix::stack(ComplexRowVector const &) const\n"
    "    ComplexMatrix::stack(ComplexColumnVector const &) const\n"
    "    ComplexMatrix::stack(ComplexDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::hermitian",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_hermitian",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->hermitian();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::transpose",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_transpose",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->transpose();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = conj((ComplexMatrix const &)*arg1);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_extract(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::extract",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::extract",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::extract",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::extract",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ComplexMatrix::extract",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_extract",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((ComplexMatrix const *)arg1)->extract(arg2,arg3,arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::extract_n",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::extract_n",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::extract_n",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ComplexMatrix::extract_n",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("ComplexMatrix::extract_n",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_extract_n",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((ComplexMatrix const *)arg1)->extract_n(arg2,arg3,arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexMatrix::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::row",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->row(arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::column",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::column",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->column(arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  Complex *arg4 = 0 ;
  
  SWIG_check_num_args("ComplexMatrix::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::resize",1,"ComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::resize",3,"octave_idx_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::resize",4,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_resize",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("ComplexMatrix_resize",4,SWIGTYPE_p_std__complexT_double_t);
  }
  
  (arg1)->resize(arg2,arg3,(Complex const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  
  SWIG_check_num_args("ComplexMatrix::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::resize",1,"ComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::resize",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_resize",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_resize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexMatrix_resize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_resize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::resize(octave_idx_type,octave_idx_type,Complex const &)\n"
    "    ComplexMatrix::resize(octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ComplexMatrix::inverse",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ComplexMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3,arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ComplexMatrix::inverse",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3,arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::inverse",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ComplexMatrix::inverse",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("ComplexMatrix::inverse",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::inverse",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ComplexMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::inverse",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::inverse",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_inverse",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_inverse(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_inverse__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_inverse__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_inverse__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_inverse__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_inverse__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_inverse__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_inverse__SWIG_9(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_ComplexMatrix_inverse__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_ComplexMatrix_inverse__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_ComplexMatrix_inverse__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::inverse() const\n"
    "    ComplexMatrix::inverse(octave_idx_type &) const\n"
    "    ComplexMatrix::inverse(octave_idx_type &,double &,bool,bool) const\n"
    "    ComplexMatrix::inverse(octave_idx_type &,double &,bool) const\n"
    "    ComplexMatrix::inverse(octave_idx_type &,double &) const\n"
    "    ComplexMatrix::inverse(MatrixType &) const\n"
    "    ComplexMatrix::inverse(MatrixType &,octave_idx_type &) const\n"
    "    ComplexMatrix::inverse(MatrixType &,octave_idx_type &,double &,bool,bool) const\n"
    "    ComplexMatrix::inverse(MatrixType &,octave_idx_type &,double &,bool) const\n"
    "    ComplexMatrix::inverse(MatrixType &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_pseudo_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  double arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::pseudo_inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::pseudo_inverse",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::pseudo_inverse",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_pseudo_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->pseudo_inverse(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_pseudo_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::pseudo_inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::pseudo_inverse",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_pseudo_inverse",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->pseudo_inverse();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_pseudo_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_pseudo_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_pseudo_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_pseudo_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::pseudo_inverse(double) const\n"
    "    ComplexMatrix::pseudo_inverse() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_fourier(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fourier",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fourier",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->fourier();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_ifourier(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::ifourier",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_ifourier",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->ifourier();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::fourier2d",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_fourier2d",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->fourier2d();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::ifourier2d",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_ifourier2d",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->ifourier2d();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->determinant();
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::determinant",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->determinant(*arg2);
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::determinant",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("ComplexMatrix::determinant",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((ComplexMatrix const *)arg1)->determinant(*arg2,*arg3,arg4);
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::determinant",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",3,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->determinant(*arg2,*arg3);
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::determinant",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("ComplexMatrix::determinant",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((ComplexMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4,arg5);
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexDET result;
  
  SWIG_check_num_args("ComplexMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::determinant",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::determinant",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_determinant",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4);
  {
    ComplexDET * resultptr = new ComplexDET((const ComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_determinant(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_determinant__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_determinant__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_determinant__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_ComplexMatrix_determinant__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_determinant__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_ComplexMatrix_determinant__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_determinant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::determinant() const\n"
    "    ComplexMatrix::determinant(octave_idx_type &) const\n"
    "    ComplexMatrix::determinant(octave_idx_type &,double &,bool) const\n"
    "    ComplexMatrix::determinant(octave_idx_type &,double &) const\n"
    "    ComplexMatrix::determinant(MatrixType &,octave_idx_type &,double &,bool) const\n"
    "    ComplexMatrix::determinant(MatrixType &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_rcond__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  double result;
  
  SWIG_check_num_args("ComplexMatrix::rcond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::rcond",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_rcond",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = (double)((ComplexMatrix const *)arg1)->rcond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_rcond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("ComplexMatrix::rcond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::rcond",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::rcond",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_rcond",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_rcond",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (double)((ComplexMatrix const *)arg1)->rcond(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_rcond(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_rcond__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_rcond__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_rcond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::rcond() const\n"
    "    ComplexMatrix::rcond(MatrixType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_solve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ComplexMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("ComplexMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("ComplexMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix::solve_singularity_handler arg6 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((Matrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((Matrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_24(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_25(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((ComplexMatrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_26(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_27(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_28(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_29(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_30(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_31(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_32(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_33(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_34(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_35(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((ComplexMatrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_36(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_37(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_38(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_39(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_40(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("ComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve__SWIG_41(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix::solve_singularity_handler arg5 = (ComplexMatrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::solve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("ComplexMatrix::solve",5,"ComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("ComplexMatrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((ComplexMatrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_solve(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_solve__SWIG_22(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_solve__SWIG_27(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_solve__SWIG_32(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_solve__SWIG_37(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_23(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_28(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_33(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_17(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_solve__SWIG_38(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_18(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_29(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_13(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_34(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_24(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_solve__SWIG_39(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_26(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_19(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_36(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_14(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_31(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_solve__SWIG_41(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_35(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_16(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_30(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_25(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_21(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_40(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_ComplexMatrix_solve__SWIG_11(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ComplexMatrix_solve__SWIG_15(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ComplexMatrix_solve__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_ComplexMatrix_solve__SWIG_20(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_ComplexMatrix_solve__SWIG_10(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ComplexMatrix_solve__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_ComplexMatrix_solve__SWIG_9(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_solve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &) const\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,bool) const\n"
    "    ComplexMatrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,bool) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(MatrixType &,ColumnVector const &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexColumnVector const &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(Matrix const &) const\n"
    "    ComplexMatrix::solve(Matrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(Matrix const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(Matrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(Matrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(ComplexMatrix const &) const\n"
    "    ComplexMatrix::solve(ComplexMatrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(ComplexMatrix const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(ComplexMatrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(ComplexMatrix const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(ColumnVector const &) const\n"
    "    ComplexMatrix::solve(ColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(ColumnVector const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(ColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(ColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n"
    "    ComplexMatrix::solve(ComplexColumnVector const &) const\n"
    "    ComplexMatrix::solve(ComplexColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::solve(ComplexColumnVector const &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::solve(ComplexColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    ComplexMatrix::solve(ComplexColumnVector const &,octave_idx_type &,double &,ComplexMatrix::solve_singularity_handler) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((Matrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::lssolve",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("ComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("ComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("ComplexMatrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("ComplexMatrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((ComplexMatrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_lssolve(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_lssolve__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_lssolve__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_lssolve__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_lssolve__SWIG_12(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_lssolve__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_lssolve__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_lssolve__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_ComplexMatrix_lssolve__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_lssolve__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_lssolve__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_lssolve__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_ComplexMatrix_lssolve__SWIG_14(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_lssolve__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_lssolve__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_lssolve__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_ComplexMatrix_lssolve__SWIG_15(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_lssolve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::lssolve(Matrix const &) const\n"
    "    ComplexMatrix::lssolve(Matrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(Matrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(Matrix const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::lssolve(ComplexMatrix const &) const\n"
    "    ComplexMatrix::lssolve(ComplexMatrix const &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ComplexMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ComplexMatrix const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::lssolve(ColumnVector const &) const\n"
    "    ComplexMatrix::lssolve(ColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ColumnVector const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    ComplexMatrix::lssolve(ComplexColumnVector const &) const\n"
    "    ComplexMatrix::lssolve(ComplexColumnVector const &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ComplexColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    ComplexMatrix::lssolve(ComplexColumnVector const &,octave_idx_type &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::all",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_all",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->all(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::all",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_all",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->all();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::all(int) const\n"
    "    ComplexMatrix::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::any",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_any",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->any(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::any",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_any",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->any();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::any(int) const\n"
    "    ComplexMatrix::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::cumprod",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_cumprod",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->cumprod(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::cumprod",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_cumprod",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->cumprod();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::cumprod(int) const\n"
    "    ComplexMatrix::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::cumsum",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_cumsum",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->cumsum(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::cumsum",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_cumsum",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->cumsum();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::cumsum(int) const\n"
    "    ComplexMatrix::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::prod",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_prod",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->prod(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::prod",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_prod",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->prod();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::prod(int) const\n"
    "    ComplexMatrix::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::sum",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_sum",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->sum(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::sum",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_sum",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->sum();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::sum(int) const\n"
    "    ComplexMatrix::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  int arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::sumsq",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_sumsq",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->sumsq(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::sumsq",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_sumsq",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->sumsq();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::sumsq(int) const\n"
    "    ComplexMatrix::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_abs(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("ComplexMatrix::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::abs",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_abs",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->abs();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::diag",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_diag",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((ComplexMatrix const *)arg1)->diag(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::diag",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_diag",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->diag();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ComplexDiagMatrix result;
  
  SWIG_check_num_args("ComplexMatrix::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::diag",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ComplexMatrix::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_diag",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ComplexMatrix const *)arg1)->diag(arg2,arg3);
  {
    ComplexDiagMatrix * resultptr = new ComplexDiagMatrix((const ComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ComplexMatrix_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ComplexMatrix_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::diag(octave_idx_type) const\n"
    "    ComplexMatrix::diag() const\n"
    "    ComplexMatrix::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_row_is_real_only(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  bool result;
  
  SWIG_check_num_args("ComplexMatrix::row_is_real_only",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row_is_real_only",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::row_is_real_only",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row_is_real_only",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (bool)((ComplexMatrix const *)arg1)->row_is_real_only(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column_is_real_only(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  bool result;
  
  SWIG_check_num_args("ComplexMatrix::column_is_real_only",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column_is_real_only",1,"ComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ComplexMatrix::column_is_real_only",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column_is_real_only",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (bool)((ComplexMatrix const *)arg1)->column_is_real_only(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::row_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row_min",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row_min",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->row_min();
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::row_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row_max",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row_max",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->row_max();
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::row_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row_min",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::row_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row_min",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexMatrix_row_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexMatrix const *)arg1)->row_min(*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_row_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_row_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_row_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::row_min() const\n"
    "    ComplexMatrix::row_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_row_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("ComplexMatrix::row_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::row_max",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::row_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_row_max",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexMatrix_row_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexMatrix const *)arg1)->row_max(*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_row_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_row_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_row_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_row_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::row_max() const\n"
    "    ComplexMatrix::row_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_column_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexMatrix::column_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column_min",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column_min",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->column_min();
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexMatrix::column_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column_max",1,"ComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column_max",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((ComplexMatrix const *)arg1)->column_max();
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexMatrix::column_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column_min",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::column_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column_min",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexMatrix_column_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexMatrix const *)arg1)->column_min(*arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_column_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_column_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_column_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::column_min() const\n"
    "    ComplexMatrix::column_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_ComplexMatrix_column_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = (ComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("ComplexMatrix::column_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ComplexMatrix::column_max",1,"ComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ComplexMatrix::column_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("ComplexMatrix_column_max",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("ComplexMatrix_column_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((ComplexMatrix const *)arg1)->column_max(*arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ComplexMatrix_column_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ComplexMatrix_column_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ComplexMatrix_column_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ComplexMatrix_column_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ComplexMatrix::column_max() const\n"
    "    ComplexMatrix::column_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_ComplexMatrix(void *obj) {
ComplexMatrix *arg1 = (ComplexMatrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_ComplexMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ComplexMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ComplexMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ComplexMatrix_methods[]= {
    { "__eq", _wrap_ComplexMatrix___eq},
    { "ishermitian", _wrap_ComplexMatrix_ishermitian},
    { "insert", _wrap_ComplexMatrix_insert},
    { "fill", _wrap_ComplexMatrix_fill},
    { "append", _wrap_ComplexMatrix_append},
    { "stack", _wrap_ComplexMatrix_stack},
    { "hermitian", _wrap_ComplexMatrix_hermitian},
    { "transpose", _wrap_ComplexMatrix_transpose},
    { "extract", _wrap_ComplexMatrix_extract},
    { "extract_n", _wrap_ComplexMatrix_extract_n},
    { "row", _wrap_ComplexMatrix_row},
    { "column", _wrap_ComplexMatrix_column},
    { "resize", _wrap_ComplexMatrix_resize},
    { "inverse", _wrap_ComplexMatrix_inverse},
    { "pseudo_inverse", _wrap_ComplexMatrix_pseudo_inverse},
    { "fourier", _wrap_ComplexMatrix_fourier},
    { "ifourier", _wrap_ComplexMatrix_ifourier},
    { "fourier2d", _wrap_ComplexMatrix_fourier2d},
    { "ifourier2d", _wrap_ComplexMatrix_ifourier2d},
    { "determinant", _wrap_ComplexMatrix_determinant},
    { "rcond", _wrap_ComplexMatrix_rcond},
    { "solve", _wrap_ComplexMatrix_solve},
    { "lssolve", _wrap_ComplexMatrix_lssolve},
    { "all", _wrap_ComplexMatrix_all},
    { "any", _wrap_ComplexMatrix_any},
    { "cumprod", _wrap_ComplexMatrix_cumprod},
    { "cumsum", _wrap_ComplexMatrix_cumsum},
    { "prod", _wrap_ComplexMatrix_prod},
    { "sum", _wrap_ComplexMatrix_sum},
    { "sumsq", _wrap_ComplexMatrix_sumsq},
    { "abs", _wrap_ComplexMatrix_abs},
    { "diag", _wrap_ComplexMatrix_diag},
    { "row_is_real_only", _wrap_ComplexMatrix_row_is_real_only},
    { "column_is_real_only", _wrap_ComplexMatrix_column_is_real_only},
    { "row_min", _wrap_ComplexMatrix_row_min},
    { "row_max", _wrap_ComplexMatrix_row_max},
    { "column_min", _wrap_ComplexMatrix_column_min},
    { "column_max", _wrap_ComplexMatrix_column_max},
    {0,0}
};
static swig_lua_method swig_ComplexMatrix_meta[] = {
    { "__eq", _wrap_ComplexMatrix___eq},
    {0,0}
};

static swig_lua_attribute swig_ComplexMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ComplexMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ComplexMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ComplexMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ComplexMatrix_Sf_SwigStatic = {
    "ComplexMatrix",
    swig_ComplexMatrix_Sf_SwigStatic_methods,
    swig_ComplexMatrix_Sf_SwigStatic_attributes,
    swig_ComplexMatrix_Sf_SwigStatic_constants,
    swig_ComplexMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ComplexMatrix_bases[] = {0,0};
static const char *swig_ComplexMatrix_base_names[] = {"ComplexNDArray *",0};
static swig_lua_class _wrap_class_ComplexMatrix = { "ComplexMatrix", "ComplexMatrix", &SWIGTYPE_p_ComplexMatrix,_proxy__wrap_new_ComplexMatrix, swig_delete_ComplexMatrix, swig_ComplexMatrix_methods, swig_ComplexMatrix_attributes, &swig_ComplexMatrix_Sf_SwigStatic, swig_ComplexMatrix_meta, swig_ComplexMatrix_bases, swig_ComplexMatrix_base_names };

static int _wrap_new_NDArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",0,0)
  result = (NDArray *)new NDArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (NDArray *)new NDArray((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  double arg2 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"dim_vector const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::NDArray",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (NDArray *)new NDArray((dim_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_NDArray);
  }
  
  result = (NDArray *)new NDArray((NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"Array< octave_idx_type > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NDArray::NDArray",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("NDArray::NDArray",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (NDArray *)new NDArray((Array< octave_idx_type > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  bool arg2 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"Array< octave_idx_type > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NDArray::NDArray",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (NDArray *)new NDArray((Array< octave_idx_type > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (NDArray *)new NDArray((Array< octave_idx_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::NDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::NDArray",1,"charNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_NDArray",1,SWIGTYPE_p_charNDArray);
  }
  
  result = (NDArray *)new NDArray((charNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NDArray(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NDArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NDArray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NDArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NDArray__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NDArray__SWIG_10(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NDArray__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NDArray__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_NDArray__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NDArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::NDArray()\n"
    "    NDArray::NDArray(dim_vector const &)\n"
    "    NDArray::NDArray(dim_vector const &,double)\n"
    "    NDArray::NDArray(NDArray const &)\n"
    "    NDArray::NDArray(Array< octave_idx_type > const &,bool,bool)\n"
    "    NDArray::NDArray(Array< octave_idx_type > const &,bool)\n"
    "    NDArray::NDArray(Array< octave_idx_type > const &)\n"
    "    NDArray::NDArray(charNDArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_any_element_is_negative__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_negative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_negative",1,"NDArray const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NDArray::any_element_is_negative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_negative",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((NDArray const *)arg1)->any_element_is_negative(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_is_negative__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_negative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_negative",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_negative",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->any_element_is_negative();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_is_negative(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_any_element_is_negative__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_any_element_is_negative__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_any_element_is_negative'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::any_element_is_negative(bool) const\n"
    "    NDArray::any_element_is_negative() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_any_element_is_positive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_positive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_positive",1,"NDArray const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("NDArray::any_element_is_positive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_positive",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((NDArray const *)arg1)->any_element_is_positive(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_is_positive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_positive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_positive",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_positive",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->any_element_is_positive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_is_positive(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_any_element_is_positive__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_any_element_is_positive__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_any_element_is_positive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::any_element_is_positive(bool) const\n"
    "    NDArray::any_element_is_positive() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_any_element_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_nan",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_nan",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->any_element_is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_is_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_is_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_is_inf_or_nan",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_is_inf_or_nan",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->any_element_is_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any_element_not_one_or_zero(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::any_element_not_one_or_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any_element_not_one_or_zero",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any_element_not_one_or_zero",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->any_element_not_one_or_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all_elements_are_zero(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::all_elements_are_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all_elements_are_zero",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all_elements_are_zero",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->all_elements_are_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all_elements_are_int_or_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::all_elements_are_int_or_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all_elements_are_int_or_inf_or_nan",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all_elements_are_int_or_inf_or_nan",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->all_elements_are_int_or_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all_integers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::all_integers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all_integers",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::all_integers",2,"double &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NDArray::all_integers",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all_integers",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NDArray_all_integers",2,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("NDArray_all_integers",3,SWIGTYPE_p_double);
  }
  
  result = (bool)((NDArray const *)arg1)->all_integers(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all_integers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::all_integers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all_integers",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all_integers",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->all_integers();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all_integers(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_all_integers__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NDArray_all_integers__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_all_integers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::all_integers(double &,double &) const\n"
    "    NDArray::all_integers() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_too_large_for_float(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("NDArray::too_large_for_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::too_large_for_float",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_too_large_for_float",1,SWIGTYPE_p_NDArray);
  }
  
  result = (bool)((NDArray const *)arg1)->too_large_for_float();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->all(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::all",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_all",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->all();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::all(int) const\n"
    "    NDArray::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->any(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::any",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_any",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->any();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::any(int) const\n"
    "    NDArray::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cumprod",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cumprod",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->cumprod(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cumprod",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cumprod",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->cumprod();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::cumprod(int) const\n"
    "    NDArray::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cumsum",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cumsum",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->cumsum(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cumsum",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cumsum",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->cumsum();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::cumsum(int) const\n"
    "    NDArray::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::prod",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_prod",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->prod(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::prod",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_prod",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->prod();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::prod(int) const\n"
    "    NDArray::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::sum",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_sum",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->sum(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::sum",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_sum",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->sum();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::sum(int) const\n"
    "    NDArray::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_xsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::xsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::xsum",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::xsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_xsum",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->xsum(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_xsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::xsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::xsum",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_xsum",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->xsum();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_xsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_xsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_xsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_xsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::xsum(int) const\n"
    "    NDArray::xsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::sumsq",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_sumsq",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->sumsq(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::sumsq",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_sumsq",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->sumsq();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::sumsq(int) const\n"
    "    NDArray::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_concat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::concat",1,"NDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::concat",2,"NDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_concat",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_concat",2,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((NDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_concat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::concat",1,"NDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::concat",2,"ComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_concat",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("NDArray_concat",2,SWIGTYPE_p_ComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((ComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_concat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  charNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  charNDArray result;
  
  SWIG_check_num_args("NDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::concat",1,"NDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::concat",2,"charNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_concat",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("NDArray_concat",2,SWIGTYPE_p_charNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((charNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    charNDArray * resultptr = new charNDArray((const charNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_concat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NDArray_concat__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NDArray_concat__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NDArray_concat__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_concat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::concat(NDArray const &,Array< octave_idx_type > const &)\n"
    "    NDArray::concat(ComplexNDArray const &,Array< octave_idx_type > const &)\n"
    "    NDArray::concat(charNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::max",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::max",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_max",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->max(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::max",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_max",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->max();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::max",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::max",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::max",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_max",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->max(*arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::max",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_max",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((NDArray const *)arg1)->max(*arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_max(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_max__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NDArray_max__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_max__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_max__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::max(int) const\n"
    "    NDArray::max() const\n"
    "    NDArray::max(Array< octave_idx_type > &,int) const\n"
    "    NDArray::max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::min",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::min",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_min",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->min(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::min",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_min",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->min();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::min",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::min",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::min",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::min",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_min",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->min(*arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::min",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_min",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((NDArray const *)arg1)->min(*arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_min(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_min__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NDArray_min__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_min__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_min__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::min(int) const\n"
    "    NDArray::min() const\n"
    "    NDArray::min(Array< octave_idx_type > &,int) const\n"
    "    NDArray::min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_cummax__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummax",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::cummax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummax",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->cummax(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummax__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummax",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummax",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->cummax();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummax",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::cummax",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::cummax",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummax",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->cummax(*arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummax",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::cummax",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummax",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((NDArray const *)arg1)->cummax(*arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummax(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_cummax__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NDArray_cummax__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_cummax__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_cummax__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_cummax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::cummax(int) const\n"
    "    NDArray::cummax() const\n"
    "    NDArray::cummax(Array< octave_idx_type > &,int) const\n"
    "    NDArray::cummax(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_cummin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummin",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::cummin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummin",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->cummin(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummin",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummin",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->cummin();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummin",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::cummin",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::cummin",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummin",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->cummin(*arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::cummin",1,"NDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::cummin",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_cummin",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((NDArray const *)arg1)->cummin(*arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_cummin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_cummin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NDArray_cummin__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_cummin__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_cummin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_cummin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::cummin(int) const\n"
    "    NDArray::cummin() const\n"
    "    NDArray::cummin(Array< octave_idx_type > &,int) const\n"
    "    NDArray::cummin(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_diff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  octave_idx_type arg2 ;
  int arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diff",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::diff",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::diff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diff",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->diff(arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  octave_idx_type arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diff",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::diff",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diff",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->diff(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diff__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diff",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diff",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->diff();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_diff__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_diff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_diff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_diff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::diff(octave_idx_type,int) const\n"
    "    NDArray::diff(octave_idx_type) const\n"
    "    NDArray::diff() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::insert",1,"NDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::insert",2,"NDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("NDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_insert",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_insert",2,SWIGTYPE_p_NDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (NDArray *) &(arg1)->insert((NDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::insert",1,"NDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::insert",2,"NDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("NDArray::insert",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_insert",1,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_insert",2,SWIGTYPE_p_NDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_insert",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (NDArray *) &(arg1)->insert((NDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NDArray_insert__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NDArray_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::insert(NDArray const &,octave_idx_type,octave_idx_type)\n"
    "    NDArray::insert(NDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_abs(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::abs",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_abs",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->abs();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_isnan(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::isnan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::isnan",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_isnan",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->isnan();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_isinf(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::isinf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::isinf",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_isinf",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->isinf();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("NDArray::isfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::isfinite",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_isfinite",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->isfinite();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_fourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::fourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::fourier",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::fourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_fourier",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->fourier(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_fourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::fourier",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_fourier",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->fourier();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_fourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_fourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_fourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_fourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::fourier(int) const\n"
    "    NDArray::fourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_ifourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::ifourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::ifourier",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::ifourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_ifourier",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->ifourier(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_ifourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::ifourier",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_ifourier",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->ifourier();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_ifourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_ifourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_ifourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_ifourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::ifourier(int) const\n"
    "    NDArray::ifourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::fourier2d",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_fourier2d",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->fourier2d();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::ifourier2d",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_ifourier2d",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->ifourier2d();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_fourierNd(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::fourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::fourierNd",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_fourierNd",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->fourierNd();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_ifourierNd(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("NDArray::ifourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::ifourierNd",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_ifourierNd",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->ifourierNd();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::squeeze",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_squeeze",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->squeeze();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_increment_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("NDArray::increment_index",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::increment_index",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::increment_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("NDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  NDArray::increment_index(*arg1,(dim_vector const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_increment_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  
  SWIG_check_num_args("NDArray::increment_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::increment_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("NDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  NDArray::increment_index(*arg1,(dim_vector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_increment_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NDArray_increment_index__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_increment_index__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_increment_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::increment_index(Array< octave_idx_type > &,dim_vector const &,int)\n"
    "    NDArray::increment_index(Array< octave_idx_type > &,dim_vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_compute_index(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("NDArray::compute_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("NDArray::compute_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("NDArray::compute_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("NDArray_compute_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("NDArray_compute_index",2,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)NDArray::compute_index(*arg1,(dim_vector const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  octave_idx_type arg2 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diag",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diag",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((NDArray const *)arg1)->diag(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diag",1,"NDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diag",1,SWIGTYPE_p_NDArray);
  }
  
  result = ((NDArray const *)arg1)->diag();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  NDArray result;
  
  SWIG_check_num_args("NDArray::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::diag",1,"NDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("NDArray::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("NDArray::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_diag",1,SWIGTYPE_p_NDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((NDArray const *)arg1)->diag(arg2,arg3);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NDArray_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NDArray_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NDArray_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_NDArray_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NDArray_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    NDArray::diag(octave_idx_type) const\n"
    "    NDArray::diag() const\n"
    "    NDArray::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_NDArray_changesign(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = (NDArray *) 0 ;
  NDArray *result = 0 ;
  
  SWIG_check_num_args("NDArray::changesign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("NDArray::changesign",1,"NDArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("NDArray_changesign",1,SWIGTYPE_p_NDArray);
  }
  
  result = (NDArray *) &(arg1)->changesign();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_NDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NDArray(void *obj) {
NDArray *arg1 = (NDArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_NDArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NDArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NDArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NDArray_methods[]= {
    { "any_element_is_negative", _wrap_NDArray_any_element_is_negative},
    { "any_element_is_positive", _wrap_NDArray_any_element_is_positive},
    { "any_element_is_nan", _wrap_NDArray_any_element_is_nan},
    { "any_element_is_inf_or_nan", _wrap_NDArray_any_element_is_inf_or_nan},
    { "any_element_not_one_or_zero", _wrap_NDArray_any_element_not_one_or_zero},
    { "all_elements_are_zero", _wrap_NDArray_all_elements_are_zero},
    { "all_elements_are_int_or_inf_or_nan", _wrap_NDArray_all_elements_are_int_or_inf_or_nan},
    { "all_integers", _wrap_NDArray_all_integers},
    { "too_large_for_float", _wrap_NDArray_too_large_for_float},
    { "all", _wrap_NDArray_all},
    { "any", _wrap_NDArray_any},
    { "cumprod", _wrap_NDArray_cumprod},
    { "cumsum", _wrap_NDArray_cumsum},
    { "prod", _wrap_NDArray_prod},
    { "sum", _wrap_NDArray_sum},
    { "xsum", _wrap_NDArray_xsum},
    { "sumsq", _wrap_NDArray_sumsq},
    { "concat", _wrap_NDArray_concat},
    { "max", _wrap_NDArray_max},
    { "min", _wrap_NDArray_min},
    { "cummax", _wrap_NDArray_cummax},
    { "cummin", _wrap_NDArray_cummin},
    { "diff", _wrap_NDArray_diff},
    { "insert", _wrap_NDArray_insert},
    { "abs", _wrap_NDArray_abs},
    { "isnan", _wrap_NDArray_isnan},
    { "isinf", _wrap_NDArray_isinf},
    { "isfinite", _wrap_NDArray_isfinite},
    { "fourier", _wrap_NDArray_fourier},
    { "ifourier", _wrap_NDArray_ifourier},
    { "fourier2d", _wrap_NDArray_fourier2d},
    { "ifourier2d", _wrap_NDArray_ifourier2d},
    { "fourierNd", _wrap_NDArray_fourierNd},
    { "ifourierNd", _wrap_NDArray_ifourierNd},
    { "squeeze", _wrap_NDArray_squeeze},
    { "diag", _wrap_NDArray_diag},
    { "changesign", _wrap_NDArray_changesign},
    {0,0}
};
static swig_lua_method swig_NDArray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NDArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NDArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NDArray_Sf_SwigStatic_methods[]= {
    { "increment_index", _wrap_NDArray_increment_index},
    { "compute_index", _wrap_NDArray_compute_index},
    {0,0}
};
static swig_lua_class* swig_NDArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NDArray_Sf_SwigStatic = {
    "NDArray",
    swig_NDArray_Sf_SwigStatic_methods,
    swig_NDArray_Sf_SwigStatic_attributes,
    swig_NDArray_Sf_SwigStatic_constants,
    swig_NDArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NDArray_bases[] = {0};
static const char *swig_NDArray_base_names[] = {0};
static swig_lua_class _wrap_class_NDArray = { "NDArray", "NDArray", &SWIGTYPE_p_NDArray,_proxy__wrap_new_NDArray, swig_delete_NDArray, swig_NDArray_methods, swig_NDArray_attributes, &swig_NDArray_Sf_SwigStatic, swig_NDArray_meta, swig_NDArray_bases, swig_NDArray_base_names };

static int _wrap_new_RowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",0,0)
  result = (RowVector *)new RowVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (RowVector *)new RowVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_RowVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (RowVector *)new RowVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  double arg2 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::RowVector",2,"double");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (RowVector *)new RowVector(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_RowVector",1,SWIGTYPE_p_RowVector);
  }
  
  result = (RowVector *)new RowVector((RowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< double > *arg1 = 0 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"MArray< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_double_t,0))){
    SWIG_fail_ptr("new_RowVector",1,SWIGTYPE_p_MArrayT_double_t);
  }
  
  result = (RowVector *)new RowVector((MArray< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = 0 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::RowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("RowVector::RowVector",1,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("new_RowVector",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (RowVector *)new RowVector((Array< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_RowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RowVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RowVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_RowVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_RowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_RowVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RowVector::RowVector()\n"
    "    RowVector::RowVector(octave_idx_type)\n"
    "    RowVector::RowVector(dim_vector const &)\n"
    "    RowVector::RowVector(octave_idx_type,double)\n"
    "    RowVector::RowVector(RowVector const &)\n"
    "    RowVector::RowVector(MArray< double > const &)\n"
    "    RowVector::RowVector(Array< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RowVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  RowVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("RowVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::operator ==",1,"RowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RowVector::operator ==",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector___eq",1,SWIGTYPE_p_RowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector___eq",2,SWIGTYPE_p_RowVector);
  }
  
  result = (bool)((RowVector const *)arg1)->operator ==((RowVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_insert(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  RowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::insert",1,"RowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RowVector::insert",2,"RowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_insert",1,SWIGTYPE_p_RowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_insert",2,SWIGTYPE_p_RowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (RowVector *) &(arg1)->insert((RowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  double arg2 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::fill",1,"RowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_fill",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (RowVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  RowVector *result = 0 ;
  
  SWIG_check_num_args("RowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::fill",1,"RowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("RowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_fill",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (RowVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_RowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RowVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_RowVector_fill__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RowVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RowVector::fill(double)\n"
    "    RowVector::fill(double,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_RowVector_append(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  RowVector *arg2 = 0 ;
  RowVector result;
  
  SWIG_check_num_args("RowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::append",1,"RowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("RowVector::append",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_append",1,SWIGTYPE_p_RowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_append",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((RowVector const *)arg1)->append((RowVector const &)*arg2);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("RowVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::transpose",1,"RowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_transpose",1,SWIGTYPE_p_RowVector);
  }
  
  result = ((RowVector const *)arg1)->transpose();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  RowVector result;
  
  SWIG_check_num_args("RowVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::extract",1,"RowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RowVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_extract",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((RowVector const *)arg1)->extract(arg2,arg3);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  RowVector result;
  
  SWIG_check_num_args("RowVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::extract_n",1,"RowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RowVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_extract_n",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((RowVector const *)arg1)->extract_n(arg2,arg3);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_min(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  double result;
  
  SWIG_check_num_args("RowVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::min",1,"RowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_min",1,SWIGTYPE_p_RowVector);
  }
  
  result = (double)((RowVector const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_max(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  double result;
  
  SWIG_check_num_args("RowVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::max",1,"RowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_max",1,SWIGTYPE_p_RowVector);
  }
  
  result = (double)((RowVector const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  octave_idx_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("RowVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::resize",1,"RowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("RowVector::resize",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_resize",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->resize(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("RowVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::resize",1,"RowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_resize",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RowVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_RowVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RowVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RowVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    RowVector::resize(octave_idx_type,double const &)\n"
    "    RowVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_RowVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = (RowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("RowVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("RowVector::clear",1,"RowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("RowVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("RowVector_clear",1,SWIGTYPE_p_RowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RowVector(void *obj) {
RowVector *arg1 = (RowVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_RowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RowVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RowVector_methods[]= {
    { "__eq", _wrap_RowVector___eq},
    { "insert", _wrap_RowVector_insert},
    { "fill", _wrap_RowVector_fill},
    { "append", _wrap_RowVector_append},
    { "transpose", _wrap_RowVector_transpose},
    { "extract", _wrap_RowVector_extract},
    { "extract_n", _wrap_RowVector_extract_n},
    { "min", _wrap_RowVector_min},
    { "max", _wrap_RowVector_max},
    { "resize", _wrap_RowVector_resize},
    { "clear", _wrap_RowVector_clear},
    {0,0}
};
static swig_lua_method swig_RowVector_meta[] = {
    { "__eq", _wrap_RowVector___eq},
    {0,0}
};

static swig_lua_attribute swig_RowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RowVector_Sf_SwigStatic = {
    "RowVector",
    swig_RowVector_Sf_SwigStatic_methods,
    swig_RowVector_Sf_SwigStatic_attributes,
    swig_RowVector_Sf_SwigStatic_constants,
    swig_RowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RowVector_bases[] = {0};
static const char *swig_RowVector_base_names[] = {0};
static swig_lua_class _wrap_class_RowVector = { "RowVector", "RowVector", &SWIGTYPE_p_RowVector,_proxy__wrap_new_RowVector, swig_delete_RowVector, swig_RowVector_methods, swig_RowVector_attributes, &swig_RowVector_Sf_SwigStatic, swig_RowVector_meta, swig_RowVector_bases, swig_RowVector_base_names };

static int _wrap_new_ColumnVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",0,0)
  result = (ColumnVector *)new ColumnVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (ColumnVector *)new ColumnVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_ColumnVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (ColumnVector *)new ColumnVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  double arg2 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::ColumnVector",2,"double");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  result = (ColumnVector *)new ColumnVector(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_ColumnVector",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (ColumnVector *)new ColumnVector((ColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< double > *arg1 = 0 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"MArray< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_double_t,0))){
    SWIG_fail_ptr("new_ColumnVector",1,SWIGTYPE_p_MArrayT_double_t);
  }
  
  result = (ColumnVector *)new ColumnVector((MArray< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = 0 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::ColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("ColumnVector::ColumnVector",1,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("new_ColumnVector",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (ColumnVector *)new ColumnVector((Array< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColumnVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ColumnVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColumnVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColumnVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColumnVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColumnVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ColumnVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ColumnVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ColumnVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ColumnVector::ColumnVector()\n"
    "    ColumnVector::ColumnVector(octave_idx_type)\n"
    "    ColumnVector::ColumnVector(dim_vector const &)\n"
    "    ColumnVector::ColumnVector(octave_idx_type,double)\n"
    "    ColumnVector::ColumnVector(ColumnVector const &)\n"
    "    ColumnVector::ColumnVector(MArray< double > const &)\n"
    "    ColumnVector::ColumnVector(Array< double > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ColumnVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  ColumnVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("ColumnVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::operator ==",1,"ColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ColumnVector::operator ==",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector___eq",1,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector___eq",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = (bool)((ColumnVector const *)arg1)->operator ==((ColumnVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_insert(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::insert",1,"ColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ColumnVector::insert",2,"ColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_insert",1,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_insert",2,SWIGTYPE_p_ColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (ColumnVector *) &(arg1)->insert((ColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  double arg2 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::fill",1,"ColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_fill",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (ColumnVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  ColumnVector *result = 0 ;
  
  SWIG_check_num_args("ColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::fill",1,"ColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("ColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_fill",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (ColumnVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_ColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ColumnVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_ColumnVector_fill__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColumnVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ColumnVector::fill(double)\n"
    "    ColumnVector::fill(double,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ColumnVector_stack(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  ColumnVector *arg2 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("ColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::stack",1,"ColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("ColumnVector::stack",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_stack",1,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_stack",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ColumnVector const *)arg1)->stack((ColumnVector const &)*arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  RowVector result;
  
  SWIG_check_num_args("ColumnVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::transpose",1,"ColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_transpose",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ColumnVector const *)arg1)->transpose();
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_real__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("real",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("real",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("real",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = real((ComplexColumnVector const &)*arg1);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("imag",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("imag",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("imag",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = imag((ComplexColumnVector const &)*arg1);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ColumnVector result;
  
  SWIG_check_num_args("ColumnVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::extract",1,"ColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ColumnVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_extract",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ColumnVector const *)arg1)->extract(arg2,arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  ColumnVector result;
  
  SWIG_check_num_args("ColumnVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::extract_n",1,"ColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ColumnVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_extract_n",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((ColumnVector const *)arg1)->extract_n(arg2,arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_min(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  double result;
  
  SWIG_check_num_args("ColumnVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::min",1,"ColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_min",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (double)((ColumnVector const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_max(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  double result;
  
  SWIG_check_num_args("ColumnVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::max",1,"ColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_max",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (double)((ColumnVector const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("ColumnVector::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::abs",1,"ColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_abs",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((ColumnVector const *)arg1)->abs();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  octave_idx_type arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  SWIG_check_num_args("ColumnVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::resize",1,"ColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("ColumnVector::resize",3,"double const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_resize",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  temp3=(double)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->resize(arg2,(double const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ColumnVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::resize",1,"ColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_resize",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColumnVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ColumnVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_ColumnVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColumnVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    ColumnVector::resize(octave_idx_type,double const &)\n"
    "    ColumnVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_ColumnVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = (ColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("ColumnVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ColumnVector::clear",1,"ColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ColumnVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("ColumnVector_clear",1,SWIGTYPE_p_ColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ColumnVector(void *obj) {
ColumnVector *arg1 = (ColumnVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_ColumnVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ColumnVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ColumnVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ColumnVector_methods[]= {
    { "__eq", _wrap_ColumnVector___eq},
    { "insert", _wrap_ColumnVector_insert},
    { "fill", _wrap_ColumnVector_fill},
    { "stack", _wrap_ColumnVector_stack},
    { "transpose", _wrap_ColumnVector_transpose},
    { "extract", _wrap_ColumnVector_extract},
    { "extract_n", _wrap_ColumnVector_extract_n},
    { "min", _wrap_ColumnVector_min},
    { "max", _wrap_ColumnVector_max},
    { "abs", _wrap_ColumnVector_abs},
    { "resize", _wrap_ColumnVector_resize},
    { "clear", _wrap_ColumnVector_clear},
    {0,0}
};
static swig_lua_method swig_ColumnVector_meta[] = {
    { "__eq", _wrap_ColumnVector___eq},
    {0,0}
};

static swig_lua_attribute swig_ColumnVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ColumnVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ColumnVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ColumnVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ColumnVector_Sf_SwigStatic = {
    "ColumnVector",
    swig_ColumnVector_Sf_SwigStatic_methods,
    swig_ColumnVector_Sf_SwigStatic_attributes,
    swig_ColumnVector_Sf_SwigStatic_constants,
    swig_ColumnVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ColumnVector_bases[] = {0};
static const char *swig_ColumnVector_base_names[] = {0};
static swig_lua_class _wrap_class_ColumnVector = { "ColumnVector", "ColumnVector", &SWIGTYPE_p_ColumnVector,_proxy__wrap_new_ColumnVector, swig_delete_ColumnVector, swig_ColumnVector_methods, swig_ColumnVector_attributes, &swig_ColumnVector_Sf_SwigStatic, swig_ColumnVector_meta, swig_ColumnVector_bases, swig_ColumnVector_base_names };

static int _wrap_new_Matrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",0,0)
  result = (Matrix *)new Matrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_Matrix);
  }
  
  result = (Matrix *)new Matrix((Matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::Matrix",2,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (Matrix *)new Matrix(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  double arg3 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::Matrix",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::Matrix",3,"double");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (Matrix *)new Matrix(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (Matrix *)new Matrix((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  double arg2 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"dim_vector const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::Matrix",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Matrix *)new Matrix((dim_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_RowVector);
  }
  
  result = (Matrix *)new Matrix((RowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (Matrix *)new Matrix((ColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  DiagMatrix *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_DiagMatrix);
  }
  
  result = (Matrix *)new Matrix((DiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< double > *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"MDiagArray2< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_double_t,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_MDiagArray2T_double_t);
  }
  
  result = (Matrix *)new Matrix((MDiagArray2< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< double > *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"DiagArray2< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_double_t,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_DiagArray2T_double_t);
  }
  
  result = (Matrix *)new Matrix((DiagArray2< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  PermMatrix *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"PermMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PermMatrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_PermMatrix);
  }
  
  result = (Matrix *)new Matrix((PermMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"boolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_boolMatrix);
  }
  
  result = (Matrix *)new Matrix((boolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::Matrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Matrix::Matrix",1,"charMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_Matrix",1,SWIGTYPE_p_charMatrix);
  }
  
  result = (Matrix *)new Matrix((charMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Matrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Matrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PermMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Matrix__SWIG_13(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Matrix__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Matrix__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Matrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::Matrix()\n"
    "    Matrix::Matrix(Matrix const &)\n"
    "    Matrix::Matrix(octave_idx_type,octave_idx_type)\n"
    "    Matrix::Matrix(octave_idx_type,octave_idx_type,double)\n"
    "    Matrix::Matrix(dim_vector const &)\n"
    "    Matrix::Matrix(dim_vector const &,double)\n"
    "    Matrix::Matrix(RowVector const &)\n"
    "    Matrix::Matrix(ColumnVector const &)\n"
    "    Matrix::Matrix(DiagMatrix const &)\n"
    "    Matrix::Matrix(MDiagArray2< double > const &)\n"
    "    Matrix::Matrix(DiagArray2< double > const &)\n"
    "    Matrix::Matrix(PermMatrix const &)\n"
    "    Matrix::Matrix(boolMatrix const &)\n"
    "    Matrix::Matrix(charMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::operator ==",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::operator ==",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix___eq",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix___eq",2,SWIGTYPE_p_Matrix);
  }
  
  result = (bool)((Matrix const *)arg1)->operator ==((Matrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_issymmetric(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("Matrix::issymmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::issymmetric",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_issymmetric",1,SWIGTYPE_p_Matrix);
  }
  
  result = (bool)((Matrix const *)arg1)->issymmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::insert",1,"Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::insert",2,"Matrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_insert",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_insert",2,SWIGTYPE_p_Matrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (Matrix *) &(arg1)->insert((Matrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  RowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::insert",1,"Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::insert",2,"RowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_insert",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("Matrix_insert",2,SWIGTYPE_p_RowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (Matrix *) &(arg1)->insert((RowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::insert",1,"Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::insert",2,"ColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_insert",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_insert",2,SWIGTYPE_p_ColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (Matrix *) &(arg1)->insert((ColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_insert__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::insert",1,"Matrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::insert",2,"DiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_insert",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("Matrix_insert",2,SWIGTYPE_p_DiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (Matrix *) &(arg1)->insert((DiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_insert__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_insert__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::insert(Matrix const &,octave_idx_type,octave_idx_type)\n"
    "    Matrix::insert(RowVector const &,octave_idx_type,octave_idx_type)\n"
    "    Matrix::insert(ColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    Matrix::insert(DiagMatrix const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  double arg2 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::fill",1,"Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::fill",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_fill",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (Matrix *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  double arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  Matrix *result = 0 ;
  
  SWIG_check_num_args("Matrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::fill",1,"Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::fill",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Matrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Matrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_fill",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (Matrix *) &(arg1)->fill(arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Matrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_fill(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Matrix_fill__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::fill(double)\n"
    "    Matrix::fill(double,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::append",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::append",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_append",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_append",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->append((Matrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  RowVector *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::append",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::append",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_append",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("Matrix_append",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((Matrix const *)arg1)->append((RowVector const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_append__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::append",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::append",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_append",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_append",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((Matrix const *)arg1)->append((ColumnVector const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_append__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::append",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::append",2,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_append",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("Matrix_append",2,SWIGTYPE_p_DiagMatrix);
  }
  
  result = ((Matrix const *)arg1)->append((DiagMatrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_append__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_append__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_append__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::append(Matrix const &) const\n"
    "    Matrix::append(RowVector const &) const\n"
    "    Matrix::append(ColumnVector const &) const\n"
    "    Matrix::append(DiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::stack",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::stack",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_stack",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_stack",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->stack((Matrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  RowVector *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::stack",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::stack",2,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_stack",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("Matrix_stack",2,SWIGTYPE_p_RowVector);
  }
  
  result = ((Matrix const *)arg1)->stack((RowVector const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_stack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::stack",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::stack",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_stack",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_stack",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((Matrix const *)arg1)->stack((ColumnVector const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_stack__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  DiagMatrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::stack",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::stack",2,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_stack",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("Matrix_stack",2,SWIGTYPE_p_DiagMatrix);
  }
  
  result = ((Matrix const *)arg1)->stack((DiagMatrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_stack__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_stack__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_stack__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::stack(Matrix const &) const\n"
    "    Matrix::stack(RowVector const &) const\n"
    "    Matrix::stack(ColumnVector const &) const\n"
    "    Matrix::stack(DiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::hermitian",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_hermitian",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->hermitian();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::transpose",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_transpose",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->transpose();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_extract(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::extract",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::extract",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::extract",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::extract",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Matrix::extract",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_extract",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((Matrix const *)arg1)->extract(arg2,arg3,arg4,arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::extract_n",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::extract_n",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::extract_n",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::extract_n",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Matrix::extract_n",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_extract_n",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((Matrix const *)arg1)->extract_n(arg2,arg3,arg4,arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_row(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  RowVector result;
  
  SWIG_check_num_args("Matrix::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::row",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::row",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_row",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->row(arg2);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_column(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::column",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::column",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::column",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_column",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->column(arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  double arg4 ;
  
  SWIG_check_num_args("Matrix::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::resize",1,"Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::resize",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Matrix::resize",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_resize",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  (arg1)->resize(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  
  SWIG_check_num_args("Matrix::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::resize",1,"Matrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::resize",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_resize",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_resize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_resize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_resize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::resize(octave_idx_type,octave_idx_type,double)\n"
    "    Matrix::resize(octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->inverse();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->inverse(*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Matrix::inverse",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Matrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3,arg4,arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Matrix::inverse",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3,arg4);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  result = ((Matrix const *)arg1)->inverse(*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::inverse",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Matrix::inverse",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("Matrix::inverse",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5,arg6);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::inverse",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Matrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::inverse",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::inverse",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_inverse",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->inverse(*arg2,*arg3,*arg4);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_inverse(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_inverse__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_inverse__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_inverse__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_inverse__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_inverse__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_inverse__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_inverse__SWIG_9(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Matrix_inverse__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Matrix_inverse__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_Matrix_inverse__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::inverse() const\n"
    "    Matrix::inverse(octave_idx_type &) const\n"
    "    Matrix::inverse(octave_idx_type &,double &,bool,bool) const\n"
    "    Matrix::inverse(octave_idx_type &,double &,bool) const\n"
    "    Matrix::inverse(octave_idx_type &,double &) const\n"
    "    Matrix::inverse(MatrixType &) const\n"
    "    Matrix::inverse(MatrixType &,octave_idx_type &) const\n"
    "    Matrix::inverse(MatrixType &,octave_idx_type &,double &,bool,bool) const\n"
    "    Matrix::inverse(MatrixType &,octave_idx_type &,double &,bool) const\n"
    "    Matrix::inverse(MatrixType &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_pseudo_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  double arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::pseudo_inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::pseudo_inverse",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::pseudo_inverse",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_pseudo_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->pseudo_inverse(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_pseudo_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::pseudo_inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::pseudo_inverse",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_pseudo_inverse",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->pseudo_inverse();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_pseudo_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_pseudo_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_pseudo_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_pseudo_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::pseudo_inverse(double) const\n"
    "    Matrix::pseudo_inverse() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_fourier(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::fourier",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_fourier",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->fourier();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_ifourier(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::ifourier",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_ifourier",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->ifourier();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::fourier2d",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_fourier2d",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->fourier2d();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::ifourier2d",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_ifourier2d",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->ifourier2d();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->determinant();
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::determinant",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_determinant",2,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->determinant(*arg2);
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  bool arg4 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::determinant",3,"double &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Matrix::determinant",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_determinant",3,SWIGTYPE_p_double);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((Matrix const *)arg1)->determinant(*arg2,*arg3,arg4);
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  double *arg3 = 0 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::determinant",3,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_determinant",3,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->determinant(*arg2,*arg3);
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  bool arg5 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::determinant",4,"double &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("Matrix::determinant",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_determinant",4,SWIGTYPE_p_double);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((Matrix const *)arg1)->determinant(*arg2,*arg3,*arg4,arg5);
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  DET result;
  
  SWIG_check_num_args("Matrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::determinant",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::determinant",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_determinant",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_determinant",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->determinant(*arg2,*arg3,*arg4);
  {
    DET * resultptr = new DET((const DET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_determinant(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_determinant__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_determinant__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_determinant__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Matrix_determinant__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_determinant__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_Matrix_determinant__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_determinant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::determinant() const\n"
    "    Matrix::determinant(octave_idx_type &) const\n"
    "    Matrix::determinant(octave_idx_type &,double &,bool) const\n"
    "    Matrix::determinant(octave_idx_type &,double &) const\n"
    "    Matrix::determinant(MatrixType &,octave_idx_type &,double &,bool) const\n"
    "    Matrix::determinant(MatrixType &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_rcond__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  double result;
  
  SWIG_check_num_args("Matrix::rcond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::rcond",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_rcond",1,SWIGTYPE_p_Matrix);
  }
  
  result = (double)((Matrix const *)arg1)->rcond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_rcond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("Matrix::rcond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::rcond",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::rcond",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_rcond",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_rcond",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (double)((Matrix const *)arg1)->rcond(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_rcond(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_rcond__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_rcond__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_rcond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::rcond() const\n"
    "    Matrix::rcond(MatrixType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_solve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Matrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Matrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Matrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  Matrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"Matrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(Matrix const &)*arg3,*arg4,*arg5,arg6);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Matrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("Matrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("Matrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Matrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("Matrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  MatrixType *arg2 = 0 ;
  ComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix::solve_singularity_handler arg6 = (Matrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::solve",5,"double &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("Matrix::solve",6,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve(*arg2,(ComplexColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->solve((Matrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve((Matrix const &)*arg2,*arg3);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_24(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_25(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Matrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((Matrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_26(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve((Matrix const &)*arg2,*arg3,*arg4,arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_27(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_28(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_29(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_30(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Matrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((Matrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_31(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_32(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((Matrix const *)arg1)->solve((ColumnVector const &)*arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_33(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_34(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_35(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Matrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((Matrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_36(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve((ColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_37(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_38(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_39(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_40(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("Matrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("Matrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((Matrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve__SWIG_41(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  double *arg4 = 0 ;
  Matrix::solve_singularity_handler arg5 = (Matrix::solve_singularity_handler) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::solve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::solve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::solve",4,"double &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("Matrix::solve",5,"Matrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_solve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_solve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_solve",4,SWIGTYPE_p_double);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_double__void,0))){
    SWIG_fail_ptr("Matrix_solve",5,SWIGTYPE_p_f_double__void);
  }
  
  result = ((Matrix const *)arg1)->solve((ComplexColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_solve(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_solve__SWIG_22(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_solve__SWIG_27(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_solve__SWIG_32(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_solve__SWIG_37(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_23(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_28(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_33(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_17(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_solve__SWIG_38(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_18(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_29(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_13(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_34(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_24(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_solve__SWIG_39(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_26(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_19(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_36(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_14(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_31(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_solve__SWIG_41(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_35(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_16(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_30(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_25(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_21(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_40(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_Matrix_solve__SWIG_11(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_Matrix_solve__SWIG_15(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Matrix_solve__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_Matrix_solve__SWIG_20(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_Matrix_solve__SWIG_10(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_Matrix_solve__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_double__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_Matrix_solve__SWIG_9(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_solve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::solve(MatrixType &,Matrix const &) const\n"
    "    Matrix::solve(MatrixType &,Matrix const &,octave_idx_type &) const\n"
    "    Matrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    Matrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,bool) const\n"
    "    Matrix::solve(MatrixType &,Matrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,bool) const\n"
    "    Matrix::solve(MatrixType &,ComplexMatrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(MatrixType &,ColumnVector const &) const\n"
    "    Matrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(MatrixType &,ColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(MatrixType &,ComplexColumnVector const &) const\n"
    "    Matrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(MatrixType &,ComplexColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(Matrix const &) const\n"
    "    Matrix::solve(Matrix const &,octave_idx_type &) const\n"
    "    Matrix::solve(Matrix const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(Matrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(Matrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(ComplexMatrix const &) const\n"
    "    Matrix::solve(ComplexMatrix const &,octave_idx_type &) const\n"
    "    Matrix::solve(ComplexMatrix const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(ComplexMatrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(ComplexMatrix const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(ColumnVector const &) const\n"
    "    Matrix::solve(ColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::solve(ColumnVector const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(ColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(ColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n"
    "    Matrix::solve(ComplexColumnVector const &) const\n"
    "    Matrix::solve(ComplexColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::solve(ComplexColumnVector const &,octave_idx_type &,double &) const\n"
    "    Matrix::solve(ComplexColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler,blas_trans_type) const\n"
    "    Matrix::solve(ComplexColumnVector const &,octave_idx_type &,double &,Matrix::solve_singularity_handler) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_lssolve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->lssolve((Matrix const &)*arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3,*arg4);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"Matrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->lssolve((Matrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("Matrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ColumnVector const &)*arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3,*arg4);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  double *arg5 = 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("Matrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::lssolve",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::lssolve",2,"ComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Matrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Matrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("Matrix::lssolve",5,"double &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_lssolve",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("Matrix_lssolve",2,SWIGTYPE_p_ComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("Matrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_double,0))){
    SWIG_fail_ptr("Matrix_lssolve",5,SWIGTYPE_p_double);
  }
  
  result = ((Matrix const *)arg1)->lssolve((ComplexColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_lssolve(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_lssolve__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_lssolve__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_lssolve__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_lssolve__SWIG_12(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_lssolve__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_lssolve__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_lssolve__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Matrix_lssolve__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_lssolve__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_lssolve__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_lssolve__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Matrix_lssolve__SWIG_14(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_lssolve__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_lssolve__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_lssolve__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_double, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_Matrix_lssolve__SWIG_15(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_lssolve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::lssolve(Matrix const &) const\n"
    "    Matrix::lssolve(Matrix const &,octave_idx_type &) const\n"
    "    Matrix::lssolve(Matrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    Matrix::lssolve(Matrix const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    Matrix::lssolve(ComplexMatrix const &) const\n"
    "    Matrix::lssolve(ComplexMatrix const &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ComplexMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ComplexMatrix const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    Matrix::lssolve(ColumnVector const &) const\n"
    "    Matrix::lssolve(ColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ColumnVector const &,octave_idx_type &,octave_idx_type &,double &) const\n"
    "    Matrix::lssolve(ComplexColumnVector const &) const\n"
    "    Matrix::lssolve(ComplexColumnVector const &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ComplexColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    Matrix::lssolve(ComplexColumnVector const &,octave_idx_type &,octave_idx_type &,double &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("Matrix::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::all",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_all",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->all(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("Matrix::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::all",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_all",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->all();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::all(int) const\n"
    "    Matrix::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("Matrix::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::any",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_any",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->any(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("Matrix::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::any",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_any",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->any();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::any(int) const\n"
    "    Matrix::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::cumprod",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_cumprod",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->cumprod(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::cumprod",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_cumprod",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->cumprod();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::cumprod(int) const\n"
    "    Matrix::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::cumsum",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_cumsum",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->cumsum(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::cumsum",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_cumsum",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->cumsum();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::cumsum(int) const\n"
    "    Matrix::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::prod",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_prod",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->prod(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::prod",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_prod",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->prod();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::prod(int) const\n"
    "    Matrix::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::sum",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_sum",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->sum(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::sum",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_sum",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->sum();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::sum(int) const\n"
    "    Matrix::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  int arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::sumsq",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_sumsq",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->sumsq(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::sumsq",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_sumsq",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->sumsq();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::sumsq(int) const\n"
    "    Matrix::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_abs(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::abs",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_abs",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->abs();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::diag",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_diag",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((Matrix const *)arg1)->diag(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("Matrix::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::diag",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_diag",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->diag();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  DiagMatrix result;
  
  SWIG_check_num_args("Matrix::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::diag",1,"Matrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Matrix::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Matrix::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_diag",1,SWIGTYPE_p_Matrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((Matrix const *)arg1)->diag(arg2,arg3);
  {
    DiagMatrix * resultptr = new DiagMatrix((const DiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Matrix_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Matrix_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::diag(octave_idx_type) const\n"
    "    Matrix::diag() const\n"
    "    Matrix::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_row_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::row_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::row_min",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_row_min",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->row_min();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_row_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::row_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::row_max",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_row_max",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->row_max();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_row_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::row_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::row_min",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::row_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_row_min",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("Matrix_row_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((Matrix const *)arg1)->row_min(*arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_row_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_row_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_row_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_row_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::row_min() const\n"
    "    Matrix::row_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_row_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("Matrix::row_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::row_max",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::row_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_row_max",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("Matrix_row_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((Matrix const *)arg1)->row_max(*arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_row_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_row_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_row_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_row_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::row_max() const\n"
    "    Matrix::row_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_column_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  RowVector result;
  
  SWIG_check_num_args("Matrix::column_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::column_min",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_column_min",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->column_min();
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_column_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  RowVector result;
  
  SWIG_check_num_args("Matrix::column_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::column_max",1,"Matrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_column_max",1,SWIGTYPE_p_Matrix);
  }
  
  result = ((Matrix const *)arg1)->column_max();
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_column_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  RowVector result;
  
  SWIG_check_num_args("Matrix::column_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::column_min",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::column_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_column_min",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("Matrix_column_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((Matrix const *)arg1)->column_min(*arg2);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_column_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_column_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_column_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_column_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::column_min() const\n"
    "    Matrix::column_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix_column_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = (Matrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  RowVector result;
  
  SWIG_check_num_args("Matrix::column_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Matrix::column_max",1,"Matrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Matrix::column_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("Matrix_column_max",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("Matrix_column_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((Matrix const *)arg1)->column_max(*arg2);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix_column_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Matrix_column_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix_column_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Matrix_column_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Matrix::column_max() const\n"
    "    Matrix::column_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_Matrix(void *obj) {
Matrix *arg1 = (Matrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_Matrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Matrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Matrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Matrix_methods[]= {
    { "__eq", _wrap_Matrix___eq},
    { "issymmetric", _wrap_Matrix_issymmetric},
    { "insert", _wrap_Matrix_insert},
    { "fill", _wrap_Matrix_fill},
    { "append", _wrap_Matrix_append},
    { "stack", _wrap_Matrix_stack},
    { "hermitian", _wrap_Matrix_hermitian},
    { "transpose", _wrap_Matrix_transpose},
    { "extract", _wrap_Matrix_extract},
    { "extract_n", _wrap_Matrix_extract_n},
    { "row", _wrap_Matrix_row},
    { "column", _wrap_Matrix_column},
    { "resize", _wrap_Matrix_resize},
    { "inverse", _wrap_Matrix_inverse},
    { "pseudo_inverse", _wrap_Matrix_pseudo_inverse},
    { "fourier", _wrap_Matrix_fourier},
    { "ifourier", _wrap_Matrix_ifourier},
    { "fourier2d", _wrap_Matrix_fourier2d},
    { "ifourier2d", _wrap_Matrix_ifourier2d},
    { "determinant", _wrap_Matrix_determinant},
    { "rcond", _wrap_Matrix_rcond},
    { "solve", _wrap_Matrix_solve},
    { "lssolve", _wrap_Matrix_lssolve},
    { "all", _wrap_Matrix_all},
    { "any", _wrap_Matrix_any},
    { "cumprod", _wrap_Matrix_cumprod},
    { "cumsum", _wrap_Matrix_cumsum},
    { "prod", _wrap_Matrix_prod},
    { "sum", _wrap_Matrix_sum},
    { "sumsq", _wrap_Matrix_sumsq},
    { "abs", _wrap_Matrix_abs},
    { "diag", _wrap_Matrix_diag},
    { "row_min", _wrap_Matrix_row_min},
    { "row_max", _wrap_Matrix_row_max},
    { "column_min", _wrap_Matrix_column_min},
    { "column_max", _wrap_Matrix_column_max},
    {0,0}
};
static swig_lua_method swig_Matrix_meta[] = {
    { "__eq", _wrap_Matrix___eq},
    {0,0}
};

static swig_lua_attribute swig_Matrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Matrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Matrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Matrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Matrix_Sf_SwigStatic = {
    "Matrix",
    swig_Matrix_Sf_SwigStatic_methods,
    swig_Matrix_Sf_SwigStatic_attributes,
    swig_Matrix_Sf_SwigStatic_constants,
    swig_Matrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Matrix_bases[] = {0,0};
static const char *swig_Matrix_base_names[] = {"NDArray *",0};
static swig_lua_class _wrap_class_Matrix = { "Matrix", "Matrix", &SWIGTYPE_p_Matrix,_proxy__wrap_new_Matrix, swig_delete_Matrix, swig_Matrix_methods, swig_Matrix_attributes, &swig_Matrix_Sf_SwigStatic, swig_Matrix_meta, swig_Matrix_bases, swig_Matrix_base_names };

static int _wrap_new_FloatNDArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::FloatNDArray",0,0)
  result = (FloatNDArray *)new FloatNDArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNDArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::FloatNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::FloatNDArray",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatNDArray *)new FloatNDArray((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNDArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  float arg2 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::FloatNDArray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::FloatNDArray",1,"dim_vector const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::FloatNDArray",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatNDArray *)new FloatNDArray((dim_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNDArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = 0 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::FloatNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::FloatNDArray",1,"FloatNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("new_FloatNDArray",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (FloatNDArray *)new FloatNDArray((FloatNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNDArray__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::FloatNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::FloatNDArray",1,"charNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_FloatNDArray",1,SWIGTYPE_p_charNDArray);
  }
  
  result = (FloatNDArray *)new FloatNDArray((charNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatNDArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatNDArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatNDArray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatNDArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatNDArray__SWIG_7(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatNDArray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatNDArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::FloatNDArray()\n"
    "    FloatNDArray::FloatNDArray(dim_vector const &)\n"
    "    FloatNDArray::FloatNDArray(dim_vector const &,float)\n"
    "    FloatNDArray::FloatNDArray(FloatNDArray const &)\n"
    "    FloatNDArray::FloatNDArray(charNDArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_any_element_is_negative__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_negative",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_negative",1,"FloatNDArray const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("FloatNDArray::any_element_is_negative",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_negative",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_negative(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_is_negative__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_negative",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_negative",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_negative",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_negative();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_is_negative(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_any_element_is_negative__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_any_element_is_negative__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_any_element_is_negative'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::any_element_is_negative(bool) const\n"
    "    FloatNDArray::any_element_is_negative() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_any_element_is_positive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_positive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_positive",1,"FloatNDArray const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("FloatNDArray::any_element_is_positive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_positive",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_positive(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_is_positive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_positive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_positive",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_positive",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_positive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_is_positive(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_any_element_is_positive__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_any_element_is_positive__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_any_element_is_positive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::any_element_is_positive(bool) const\n"
    "    FloatNDArray::any_element_is_positive() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_any_element_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_nan",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_nan",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_is_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_is_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_is_inf_or_nan",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_is_inf_or_nan",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->any_element_is_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any_element_not_one_or_zero(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::any_element_not_one_or_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any_element_not_one_or_zero",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any_element_not_one_or_zero",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->any_element_not_one_or_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all_elements_are_zero(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::all_elements_are_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all_elements_are_zero",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all_elements_are_zero",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->all_elements_are_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all_elements_are_int_or_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::all_elements_are_int_or_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all_elements_are_int_or_inf_or_nan",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all_elements_are_int_or_inf_or_nan",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->all_elements_are_int_or_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all_integers__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::all_integers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all_integers",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::all_integers",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatNDArray::all_integers",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all_integers",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatNDArray_all_integers",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatNDArray_all_integers",3,SWIGTYPE_p_float);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->all_integers(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all_integers__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::all_integers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all_integers",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all_integers",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->all_integers();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all_integers(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_all_integers__SWIG_1(L);
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNDArray_all_integers__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_all_integers'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::all_integers(float &,float &) const\n"
    "    FloatNDArray::all_integers() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_too_large_for_float(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatNDArray::too_large_for_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::too_large_for_float",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_too_large_for_float",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (bool)((FloatNDArray const *)arg1)->too_large_for_float();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->all(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::all",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_all",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->all();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::all(int) const\n"
    "    FloatNDArray::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->any(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::any",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_any",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->any();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::any(int) const\n"
    "    FloatNDArray::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cumprod",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cumprod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->cumprod(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cumprod",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cumprod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->cumprod();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::cumprod(int) const\n"
    "    FloatNDArray::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cumsum",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cumsum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->cumsum(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cumsum",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cumsum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->cumsum();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::cumsum(int) const\n"
    "    FloatNDArray::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::prod",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_prod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->prod(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::prod",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_prod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->prod();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::prod(int) const\n"
    "    FloatNDArray::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_dprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("FloatNDArray::dprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::dprod",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::dprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_dprod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->dprod(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_dprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("FloatNDArray::dprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::dprod",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_dprod",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->dprod();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_dprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_dprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_dprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_dprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::dprod(int) const\n"
    "    FloatNDArray::dprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::sum",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_sum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->sum(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::sum",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_sum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->sum();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::sum(int) const\n"
    "    FloatNDArray::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_dsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  NDArray result;
  
  SWIG_check_num_args("FloatNDArray::dsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::dsum",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::dsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_dsum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->dsum(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_dsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("FloatNDArray::dsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::dsum",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_dsum",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->dsum();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_dsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_dsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_dsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_dsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::dsum(int) const\n"
    "    FloatNDArray::dsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::sumsq",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_sumsq",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->sumsq(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::sumsq",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_sumsq",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->sumsq();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::sumsq(int) const\n"
    "    FloatNDArray::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_concat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::concat",1,"FloatNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::concat",2,"FloatNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",2,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((FloatNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_concat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::concat",1,"FloatNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::concat",2,"FloatComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",2,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((FloatComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_concat__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  charNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  charNDArray result;
  
  SWIG_check_num_args("FloatNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::concat",1,"FloatNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::concat",2,"charNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_concat",2,SWIGTYPE_p_charNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((charNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    charNDArray * resultptr = new charNDArray((const charNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_concat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNDArray_concat__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNDArray_concat__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNDArray_concat__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_concat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::concat(FloatNDArray const &,Array< octave_idx_type > const &)\n"
    "    FloatNDArray::concat(FloatComplexNDArray const &,Array< octave_idx_type > const &)\n"
    "    FloatNDArray::concat(charNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::max",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::max",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_max",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->max(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::max",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_max",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->max();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::max",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::max",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::max",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_max",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->max(*arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::max",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_max",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatNDArray const *)arg1)->max(*arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_max(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_max__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNDArray_max__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_max__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_max__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::max(int) const\n"
    "    FloatNDArray::max() const\n"
    "    FloatNDArray::max(Array< octave_idx_type > &,int) const\n"
    "    FloatNDArray::max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::min",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::min",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_min",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->min(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::min",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_min",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->min();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::min",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::min",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::min",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::min",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_min",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->min(*arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::min",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_min",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatNDArray const *)arg1)->min(*arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_min(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_min__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNDArray_min__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_min__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_min__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::min(int) const\n"
    "    FloatNDArray::min() const\n"
    "    FloatNDArray::min(Array< octave_idx_type > &,int) const\n"
    "    FloatNDArray::min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_cummax__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummax",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::cummax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->cummax(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummax__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummax",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->cummax();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummax",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::cummax",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::cummax",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->cummax(*arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummax",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::cummax",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatNDArray const *)arg1)->cummax(*arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummax(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_cummax__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNDArray_cummax__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_cummax__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_cummax__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_cummax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::cummax(int) const\n"
    "    FloatNDArray::cummax() const\n"
    "    FloatNDArray::cummax(Array< octave_idx_type > &,int) const\n"
    "    FloatNDArray::cummax(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_cummin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummin",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::cummin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->cummin(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummin",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->cummin();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummin",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::cummin",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::cummin",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->cummin(*arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::cummin",1,"FloatNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::cummin",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatNDArray const *)arg1)->cummin(*arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_cummin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_cummin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNDArray_cummin__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_cummin__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_cummin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_cummin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::cummin(int) const\n"
    "    FloatNDArray::cummin() const\n"
    "    FloatNDArray::cummin(Array< octave_idx_type > &,int) const\n"
    "    FloatNDArray::cummin(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_diff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  octave_idx_type arg2 ;
  int arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diff",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::diff",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::diff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diff",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->diff(arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  octave_idx_type arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diff",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::diff",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diff",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->diff(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diff__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diff",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diff",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->diff();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_diff__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_diff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_diff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_diff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::diff(octave_idx_type,int) const\n"
    "    FloatNDArray::diff(octave_idx_type) const\n"
    "    FloatNDArray::diff() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::insert",1,"FloatNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::insert",2,"FloatNDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatNDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_insert",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_insert",2,SWIGTYPE_p_FloatNDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatNDArray *) &(arg1)->insert((FloatNDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::insert",1,"FloatNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::insert",2,"FloatNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatNDArray::insert",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_insert",1,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_insert",2,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_insert",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (FloatNDArray *) &(arg1)->insert((FloatNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatNDArray_insert__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatNDArray_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::insert(FloatNDArray const &,octave_idx_type,octave_idx_type)\n"
    "    FloatNDArray::insert(FloatNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::abs",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_abs",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->abs();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_isnan(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::isnan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::isnan",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_isnan",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->isnan();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_isinf(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::isinf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::isinf",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_isinf",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->isinf();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatNDArray::isfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::isfinite",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_isfinite",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->isfinite();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_fourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::fourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::fourier",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::fourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_fourier",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->fourier(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_fourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::fourier",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_fourier",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->fourier();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_fourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_fourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_fourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_fourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::fourier(int) const\n"
    "    FloatNDArray::fourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_ifourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::ifourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::ifourier",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::ifourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_ifourier",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->ifourier(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_ifourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::ifourier",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_ifourier",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->ifourier();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_ifourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_ifourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_ifourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_ifourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::ifourier(int) const\n"
    "    FloatNDArray::ifourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::fourier2d",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_fourier2d",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->fourier2d();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::ifourier2d",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_ifourier2d",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->ifourier2d();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_fourierNd(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::fourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::fourierNd",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_fourierNd",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->fourierNd();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_ifourierNd(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatNDArray::ifourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::ifourierNd",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_ifourierNd",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->ifourierNd();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::squeeze",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_squeeze",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->squeeze();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_increment_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("FloatNDArray::increment_index",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::increment_index",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::increment_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  FloatNDArray::increment_index(*arg1,(dim_vector const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_increment_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  
  SWIG_check_num_args("FloatNDArray::increment_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::increment_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  FloatNDArray::increment_index(*arg1,(dim_vector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_increment_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatNDArray_increment_index__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_increment_index__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_increment_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &,int)\n"
    "    FloatNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_compute_index(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("FloatNDArray::compute_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatNDArray::compute_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatNDArray::compute_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatNDArray_compute_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatNDArray_compute_index",2,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)FloatNDArray::compute_index(*arg1,(dim_vector const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  octave_idx_type arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diag",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diag",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatNDArray const *)arg1)->diag(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diag",1,"FloatNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diag",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = ((FloatNDArray const *)arg1)->diag();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatNDArray::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::diag",1,"FloatNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatNDArray::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatNDArray::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_diag",1,SWIGTYPE_p_FloatNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatNDArray const *)arg1)->diag(arg2,arg3);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatNDArray_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatNDArray_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatNDArray_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatNDArray_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatNDArray_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatNDArray::diag(octave_idx_type) const\n"
    "    FloatNDArray::diag() const\n"
    "    FloatNDArray::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatNDArray_changesign(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = (FloatNDArray *) 0 ;
  FloatNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatNDArray::changesign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatNDArray::changesign",1,"FloatNDArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatNDArray_changesign",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (FloatNDArray *) &(arg1)->changesign();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatNDArray(void *obj) {
FloatNDArray *arg1 = (FloatNDArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatNDArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatNDArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatNDArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatNDArray_methods[]= {
    { "any_element_is_negative", _wrap_FloatNDArray_any_element_is_negative},
    { "any_element_is_positive", _wrap_FloatNDArray_any_element_is_positive},
    { "any_element_is_nan", _wrap_FloatNDArray_any_element_is_nan},
    { "any_element_is_inf_or_nan", _wrap_FloatNDArray_any_element_is_inf_or_nan},
    { "any_element_not_one_or_zero", _wrap_FloatNDArray_any_element_not_one_or_zero},
    { "all_elements_are_zero", _wrap_FloatNDArray_all_elements_are_zero},
    { "all_elements_are_int_or_inf_or_nan", _wrap_FloatNDArray_all_elements_are_int_or_inf_or_nan},
    { "all_integers", _wrap_FloatNDArray_all_integers},
    { "too_large_for_float", _wrap_FloatNDArray_too_large_for_float},
    { "all", _wrap_FloatNDArray_all},
    { "any", _wrap_FloatNDArray_any},
    { "cumprod", _wrap_FloatNDArray_cumprod},
    { "cumsum", _wrap_FloatNDArray_cumsum},
    { "prod", _wrap_FloatNDArray_prod},
    { "dprod", _wrap_FloatNDArray_dprod},
    { "sum", _wrap_FloatNDArray_sum},
    { "dsum", _wrap_FloatNDArray_dsum},
    { "sumsq", _wrap_FloatNDArray_sumsq},
    { "concat", _wrap_FloatNDArray_concat},
    { "max", _wrap_FloatNDArray_max},
    { "min", _wrap_FloatNDArray_min},
    { "cummax", _wrap_FloatNDArray_cummax},
    { "cummin", _wrap_FloatNDArray_cummin},
    { "diff", _wrap_FloatNDArray_diff},
    { "insert", _wrap_FloatNDArray_insert},
    { "abs", _wrap_FloatNDArray_abs},
    { "isnan", _wrap_FloatNDArray_isnan},
    { "isinf", _wrap_FloatNDArray_isinf},
    { "isfinite", _wrap_FloatNDArray_isfinite},
    { "fourier", _wrap_FloatNDArray_fourier},
    { "ifourier", _wrap_FloatNDArray_ifourier},
    { "fourier2d", _wrap_FloatNDArray_fourier2d},
    { "ifourier2d", _wrap_FloatNDArray_ifourier2d},
    { "fourierNd", _wrap_FloatNDArray_fourierNd},
    { "ifourierNd", _wrap_FloatNDArray_ifourierNd},
    { "squeeze", _wrap_FloatNDArray_squeeze},
    { "diag", _wrap_FloatNDArray_diag},
    { "changesign", _wrap_FloatNDArray_changesign},
    {0,0}
};
static swig_lua_method swig_FloatNDArray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatNDArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatNDArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatNDArray_Sf_SwigStatic_methods[]= {
    { "increment_index", _wrap_FloatNDArray_increment_index},
    { "compute_index", _wrap_FloatNDArray_compute_index},
    {0,0}
};
static swig_lua_class* swig_FloatNDArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatNDArray_Sf_SwigStatic = {
    "FloatNDArray",
    swig_FloatNDArray_Sf_SwigStatic_methods,
    swig_FloatNDArray_Sf_SwigStatic_attributes,
    swig_FloatNDArray_Sf_SwigStatic_constants,
    swig_FloatNDArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatNDArray_bases[] = {0};
static const char *swig_FloatNDArray_base_names[] = {0};
static swig_lua_class _wrap_class_FloatNDArray = { "FloatNDArray", "FloatNDArray", &SWIGTYPE_p_FloatNDArray,_proxy__wrap_new_FloatNDArray, swig_delete_FloatNDArray, swig_FloatNDArray_methods, swig_FloatNDArray_attributes, &swig_FloatNDArray_Sf_SwigStatic, swig_FloatNDArray_meta, swig_FloatNDArray_bases, swig_FloatNDArray_base_names };

static int _wrap_new_FloatRowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",0,0)
  result = (FloatRowVector *)new FloatRowVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (FloatRowVector *)new FloatRowVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatRowVector *)new FloatRowVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  float arg2 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::FloatRowVector",2,"float");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatRowVector *)new FloatRowVector(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (FloatRowVector *)new FloatRowVector((FloatRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< float > *arg1 = 0 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"MArray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_MArrayT_float_t);
  }
  
  result = (FloatRowVector *)new FloatRowVector((MArray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::FloatRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatRowVector::FloatRowVector",1,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatRowVector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (FloatRowVector *)new FloatRowVector((Array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatRowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatRowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatRowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatRowVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatRowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatRowVector::FloatRowVector()\n"
    "    FloatRowVector::FloatRowVector(octave_idx_type)\n"
    "    FloatRowVector::FloatRowVector(dim_vector const &)\n"
    "    FloatRowVector::FloatRowVector(octave_idx_type,float)\n"
    "    FloatRowVector::FloatRowVector(FloatRowVector const &)\n"
    "    FloatRowVector::FloatRowVector(MArray< float > const &)\n"
    "    FloatRowVector::FloatRowVector(Array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  FloatRowVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatRowVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::operator ==",1,"FloatRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatRowVector::operator ==",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector___eq",1,SWIGTYPE_p_FloatRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector___eq",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (bool)((FloatRowVector const *)arg1)->operator ==((FloatRowVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_insert(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  FloatRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::insert",1,"FloatRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatRowVector::insert",2,"FloatRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatRowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_insert",1,SWIGTYPE_p_FloatRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_insert",2,SWIGTYPE_p_FloatRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatRowVector *) &(arg1)->insert((FloatRowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  float arg2 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::fill",1,"FloatRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_fill",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatRowVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatRowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::fill",1,"FloatRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatRowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatRowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_fill",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatRowVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatRowVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatRowVector_fill__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatRowVector::fill(float)\n"
    "    FloatRowVector::fill(float,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_append(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatRowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::append",1,"FloatRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatRowVector::append",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_append",1,SWIGTYPE_p_FloatRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_append",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatRowVector const *)arg1)->append((FloatRowVector const &)*arg2);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatRowVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::transpose",1,"FloatRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_transpose",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatRowVector const *)arg1)->transpose();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_real__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("real",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("real",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("real",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = real((FloatComplexRowVector const &)*arg1);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_real(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_real__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_real__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'real'\n"
    "  Possible C/C++ prototypes are:\n"
    "    real(ComplexColumnVector const &)\n"
    "    real(FloatComplexRowVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_imag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("imag",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("imag",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("imag",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = imag((FloatComplexRowVector const &)*arg1);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_imag(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imag__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_imag__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'imag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    imag(ComplexColumnVector const &)\n"
    "    imag(FloatComplexRowVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatRowVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::extract",1,"FloatRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatRowVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_extract",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatRowVector const *)arg1)->extract(arg2,arg3);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatRowVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::extract_n",1,"FloatRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatRowVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_extract_n",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatRowVector const *)arg1)->extract_n(arg2,arg3);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_min(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatRowVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::min",1,"FloatRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_min",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (float)((FloatRowVector const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_max(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatRowVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::max",1,"FloatRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_max",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (float)((FloatRowVector const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  octave_idx_type arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("FloatRowVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::resize",1,"FloatRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatRowVector::resize",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_resize",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->resize(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatRowVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::resize",1,"FloatRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_resize",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatRowVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatRowVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatRowVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatRowVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatRowVector::resize(octave_idx_type,float const &)\n"
    "    FloatRowVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatRowVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = (FloatRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatRowVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatRowVector::clear",1,"FloatRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatRowVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatRowVector_clear",1,SWIGTYPE_p_FloatRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatRowVector(void *obj) {
FloatRowVector *arg1 = (FloatRowVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatRowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatRowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatRowVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatRowVector_methods[]= {
    { "__eq", _wrap_FloatRowVector___eq},
    { "insert", _wrap_FloatRowVector_insert},
    { "fill", _wrap_FloatRowVector_fill},
    { "append", _wrap_FloatRowVector_append},
    { "transpose", _wrap_FloatRowVector_transpose},
    { "extract", _wrap_FloatRowVector_extract},
    { "extract_n", _wrap_FloatRowVector_extract_n},
    { "min", _wrap_FloatRowVector_min},
    { "max", _wrap_FloatRowVector_max},
    { "resize", _wrap_FloatRowVector_resize},
    { "clear", _wrap_FloatRowVector_clear},
    {0,0}
};
static swig_lua_method swig_FloatRowVector_meta[] = {
    { "__eq", _wrap_FloatRowVector___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatRowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatRowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatRowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatRowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatRowVector_Sf_SwigStatic = {
    "FloatRowVector",
    swig_FloatRowVector_Sf_SwigStatic_methods,
    swig_FloatRowVector_Sf_SwigStatic_attributes,
    swig_FloatRowVector_Sf_SwigStatic_constants,
    swig_FloatRowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatRowVector_bases[] = {0};
static const char *swig_FloatRowVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatRowVector = { "FloatRowVector", "FloatRowVector", &SWIGTYPE_p_FloatRowVector,_proxy__wrap_new_FloatRowVector, swig_delete_FloatRowVector, swig_FloatRowVector_methods, swig_FloatRowVector_attributes, &swig_FloatRowVector_Sf_SwigStatic, swig_FloatRowVector_meta, swig_FloatRowVector_bases, swig_FloatRowVector_base_names };

static int _wrap_new_FloatColumnVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",0,0)
  result = (FloatColumnVector *)new FloatColumnVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (FloatColumnVector *)new FloatColumnVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatColumnVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatColumnVector *)new FloatColumnVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  float arg2 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",2,"float");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatColumnVector *)new FloatColumnVector(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_FloatColumnVector",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (FloatColumnVector *)new FloatColumnVector((FloatColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< float > *arg1 = 0 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"MArray< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatColumnVector",1,SWIGTYPE_p_MArrayT_float_t);
  }
  
  result = (FloatColumnVector *)new FloatColumnVector((MArray< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::FloatColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatColumnVector::FloatColumnVector",1,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("new_FloatColumnVector",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (FloatColumnVector *)new FloatColumnVector((Array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatColumnVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatColumnVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColumnVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColumnVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColumnVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatColumnVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatColumnVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatColumnVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatColumnVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatColumnVector::FloatColumnVector()\n"
    "    FloatColumnVector::FloatColumnVector(octave_idx_type)\n"
    "    FloatColumnVector::FloatColumnVector(dim_vector const &)\n"
    "    FloatColumnVector::FloatColumnVector(octave_idx_type,float)\n"
    "    FloatColumnVector::FloatColumnVector(FloatColumnVector const &)\n"
    "    FloatColumnVector::FloatColumnVector(MArray< float > const &)\n"
    "    FloatColumnVector::FloatColumnVector(Array< float > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColumnVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatColumnVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::operator ==",1,"FloatColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatColumnVector::operator ==",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector___eq",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector___eq",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (bool)((FloatColumnVector const *)arg1)->operator ==((FloatColumnVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_insert(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::insert",1,"FloatColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatColumnVector::insert",2,"FloatColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_insert",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_insert",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatColumnVector *) &(arg1)->insert((FloatColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  float arg2 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::fill",1,"FloatColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_fill",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatColumnVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::fill",1,"FloatColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_fill",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatColumnVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColumnVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatColumnVector_fill__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColumnVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatColumnVector::fill(float)\n"
    "    FloatColumnVector::fill(float,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColumnVector_stack(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::stack",1,"FloatColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatColumnVector::stack",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_stack",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_stack",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatColumnVector const *)arg1)->stack((FloatColumnVector const &)*arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatColumnVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::transpose",1,"FloatColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_transpose",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatColumnVector const *)arg1)->transpose();
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatColumnVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::extract",1,"FloatColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatColumnVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_extract",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatColumnVector const *)arg1)->extract(arg2,arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatColumnVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::extract_n",1,"FloatColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatColumnVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_extract_n",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatColumnVector const *)arg1)->extract_n(arg2,arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_min(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatColumnVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::min",1,"FloatColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_min",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (float)((FloatColumnVector const *)arg1)->min();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_max(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatColumnVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::max",1,"FloatColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_max",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (float)((FloatColumnVector const *)arg1)->max();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatColumnVector::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::abs",1,"FloatColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_abs",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatColumnVector const *)arg1)->abs();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  octave_idx_type arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  SWIG_check_num_args("FloatColumnVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::resize",1,"FloatColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatColumnVector::resize",3,"float const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_resize",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  temp3=(float)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->resize(arg2,(float const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatColumnVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::resize",1,"FloatColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_resize",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatColumnVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatColumnVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatColumnVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatColumnVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatColumnVector::resize(octave_idx_type,float const &)\n"
    "    FloatColumnVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatColumnVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = (FloatColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatColumnVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatColumnVector::clear",1,"FloatColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatColumnVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatColumnVector_clear",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatColumnVector(void *obj) {
FloatColumnVector *arg1 = (FloatColumnVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatColumnVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatColumnVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatColumnVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatColumnVector_methods[]= {
    { "__eq", _wrap_FloatColumnVector___eq},
    { "insert", _wrap_FloatColumnVector_insert},
    { "fill", _wrap_FloatColumnVector_fill},
    { "stack", _wrap_FloatColumnVector_stack},
    { "transpose", _wrap_FloatColumnVector_transpose},
    { "extract", _wrap_FloatColumnVector_extract},
    { "extract_n", _wrap_FloatColumnVector_extract_n},
    { "min", _wrap_FloatColumnVector_min},
    { "max", _wrap_FloatColumnVector_max},
    { "abs", _wrap_FloatColumnVector_abs},
    { "resize", _wrap_FloatColumnVector_resize},
    { "clear", _wrap_FloatColumnVector_clear},
    {0,0}
};
static swig_lua_method swig_FloatColumnVector_meta[] = {
    { "__eq", _wrap_FloatColumnVector___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatColumnVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatColumnVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatColumnVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatColumnVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatColumnVector_Sf_SwigStatic = {
    "FloatColumnVector",
    swig_FloatColumnVector_Sf_SwigStatic_methods,
    swig_FloatColumnVector_Sf_SwigStatic_attributes,
    swig_FloatColumnVector_Sf_SwigStatic_constants,
    swig_FloatColumnVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatColumnVector_bases[] = {0};
static const char *swig_FloatColumnVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatColumnVector = { "FloatColumnVector", "FloatColumnVector", &SWIGTYPE_p_FloatColumnVector,_proxy__wrap_new_FloatColumnVector, swig_delete_FloatColumnVector, swig_FloatColumnVector_methods, swig_FloatColumnVector_attributes, &swig_FloatColumnVector_Sf_SwigStatic, swig_FloatColumnVector_meta, swig_FloatColumnVector_bases, swig_FloatColumnVector_base_names };

static int _wrap_new_FloatMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",0,0)
  result = (FloatMatrix *)new FloatMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (FloatMatrix *)new FloatMatrix((FloatMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::FloatMatrix",2,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (FloatMatrix *)new FloatMatrix(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  float arg3 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::FloatMatrix",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::FloatMatrix",3,"float");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (FloatMatrix *)new FloatMatrix(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatMatrix *)new FloatMatrix((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  float arg2 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"dim_vector const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::FloatMatrix",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatMatrix *)new FloatMatrix((dim_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (FloatMatrix *)new FloatMatrix((FloatRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (FloatMatrix *)new FloatMatrix((FloatColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatDiagMatrix *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = (FloatMatrix *)new FloatMatrix((FloatDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< float > *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"MDiagArray2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_MDiagArray2T_float_t);
  }
  
  result = (FloatMatrix *)new FloatMatrix((MDiagArray2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< float > *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"DiagArray2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_float_t,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_DiagArray2T_float_t);
  }
  
  result = (FloatMatrix *)new FloatMatrix((DiagArray2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  PermMatrix *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"PermMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PermMatrix,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_PermMatrix);
  }
  
  result = (FloatMatrix *)new FloatMatrix((PermMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"boolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_boolMatrix);
  }
  
  result = (FloatMatrix *)new FloatMatrix((boolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::FloatMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatMatrix::FloatMatrix",1,"charMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_FloatMatrix",1,SWIGTYPE_p_charMatrix);
  }
  
  result = (FloatMatrix *)new FloatMatrix((charMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PermMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatMatrix__SWIG_15(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatMatrix__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatMatrix__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_FloatMatrix__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::FloatMatrix()\n"
    "    FloatMatrix::FloatMatrix(FloatMatrix const &)\n"
    "    FloatMatrix::FloatMatrix(octave_idx_type,octave_idx_type)\n"
    "    FloatMatrix::FloatMatrix(octave_idx_type,octave_idx_type,float)\n"
    "    FloatMatrix::FloatMatrix(dim_vector const &)\n"
    "    FloatMatrix::FloatMatrix(dim_vector const &,float)\n"
    "    FloatMatrix::FloatMatrix(FloatRowVector const &)\n"
    "    FloatMatrix::FloatMatrix(FloatColumnVector const &)\n"
    "    FloatMatrix::FloatMatrix(FloatDiagMatrix const &)\n"
    "    FloatMatrix::FloatMatrix(MDiagArray2< float > const &)\n"
    "    FloatMatrix::FloatMatrix(DiagArray2< float > const &)\n"
    "    FloatMatrix::FloatMatrix(PermMatrix const &)\n"
    "    FloatMatrix::FloatMatrix(boolMatrix const &)\n"
    "    FloatMatrix::FloatMatrix(charMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatMatrix::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::operator ==",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::operator ==",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix___eq",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix___eq",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (bool)((FloatMatrix const *)arg1)->operator ==((FloatMatrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_issymmetric(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatMatrix::issymmetric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::issymmetric",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_issymmetric",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (bool)((FloatMatrix const *)arg1)->issymmetric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::insert",1,"FloatMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::insert",2,"FloatMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",2,SWIGTYPE_p_FloatMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatMatrix *) &(arg1)->insert((FloatMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::insert",1,"FloatMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::insert",2,"FloatRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatMatrix_insert",2,SWIGTYPE_p_FloatRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatMatrix *) &(arg1)->insert((FloatRowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::insert",1,"FloatMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::insert",2,"FloatColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_insert",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatMatrix *) &(arg1)->insert((FloatColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_insert__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::insert",1,"FloatMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::insert",2,"FloatDiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_insert",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatMatrix *) &(arg1)->insert((FloatDiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_insert__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_insert__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::insert(FloatMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    FloatMatrix::insert(FloatRowVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatMatrix::insert(FloatColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatMatrix::insert(FloatDiagMatrix const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  float arg2 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::fill",1,"FloatMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_fill",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatMatrix *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  FloatMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatMatrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::fill",1,"FloatMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatMatrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("FloatMatrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_fill",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (FloatMatrix *) &(arg1)->fill(arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_fill(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_FloatMatrix_fill__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::fill(float)\n"
    "    FloatMatrix::fill(float,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::append",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::append",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->append((FloatMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::append",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::append",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatMatrix_append",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatMatrix const *)arg1)->append((FloatRowVector const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_append__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::append",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::append",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_append",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->append((FloatColumnVector const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_append__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::append",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::append",2,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_append",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->append((FloatDiagMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_append__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_append__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_append__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::append(FloatMatrix const &) const\n"
    "    FloatMatrix::append(FloatRowVector const &) const\n"
    "    FloatMatrix::append(FloatColumnVector const &) const\n"
    "    FloatMatrix::append(FloatDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::stack",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::stack",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->stack((FloatMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::stack",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::stack",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatMatrix_stack",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatMatrix const *)arg1)->stack((FloatRowVector const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_stack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::stack",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::stack",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_stack",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->stack((FloatColumnVector const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_stack__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::stack",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::stack",2,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_stack",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->stack((FloatDiagMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_stack__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_stack__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_stack__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::stack(FloatMatrix const &) const\n"
    "    FloatMatrix::stack(FloatRowVector const &) const\n"
    "    FloatMatrix::stack(FloatColumnVector const &) const\n"
    "    FloatMatrix::stack(FloatDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::hermitian",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_hermitian",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->hermitian();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::transpose",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_transpose",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->transpose();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::extract",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::extract",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::extract",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::extract",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatMatrix::extract",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_extract",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((FloatMatrix const *)arg1)->extract(arg2,arg3,arg4,arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::extract_n",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::extract_n",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::extract_n",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::extract_n",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatMatrix::extract_n",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_extract_n",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((FloatMatrix const *)arg1)->extract_n(arg2,arg3,arg4,arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatMatrix::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::row",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::row",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_row",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->row(arg2);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_column(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::column",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::column",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::column",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_column",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->column(arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("FloatMatrix::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::resize",1,"FloatMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::resize",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatMatrix::resize",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_resize",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->resize(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  
  SWIG_check_num_args("FloatMatrix::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::resize",1,"FloatMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::resize",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_resize",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_resize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_resize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_resize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::resize(octave_idx_type,octave_idx_type,float)\n"
    "    FloatMatrix::resize(octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse(*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatMatrix::inverse",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3,arg4,arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatMatrix::inverse",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3,arg4);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse(*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::inverse",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatMatrix::inverse",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("FloatMatrix::inverse",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::inverse",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::inverse",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::inverse",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_inverse(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_inverse__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_inverse__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_inverse__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_inverse__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_inverse__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_inverse__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_inverse__SWIG_9(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_inverse__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_inverse__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_FloatMatrix_inverse__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::inverse() const\n"
    "    FloatMatrix::inverse(octave_idx_type &) const\n"
    "    FloatMatrix::inverse(octave_idx_type &,float &,bool,bool) const\n"
    "    FloatMatrix::inverse(octave_idx_type &,float &,bool) const\n"
    "    FloatMatrix::inverse(octave_idx_type &,float &) const\n"
    "    FloatMatrix::inverse(MatrixType &) const\n"
    "    FloatMatrix::inverse(MatrixType &,octave_idx_type &) const\n"
    "    FloatMatrix::inverse(MatrixType &,octave_idx_type &,float &,bool,bool) const\n"
    "    FloatMatrix::inverse(MatrixType &,octave_idx_type &,float &,bool) const\n"
    "    FloatMatrix::inverse(MatrixType &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_pseudo_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  float arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::pseudo_inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::pseudo_inverse",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::pseudo_inverse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_pseudo_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->pseudo_inverse(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_pseudo_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::pseudo_inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::pseudo_inverse",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_pseudo_inverse",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->pseudo_inverse();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_pseudo_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_pseudo_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_pseudo_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_pseudo_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::pseudo_inverse(float) const\n"
    "    FloatMatrix::pseudo_inverse() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_fourier(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::fourier",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_fourier",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->fourier();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_ifourier(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::ifourier",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_ifourier",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->ifourier();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::fourier2d",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_fourier2d",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->fourier2d();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::ifourier2d",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_ifourier2d",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->ifourier2d();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->determinant();
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::determinant",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->determinant(*arg2);
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::determinant",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatMatrix::determinant",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((FloatMatrix const *)arg1)->determinant(*arg2,*arg3,arg4);
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::determinant",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",3,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->determinant(*arg2,*arg3);
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::determinant",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatMatrix::determinant",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4,arg5);
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatDET result;
  
  SWIG_check_num_args("FloatMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::determinant",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::determinant",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_determinant",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4);
  {
    FloatDET * resultptr = new FloatDET((const FloatDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_determinant(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_determinant__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_determinant__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_determinant__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatMatrix_determinant__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_determinant__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatMatrix_determinant__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_determinant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::determinant() const\n"
    "    FloatMatrix::determinant(octave_idx_type &) const\n"
    "    FloatMatrix::determinant(octave_idx_type &,float &,bool) const\n"
    "    FloatMatrix::determinant(octave_idx_type &,float &) const\n"
    "    FloatMatrix::determinant(MatrixType &,octave_idx_type &,float &,bool) const\n"
    "    FloatMatrix::determinant(MatrixType &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_rcond__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatMatrix::rcond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::rcond",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_rcond",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (float)((FloatMatrix const *)arg1)->rcond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rcond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("FloatMatrix::rcond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::rcond",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::rcond",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_rcond",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_rcond",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (float)((FloatMatrix const *)arg1)->rcond(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_rcond(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_rcond__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_rcond__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_rcond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::rcond() const\n"
    "    FloatMatrix::rcond(MatrixType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_solve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("FloatMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("FloatMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("FloatMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix::solve_singularity_handler arg6 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_24(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_25(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_26(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_27(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_28(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_29(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_30(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_31(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_32(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_33(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_34(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_35(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_36(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_37(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_38(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_39(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_40(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve__SWIG_41(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatMatrix::solve_singularity_handler arg5 = (FloatMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::solve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatMatrix::solve",5,"FloatMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_solve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_solve(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_solve__SWIG_22(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_solve__SWIG_27(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_solve__SWIG_32(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_solve__SWIG_37(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_23(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_28(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_33(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_17(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_solve__SWIG_38(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_18(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_29(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_13(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_34(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_24(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_solve__SWIG_39(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_26(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_19(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_36(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_14(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_31(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_solve__SWIG_41(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_35(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_16(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_30(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_25(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_21(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_40(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatMatrix_solve__SWIG_11(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FloatMatrix_solve__SWIG_15(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_FloatMatrix_solve__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FloatMatrix_solve__SWIG_20(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_FloatMatrix_solve__SWIG_10(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_FloatMatrix_solve__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_FloatMatrix_solve__SWIG_9(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_solve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,bool) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,bool) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatColumnVector const &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexColumnVector const &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(FloatMatrix const &) const\n"
    "    FloatMatrix::solve(FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(FloatMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(FloatMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(FloatMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(FloatComplexMatrix const &) const\n"
    "    FloatMatrix::solve(FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(FloatColumnVector const &) const\n"
    "    FloatMatrix::solve(FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n"
    "    FloatMatrix::solve(FloatComplexColumnVector const &) const\n"
    "    FloatMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &,FloatMatrix::solve_singularity_handler) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_lssolve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::lssolve",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_lssolve(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_lssolve__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_lssolve__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_lssolve__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_lssolve__SWIG_12(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_lssolve__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_lssolve__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_lssolve__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatMatrix_lssolve__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_lssolve__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_lssolve__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_lssolve__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatMatrix_lssolve__SWIG_14(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_lssolve__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_lssolve__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_lssolve__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatMatrix_lssolve__SWIG_15(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_lssolve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::lssolve(FloatMatrix const &) const\n"
    "    FloatMatrix::lssolve(FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatMatrix const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::lssolve(FloatComplexMatrix const &) const\n"
    "    FloatMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::lssolve(FloatColumnVector const &) const\n"
    "    FloatMatrix::lssolve(FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatColumnVector const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatMatrix::lssolve(FloatComplexColumnVector const &) const\n"
    "    FloatMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  int arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::cumprod",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_cumprod",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->cumprod(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::cumprod",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_cumprod",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->cumprod();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::cumprod(int) const\n"
    "    FloatMatrix::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  int arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::cumsum",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_cumsum",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->cumsum(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::cumsum",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_cumsum",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->cumsum();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::cumsum(int) const\n"
    "    FloatMatrix::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  int arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::prod",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_prod",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->prod(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::prod",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_prod",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->prod();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::prod(int) const\n"
    "    FloatMatrix::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  int arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::sum",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_sum",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->sum(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::sum",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_sum",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->sum();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::sum(int) const\n"
    "    FloatMatrix::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  int arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::sumsq",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_sumsq",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->sumsq(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::sumsq",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_sumsq",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->sumsq();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::sumsq(int) const\n"
    "    FloatMatrix::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::abs",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_abs",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->abs();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::diag",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_diag",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatMatrix const *)arg1)->diag(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatMatrix::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::diag",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_diag",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->diag();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatDiagMatrix result;
  
  SWIG_check_num_args("FloatMatrix::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::diag",1,"FloatMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatMatrix::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatMatrix::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_diag",1,SWIGTYPE_p_FloatMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatMatrix const *)arg1)->diag(arg2,arg3);
  {
    FloatDiagMatrix * resultptr = new FloatDiagMatrix((const FloatDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatMatrix_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatMatrix_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::diag(octave_idx_type) const\n"
    "    FloatMatrix::diag() const\n"
    "    FloatMatrix::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_row_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::row_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::row_min",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_row_min",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->row_min();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::row_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::row_max",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_row_max",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->row_max();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::row_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::row_min",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::row_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_row_min",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatMatrix_row_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatMatrix const *)arg1)->row_min(*arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_row_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_row_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_row_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::row_min() const\n"
    "    FloatMatrix::row_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_row_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatMatrix::row_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::row_max",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::row_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_row_max",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatMatrix_row_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatMatrix const *)arg1)->row_max(*arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_row_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_row_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_row_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_row_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::row_max() const\n"
    "    FloatMatrix::row_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_column_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatMatrix::column_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::column_min",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_column_min",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->column_min();
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_column_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatMatrix::column_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::column_max",1,"FloatMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_column_max",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatMatrix const *)arg1)->column_max();
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_column_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatMatrix::column_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::column_min",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::column_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_column_min",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatMatrix_column_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatMatrix const *)arg1)->column_min(*arg2);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_column_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_column_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_column_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_column_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::column_min() const\n"
    "    FloatMatrix::column_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatMatrix_column_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = (FloatMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("FloatMatrix::column_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatMatrix::column_max",1,"FloatMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatMatrix::column_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatMatrix_column_max",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatMatrix_column_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatMatrix const *)arg1)->column_max(*arg2);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatMatrix_column_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatMatrix_column_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatMatrix_column_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatMatrix_column_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatMatrix::column_max() const\n"
    "    FloatMatrix::column_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatMatrix(void *obj) {
FloatMatrix *arg1 = (FloatMatrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatMatrix_methods[]= {
    { "__eq", _wrap_FloatMatrix___eq},
    { "issymmetric", _wrap_FloatMatrix_issymmetric},
    { "insert", _wrap_FloatMatrix_insert},
    { "fill", _wrap_FloatMatrix_fill},
    { "append", _wrap_FloatMatrix_append},
    { "stack", _wrap_FloatMatrix_stack},
    { "hermitian", _wrap_FloatMatrix_hermitian},
    { "transpose", _wrap_FloatMatrix_transpose},
    { "extract", _wrap_FloatMatrix_extract},
    { "extract_n", _wrap_FloatMatrix_extract_n},
    { "row", _wrap_FloatMatrix_row},
    { "column", _wrap_FloatMatrix_column},
    { "resize", _wrap_FloatMatrix_resize},
    { "inverse", _wrap_FloatMatrix_inverse},
    { "pseudo_inverse", _wrap_FloatMatrix_pseudo_inverse},
    { "fourier", _wrap_FloatMatrix_fourier},
    { "ifourier", _wrap_FloatMatrix_ifourier},
    { "fourier2d", _wrap_FloatMatrix_fourier2d},
    { "ifourier2d", _wrap_FloatMatrix_ifourier2d},
    { "determinant", _wrap_FloatMatrix_determinant},
    { "rcond", _wrap_FloatMatrix_rcond},
    { "solve", _wrap_FloatMatrix_solve},
    { "lssolve", _wrap_FloatMatrix_lssolve},
    { "cumprod", _wrap_FloatMatrix_cumprod},
    { "cumsum", _wrap_FloatMatrix_cumsum},
    { "prod", _wrap_FloatMatrix_prod},
    { "sum", _wrap_FloatMatrix_sum},
    { "sumsq", _wrap_FloatMatrix_sumsq},
    { "abs", _wrap_FloatMatrix_abs},
    { "diag", _wrap_FloatMatrix_diag},
    { "row_min", _wrap_FloatMatrix_row_min},
    { "row_max", _wrap_FloatMatrix_row_max},
    { "column_min", _wrap_FloatMatrix_column_min},
    { "column_max", _wrap_FloatMatrix_column_max},
    {0,0}
};
static swig_lua_method swig_FloatMatrix_meta[] = {
    { "__eq", _wrap_FloatMatrix___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatMatrix_Sf_SwigStatic = {
    "FloatMatrix",
    swig_FloatMatrix_Sf_SwigStatic_methods,
    swig_FloatMatrix_Sf_SwigStatic_attributes,
    swig_FloatMatrix_Sf_SwigStatic_constants,
    swig_FloatMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatMatrix_bases[] = {0,0};
static const char *swig_FloatMatrix_base_names[] = {"FloatNDArray *",0};
static swig_lua_class _wrap_class_FloatMatrix = { "FloatMatrix", "FloatMatrix", &SWIGTYPE_p_FloatMatrix,_proxy__wrap_new_FloatMatrix, swig_delete_FloatMatrix, swig_FloatMatrix_methods, swig_FloatMatrix_attributes, &swig_FloatMatrix_Sf_SwigStatic, swig_FloatMatrix_meta, swig_FloatMatrix_bases, swig_FloatMatrix_base_names };

static int _wrap_new_FloatComplexNDArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::FloatComplexNDArray",0,0)
  result = (FloatComplexNDArray *)new FloatComplexNDArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexNDArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::FloatComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::FloatComplexNDArray",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatComplexNDArray *)new FloatComplexNDArray((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexNDArray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::FloatComplexNDArray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::FloatComplexNDArray",1,"dim_vector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::FloatComplexNDArray",2,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexNDArray",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexNDArray",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexNDArray *)new FloatComplexNDArray((dim_vector const &)*arg1,(FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexNDArray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::FloatComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::FloatComplexNDArray",1,"FloatComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("new_FloatComplexNDArray",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (FloatComplexNDArray *)new FloatComplexNDArray((FloatComplexNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexNDArray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::FloatComplexNDArray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::FloatComplexNDArray",1,"charNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_FloatComplexNDArray",1,SWIGTYPE_p_charNDArray);
  }
  
  result = (FloatComplexNDArray *)new FloatComplexNDArray((charNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexNDArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatComplexNDArray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexNDArray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexNDArray__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexNDArray__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatComplexNDArray__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatComplexNDArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::FloatComplexNDArray()\n"
    "    FloatComplexNDArray::FloatComplexNDArray(dim_vector const &)\n"
    "    FloatComplexNDArray::FloatComplexNDArray(dim_vector const &,FloatComplex const &)\n"
    "    FloatComplexNDArray::FloatComplexNDArray(FloatComplexNDArray const &)\n"
    "    FloatComplexNDArray::FloatComplexNDArray(charNDArray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_any_element_is_nan(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexNDArray::any_element_is_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::any_element_is_nan",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_any_element_is_nan",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (bool)((FloatComplexNDArray const *)arg1)->any_element_is_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_any_element_is_inf_or_nan(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexNDArray::any_element_is_inf_or_nan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::any_element_is_inf_or_nan",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_any_element_is_inf_or_nan",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (bool)((FloatComplexNDArray const *)arg1)->any_element_is_inf_or_nan();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_all_elements_are_real(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexNDArray::all_elements_are_real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::all_elements_are_real",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all_elements_are_real",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (bool)((FloatComplexNDArray const *)arg1)->all_elements_are_real();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_all_integers(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  float *arg2 = 0 ;
  float *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexNDArray::all_integers",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::all_integers",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::all_integers",2,"float &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexNDArray::all_integers",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all_integers",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all_integers",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all_integers",3,SWIGTYPE_p_float);
  }
  
  result = (bool)((FloatComplexNDArray const *)arg1)->all_integers(*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_too_large_for_float(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexNDArray::too_large_for_float",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::too_large_for_float",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_too_large_for_float",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (bool)((FloatComplexNDArray const *)arg1)->too_large_for_float();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::all",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->all(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::all",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_all",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->all();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::all(int) const\n"
    "    FloatComplexNDArray::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::any",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_any",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->any(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::any",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_any",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->any();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::any(int) const\n"
    "    FloatComplexNDArray::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cumprod",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cumprod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->cumprod(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cumprod",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cumprod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cumprod();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::cumprod(int) const\n"
    "    FloatComplexNDArray::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cumsum",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cumsum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->cumsum(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cumsum",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cumsum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cumsum();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::cumsum(int) const\n"
    "    FloatComplexNDArray::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::prod",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_prod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->prod(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::prod",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_prod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->prod();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::prod(int) const\n"
    "    FloatComplexNDArray::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_dprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::dprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::dprod",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::dprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_dprod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->dprod(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_dprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::dprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::dprod",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_dprod",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->dprod();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_dprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_dprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_dprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_dprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::dprod(int) const\n"
    "    FloatComplexNDArray::dprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::sum",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_sum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->sum(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::sum",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_sum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->sum();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::sum(int) const\n"
    "    FloatComplexNDArray::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_dsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::dsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::dsum",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::dsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_dsum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->dsum(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_dsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::dsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::dsum",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_dsum",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->dsum();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_dsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_dsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_dsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_dsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::dsum(int) const\n"
    "    FloatComplexNDArray::dsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::sumsq",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_sumsq",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->sumsq(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::sumsq",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_sumsq",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->sumsq();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::sumsq(int) const\n"
    "    FloatComplexNDArray::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_concat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::concat",1,"FloatComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::concat",2,"FloatComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",2,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((FloatComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_concat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::concat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::concat",1,"FloatComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::concat",2,"FloatNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexNDArray::concat",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",2,SWIGTYPE_p_FloatNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_concat",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (arg1)->concat((FloatNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_concat(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_concat__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_concat__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_concat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::concat(FloatComplexNDArray const &,Array< octave_idx_type > const &)\n"
    "    FloatComplexNDArray::concat(FloatNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::max",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::max",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->max(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::max",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->max();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_max__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::max",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::max",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::max",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::max",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->max(*arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_max__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::max",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->max(*arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_max(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_max__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_max__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_max__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_max__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::max(int) const\n"
    "    FloatComplexNDArray::max() const\n"
    "    FloatComplexNDArray::max(Array< octave_idx_type > &,int) const\n"
    "    FloatComplexNDArray::max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::min",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::min",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->min(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::min",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->min();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_min__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::min",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::min",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::min",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::min",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->min(*arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_min__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::min",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->min(*arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_min(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_min__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_min__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_min__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_min__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::min(int) const\n"
    "    FloatComplexNDArray::min() const\n"
    "    FloatComplexNDArray::min(Array< octave_idx_type > &,int) const\n"
    "    FloatComplexNDArray::min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_cummax__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummax",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummax",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->cummax(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummax__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummax",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cummax();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummax__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummax",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummax",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummax",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::cummax",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->cummax(*arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummax__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummax",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummax",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummax",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummax",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cummax(*arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummax(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_cummax__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cummax__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cummax__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_cummax__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_cummax'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::cummax(int) const\n"
    "    FloatComplexNDArray::cummax() const\n"
    "    FloatComplexNDArray::cummax(Array< octave_idx_type > &,int) const\n"
    "    FloatComplexNDArray::cummax(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_cummin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummin",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummin",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->cummin(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummin",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cummin();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummin__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  int arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummin",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummin",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::cummin",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->cummin(*arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummin__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::cummin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::cummin",1,"FloatComplexNDArray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::cummin",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_cummin",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->cummin(*arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_cummin(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_cummin__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cummin__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_cummin__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_cummin__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_cummin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::cummin(int) const\n"
    "    FloatComplexNDArray::cummin() const\n"
    "    FloatComplexNDArray::cummin(Array< octave_idx_type > &,int) const\n"
    "    FloatComplexNDArray::cummin(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_diff__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  int arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diff",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diff",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::diff",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::diff",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diff",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->diff(arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diff__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diff",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diff",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::diff",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diff",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->diff(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diff__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diff",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diff",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diff",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->diff();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diff(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_diff__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_diff__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_diff__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_diff'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::diff(octave_idx_type,int) const\n"
    "    FloatComplexNDArray::diff(octave_idx_type) const\n"
    "    FloatComplexNDArray::diff() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  NDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::insert",1,"FloatComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::insert",2,"NDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexNDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",2,SWIGTYPE_p_NDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexNDArray *) &(arg1)->insert((NDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::insert",1,"FloatComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::insert",2,"FloatComplexNDArray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexNDArray::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",2,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexNDArray *) &(arg1)->insert((FloatComplexNDArray const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray *arg2 = 0 ;
  Array< octave_idx_type > *arg3 = 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::insert",1,"FloatComplexNDArray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::insert",2,"FloatComplexNDArray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexNDArray::insert",3,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",2,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_insert",3,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (FloatComplexNDArray *) &(arg1)->insert((FloatComplexNDArray const &)*arg2,(Array< octave_idx_type > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_insert__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexNDArray_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexNDArray_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::insert(NDArray const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexNDArray::insert(FloatComplexNDArray const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexNDArray::insert(FloatComplexNDArray const &,Array< octave_idx_type > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::abs",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_abs",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->abs();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_isnan(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::isnan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::isnan",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_isnan",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->isnan();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_isinf(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::isinf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::isinf",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_isinf",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->isinf();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::isfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::isfinite",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_isfinite",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->isfinite();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"FloatComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = conj((FloatComplexNDArray const &)*arg1);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_fourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::fourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::fourier",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::fourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_fourier",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->fourier(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_fourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::fourier",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_fourier",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->fourier();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_fourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_fourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_fourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_fourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::fourier(int) const\n"
    "    FloatComplexNDArray::fourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_ifourier__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  int arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::ifourier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::ifourier",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::ifourier",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_ifourier",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->ifourier(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_ifourier__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::ifourier",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_ifourier",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->ifourier();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_ifourier(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_ifourier__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_ifourier__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_ifourier'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::ifourier(int) const\n"
    "    FloatComplexNDArray::ifourier() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::fourier2d",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_fourier2d",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->fourier2d();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::ifourier2d",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_ifourier2d",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->ifourier2d();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_fourierNd(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::fourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::fourierNd",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_fourierNd",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->fourierNd();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_ifourierNd(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::ifourierNd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::ifourierNd",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_ifourierNd",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->ifourierNd();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::squeeze",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_squeeze",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->squeeze();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_increment_index__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  int arg3 ;
  
  SWIG_check_num_args("FloatComplexNDArray::increment_index",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::increment_index",2,"dim_vector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::increment_index",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatComplexNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  FloatComplexNDArray::increment_index(*arg1,(dim_vector const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_increment_index__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::increment_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::increment_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::increment_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_increment_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatComplexNDArray_increment_index",2,SWIGTYPE_p_dim_vector);
  }
  
  FloatComplexNDArray::increment_index(*arg1,(dim_vector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_increment_index(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_increment_index__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_increment_index__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_increment_index'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &,int)\n"
    "    FloatComplexNDArray::increment_index(Array< octave_idx_type > &,dim_vector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_compute_index(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  dim_vector *arg2 = 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("FloatComplexNDArray::compute_index",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexNDArray::compute_index",1,"Array< octave_idx_type > &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexNDArray::compute_index",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexNDArray_compute_index",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("FloatComplexNDArray_compute_index",2,SWIGTYPE_p_dim_vector);
  }
  
  result = (octave_idx_type)FloatComplexNDArray::compute_index(*arg1,(dim_vector const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diag",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diag",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatComplexNDArray const *)arg1)->diag(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diag",1,"FloatComplexNDArray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diag",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = ((FloatComplexNDArray const *)arg1)->diag();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("FloatComplexNDArray::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::diag",1,"FloatComplexNDArray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexNDArray::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexNDArray::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_diag",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexNDArray const *)arg1)->diag(arg2,arg3);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexNDArray_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexNDArray_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexNDArray_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexNDArray_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexNDArray_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexNDArray::diag(octave_idx_type) const\n"
    "    FloatComplexNDArray::diag() const\n"
    "    FloatComplexNDArray::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexNDArray_changesign(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = (FloatComplexNDArray *) 0 ;
  FloatComplexNDArray *result = 0 ;
  
  SWIG_check_num_args("FloatComplexNDArray::changesign",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexNDArray::changesign",1,"FloatComplexNDArray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("FloatComplexNDArray_changesign",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (FloatComplexNDArray *) &(arg1)->changesign();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexNDArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatComplexNDArray(void *obj) {
FloatComplexNDArray *arg1 = (FloatComplexNDArray *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatComplexNDArray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatComplexNDArray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatComplexNDArray_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatComplexNDArray_methods[]= {
    { "any_element_is_nan", _wrap_FloatComplexNDArray_any_element_is_nan},
    { "any_element_is_inf_or_nan", _wrap_FloatComplexNDArray_any_element_is_inf_or_nan},
    { "all_elements_are_real", _wrap_FloatComplexNDArray_all_elements_are_real},
    { "all_integers", _wrap_FloatComplexNDArray_all_integers},
    { "too_large_for_float", _wrap_FloatComplexNDArray_too_large_for_float},
    { "all", _wrap_FloatComplexNDArray_all},
    { "any", _wrap_FloatComplexNDArray_any},
    { "cumprod", _wrap_FloatComplexNDArray_cumprod},
    { "cumsum", _wrap_FloatComplexNDArray_cumsum},
    { "prod", _wrap_FloatComplexNDArray_prod},
    { "dprod", _wrap_FloatComplexNDArray_dprod},
    { "sum", _wrap_FloatComplexNDArray_sum},
    { "dsum", _wrap_FloatComplexNDArray_dsum},
    { "sumsq", _wrap_FloatComplexNDArray_sumsq},
    { "concat", _wrap_FloatComplexNDArray_concat},
    { "max", _wrap_FloatComplexNDArray_max},
    { "min", _wrap_FloatComplexNDArray_min},
    { "cummax", _wrap_FloatComplexNDArray_cummax},
    { "cummin", _wrap_FloatComplexNDArray_cummin},
    { "diff", _wrap_FloatComplexNDArray_diff},
    { "insert", _wrap_FloatComplexNDArray_insert},
    { "abs", _wrap_FloatComplexNDArray_abs},
    { "isnan", _wrap_FloatComplexNDArray_isnan},
    { "isinf", _wrap_FloatComplexNDArray_isinf},
    { "isfinite", _wrap_FloatComplexNDArray_isfinite},
    { "fourier", _wrap_FloatComplexNDArray_fourier},
    { "ifourier", _wrap_FloatComplexNDArray_ifourier},
    { "fourier2d", _wrap_FloatComplexNDArray_fourier2d},
    { "ifourier2d", _wrap_FloatComplexNDArray_ifourier2d},
    { "fourierNd", _wrap_FloatComplexNDArray_fourierNd},
    { "ifourierNd", _wrap_FloatComplexNDArray_ifourierNd},
    { "squeeze", _wrap_FloatComplexNDArray_squeeze},
    { "diag", _wrap_FloatComplexNDArray_diag},
    { "changesign", _wrap_FloatComplexNDArray_changesign},
    {0,0}
};
static swig_lua_method swig_FloatComplexNDArray_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FloatComplexNDArray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatComplexNDArray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatComplexNDArray_Sf_SwigStatic_methods[]= {
    { "increment_index", _wrap_FloatComplexNDArray_increment_index},
    { "compute_index", _wrap_FloatComplexNDArray_compute_index},
    {0,0}
};
static swig_lua_class* swig_FloatComplexNDArray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatComplexNDArray_Sf_SwigStatic = {
    "FloatComplexNDArray",
    swig_FloatComplexNDArray_Sf_SwigStatic_methods,
    swig_FloatComplexNDArray_Sf_SwigStatic_attributes,
    swig_FloatComplexNDArray_Sf_SwigStatic_constants,
    swig_FloatComplexNDArray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatComplexNDArray_bases[] = {0};
static const char *swig_FloatComplexNDArray_base_names[] = {0};
static swig_lua_class _wrap_class_FloatComplexNDArray = { "FloatComplexNDArray", "FloatComplexNDArray", &SWIGTYPE_p_FloatComplexNDArray,_proxy__wrap_new_FloatComplexNDArray, swig_delete_FloatComplexNDArray, swig_FloatComplexNDArray_methods, swig_FloatComplexNDArray_attributes, &swig_FloatComplexNDArray_Sf_SwigStatic, swig_FloatComplexNDArray_meta, swig_FloatComplexNDArray_bases, swig_FloatComplexNDArray_base_names };

static int _wrap_new_FloatComplexRowVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",0,0)
  result = (FloatComplexRowVector *)new FloatComplexRowVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (FloatComplexRowVector *)new FloatComplexRowVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"octave_idx_type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",2,"FloatComplex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector(arg1,(FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector((FloatComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< FloatComplex > *arg1 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"MArray< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",1,SWIGTYPE_p_MArrayT_std__complexT_float_t_t);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector((MArray< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< FloatComplex > *arg1 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"Array< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector((Array< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::FloatComplexRowVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexRowVector::FloatComplexRowVector",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_FloatComplexRowVector",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (FloatComplexRowVector *)new FloatComplexRowVector((FloatRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexRowVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatComplexRowVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatComplexRowVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatComplexRowVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatComplexRowVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexRowVector::FloatComplexRowVector()\n"
    "    FloatComplexRowVector::FloatComplexRowVector(octave_idx_type)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(dim_vector const &)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(FloatComplexRowVector const &)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(MArray< FloatComplex > const &)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(Array< FloatComplex > const &)\n"
    "    FloatComplexRowVector::FloatComplexRowVector(FloatRowVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexRowVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexRowVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::operator ==",1,"FloatComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::operator ==",2,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector___eq",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector___eq",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = (bool)((FloatComplexRowVector const *)arg1)->operator ==((FloatComplexRowVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::insert",1,"FloatComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::insert",2,"FloatRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_insert",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_insert",2,SWIGTYPE_p_FloatRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatComplexRowVector *) &(arg1)->insert((FloatRowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::insert",1,"FloatComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::insert",2,"FloatComplexRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_insert",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_insert",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatComplexRowVector *) &(arg1)->insert((FloatComplexRowVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexRowVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexRowVector_insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexRowVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexRowVector::insert(FloatRowVector const &,octave_idx_type)\n"
    "    FloatComplexRowVector::insert(FloatComplexRowVector const &,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexRowVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  float arg2 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::fill",1,"FloatComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatComplexRowVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::fill",1,"FloatComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::fill",2,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexRowVector *) &(arg1)->fill((FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::fill",1,"FloatComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexRowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexRowVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexRowVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::fill",1,"FloatComplexRowVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::fill",2,"FloatComplex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexRowVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexRowVector_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexRowVector *) &(arg1)->fill((FloatComplex const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexRowVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexRowVector_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexRowVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexRowVector_fill__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexRowVector_fill__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexRowVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexRowVector::fill(float)\n"
    "    FloatComplexRowVector::fill(FloatComplex const &)\n"
    "    FloatComplexRowVector::fill(float,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexRowVector::fill(FloatComplex const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexRowVector_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::append",1,"FloatComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::append",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_append",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_append",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->append((FloatRowVector const &)*arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::append",1,"FloatComplexRowVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexRowVector::append",2,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_append",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_append",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->append((FloatComplexRowVector const &)*arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexRowVector_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexRowVector_append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexRowVector_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexRowVector::append(FloatRowVector const &) const\n"
    "    FloatComplexRowVector::append(FloatComplexRowVector const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexRowVector_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::hermitian",1,"FloatComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_hermitian",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->hermitian();
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::transpose",1,"FloatComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_transpose",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->transpose();
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = conj((FloatComplexRowVector const &)*arg1);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::extract",1,"FloatComplexRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_extract",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexRowVector const *)arg1)->extract(arg2,arg3);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexRowVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::extract_n",1,"FloatComplexRowVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexRowVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_extract_n",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexRowVector const *)arg1)->extract_n(arg2,arg3);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_min(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplex result;
  
  SWIG_check_num_args("FloatComplexRowVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::min",1,"FloatComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_min",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->min();
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_max(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  FloatComplex result;
  
  SWIG_check_num_args("FloatComplexRowVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::max",1,"FloatComplexRowVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_max",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexRowVector const *)arg1)->max();
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  FloatComplex *arg3 = 0 ;
  
  SWIG_check_num_args("FloatComplexRowVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::resize",1,"FloatComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::resize",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexRowVector::resize",3,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_resize",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexRowVector_resize",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->resize(arg2,(FloatComplex const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatComplexRowVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::resize",1,"FloatComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_resize",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexRowVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexRowVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexRowVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexRowVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexRowVector::resize(octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexRowVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexRowVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = (FloatComplexRowVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatComplexRowVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexRowVector::clear",1,"FloatComplexRowVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexRowVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexRowVector_clear",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatComplexRowVector(void *obj) {
FloatComplexRowVector *arg1 = (FloatComplexRowVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatComplexRowVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatComplexRowVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatComplexRowVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatComplexRowVector_methods[]= {
    { "__eq", _wrap_FloatComplexRowVector___eq},
    { "insert", _wrap_FloatComplexRowVector_insert},
    { "fill", _wrap_FloatComplexRowVector_fill},
    { "append", _wrap_FloatComplexRowVector_append},
    { "hermitian", _wrap_FloatComplexRowVector_hermitian},
    { "transpose", _wrap_FloatComplexRowVector_transpose},
    { "extract", _wrap_FloatComplexRowVector_extract},
    { "extract_n", _wrap_FloatComplexRowVector_extract_n},
    { "min", _wrap_FloatComplexRowVector_min},
    { "max", _wrap_FloatComplexRowVector_max},
    { "resize", _wrap_FloatComplexRowVector_resize},
    { "clear", _wrap_FloatComplexRowVector_clear},
    {0,0}
};
static swig_lua_method swig_FloatComplexRowVector_meta[] = {
    { "__eq", _wrap_FloatComplexRowVector___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatComplexRowVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatComplexRowVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatComplexRowVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatComplexRowVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatComplexRowVector_Sf_SwigStatic = {
    "FloatComplexRowVector",
    swig_FloatComplexRowVector_Sf_SwigStatic_methods,
    swig_FloatComplexRowVector_Sf_SwigStatic_attributes,
    swig_FloatComplexRowVector_Sf_SwigStatic_constants,
    swig_FloatComplexRowVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatComplexRowVector_bases[] = {0};
static const char *swig_FloatComplexRowVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatComplexRowVector = { "FloatComplexRowVector", "FloatComplexRowVector", &SWIGTYPE_p_FloatComplexRowVector,_proxy__wrap_new_FloatComplexRowVector, swig_delete_FloatComplexRowVector, swig_FloatComplexRowVector_methods, swig_FloatComplexRowVector_attributes, &swig_FloatComplexRowVector_Sf_SwigStatic, swig_FloatComplexRowVector_meta, swig_FloatComplexRowVector_bases, swig_FloatComplexRowVector_base_names };

static int _wrap_new_FloatComplexColumnVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",0,0)
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"octave_idx_type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",2,"FloatComplex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector(arg1,(FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector((FloatComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  MArray< FloatComplex > *arg1 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"MArray< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",1,SWIGTYPE_p_MArrayT_std__complexT_float_t_t);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector((MArray< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Array< FloatComplex > *arg1 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"Array< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector((Array< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::FloatComplexColumnVector",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexColumnVector::FloatComplexColumnVector",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_FloatComplexColumnVector",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (FloatComplexColumnVector *)new FloatComplexColumnVector((FloatColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexColumnVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatComplexColumnVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_FloatComplexColumnVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatComplexColumnVector__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatComplexColumnVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector()\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(octave_idx_type)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(dim_vector const &)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(FloatComplexColumnVector const &)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(MArray< FloatComplex > const &)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(Array< FloatComplex > const &)\n"
    "    FloatComplexColumnVector::FloatComplexColumnVector(FloatColumnVector const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexColumnVector___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexColumnVector::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::operator ==",1,"FloatComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::operator ==",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector___eq",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector___eq",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = (bool)((FloatComplexColumnVector const *)arg1)->operator ==((FloatComplexColumnVector const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::insert",1,"FloatComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::insert",2,"FloatColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_insert",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_insert",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatComplexColumnVector *) &(arg1)->insert((FloatColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::insert",1,"FloatComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::insert",2,"FloatComplexColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::insert",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_insert",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_insert",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = (FloatComplexColumnVector *) &(arg1)->insert((FloatComplexColumnVector const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_insert(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexColumnVector_insert__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexColumnVector_insert__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexColumnVector_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexColumnVector::insert(FloatColumnVector const &,octave_idx_type)\n"
    "    FloatComplexColumnVector::insert(FloatComplexColumnVector const &,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexColumnVector_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  float arg2 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::fill",1,"FloatComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatComplexColumnVector *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::fill",1,"FloatComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::fill",2,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexColumnVector *) &(arg1)->fill((FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::fill",1,"FloatComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexColumnVector *) &(arg1)->fill(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexColumnVector *result = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::fill",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::fill",1,"FloatComplexColumnVector *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::fill",2,"FloatComplex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexColumnVector::fill",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexColumnVector *) &(arg1)->fill((FloatComplex const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexColumnVector,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_fill(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexColumnVector_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexColumnVector_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexColumnVector_fill__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexColumnVector_fill__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexColumnVector_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexColumnVector::fill(float)\n"
    "    FloatComplexColumnVector::fill(FloatComplex const &)\n"
    "    FloatComplexColumnVector::fill(float,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexColumnVector::fill(FloatComplex const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexColumnVector_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::stack",1,"FloatComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::stack",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_stack",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_stack",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->stack((FloatColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::stack",1,"FloatComplexColumnVector const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexColumnVector::stack",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_stack",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_stack",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->stack((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexColumnVector_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexColumnVector_stack__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexColumnVector_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexColumnVector::stack(FloatColumnVector const &) const\n"
    "    FloatComplexColumnVector::stack(FloatComplexColumnVector const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexColumnVector_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::hermitian",1,"FloatComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_hermitian",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->hermitian();
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::transpose",1,"FloatComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_transpose",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->transpose();
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = conj((FloatComplexColumnVector const &)*arg1);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::extract",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::extract",1,"FloatComplexColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::extract",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_extract",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexColumnVector const *)arg1)->extract(arg2,arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::extract_n",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::extract_n",1,"FloatComplexColumnVector const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexColumnVector::extract_n",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_extract_n",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexColumnVector const *)arg1)->extract_n(arg2,arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_min(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplex result;
  
  SWIG_check_num_args("FloatComplexColumnVector::min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::min",1,"FloatComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_min",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->min();
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_max(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatComplex result;
  
  SWIG_check_num_args("FloatComplexColumnVector::max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::max",1,"FloatComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_max",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->max();
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("FloatComplexColumnVector::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::abs",1,"FloatComplexColumnVector const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_abs",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexColumnVector const *)arg1)->abs();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  FloatComplex *arg3 = 0 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::resize",1,"FloatComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::resize",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexColumnVector::resize",3,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_resize",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_resize",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->resize(arg2,(FloatComplex const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::resize",1,"FloatComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_resize",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexColumnVector_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexColumnVector_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexColumnVector_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexColumnVector_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexColumnVector::resize(octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexColumnVector::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexColumnVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("FloatComplexColumnVector::clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexColumnVector::clear",1,"FloatComplexColumnVector *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexColumnVector::clear",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexColumnVector_clear",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FloatComplexColumnVector(void *obj) {
FloatComplexColumnVector *arg1 = (FloatComplexColumnVector *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatComplexColumnVector(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatComplexColumnVector);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatComplexColumnVector_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatComplexColumnVector_methods[]= {
    { "__eq", _wrap_FloatComplexColumnVector___eq},
    { "insert", _wrap_FloatComplexColumnVector_insert},
    { "fill", _wrap_FloatComplexColumnVector_fill},
    { "stack", _wrap_FloatComplexColumnVector_stack},
    { "hermitian", _wrap_FloatComplexColumnVector_hermitian},
    { "transpose", _wrap_FloatComplexColumnVector_transpose},
    { "extract", _wrap_FloatComplexColumnVector_extract},
    { "extract_n", _wrap_FloatComplexColumnVector_extract_n},
    { "min", _wrap_FloatComplexColumnVector_min},
    { "max", _wrap_FloatComplexColumnVector_max},
    { "abs", _wrap_FloatComplexColumnVector_abs},
    { "resize", _wrap_FloatComplexColumnVector_resize},
    { "clear", _wrap_FloatComplexColumnVector_clear},
    {0,0}
};
static swig_lua_method swig_FloatComplexColumnVector_meta[] = {
    { "__eq", _wrap_FloatComplexColumnVector___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatComplexColumnVector_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatComplexColumnVector_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatComplexColumnVector_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatComplexColumnVector_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatComplexColumnVector_Sf_SwigStatic = {
    "FloatComplexColumnVector",
    swig_FloatComplexColumnVector_Sf_SwigStatic_methods,
    swig_FloatComplexColumnVector_Sf_SwigStatic_attributes,
    swig_FloatComplexColumnVector_Sf_SwigStatic_constants,
    swig_FloatComplexColumnVector_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatComplexColumnVector_bases[] = {0};
static const char *swig_FloatComplexColumnVector_base_names[] = {0};
static swig_lua_class _wrap_class_FloatComplexColumnVector = { "FloatComplexColumnVector", "FloatComplexColumnVector", &SWIGTYPE_p_FloatComplexColumnVector,_proxy__wrap_new_FloatComplexColumnVector, swig_delete_FloatComplexColumnVector, swig_FloatComplexColumnVector_methods, swig_FloatComplexColumnVector_attributes, &swig_FloatComplexColumnVector_Sf_SwigStatic, swig_FloatComplexColumnVector_meta, swig_FloatComplexColumnVector_bases, swig_FloatComplexColumnVector_base_names };

static int _wrap_new_FloatComplexMatrix__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",0,0)
  result = (FloatComplexMatrix *)new FloatComplexMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatComplexMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",2,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (FloatComplexMatrix *)new FloatComplexMatrix(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_idx_type arg2 ;
  FloatComplex *arg3 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"octave_idx_type");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",3,"FloatComplex const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",3,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix(arg1,arg2,(FloatComplex const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((dim_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  dim_vector *arg1 = 0 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"dim_vector const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",2,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_dim_vector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((dim_vector const &)*arg1,(FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  FloatDiagMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< float > *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"MDiagArray2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_MDiagArray2T_float_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((MDiagArray2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< float > *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"DiagArray2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_float_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_DiagArray2T_float_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((DiagArray2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexDiagMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexDiagMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatComplexDiagMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatComplexDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  MDiagArray2< FloatComplex > *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"MDiagArray2< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_MDiagArray2T_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_MDiagArray2T_std__complexT_float_t_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((MDiagArray2< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< FloatComplex > *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"DiagArray2< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((DiagArray2< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"boolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_boolMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((boolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"charMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_charMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((charMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::FloatComplexMatrix",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",1,"FloatMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::FloatComplexMatrix",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_FloatComplexMatrix",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (FloatComplexMatrix *)new FloatComplexMatrix((FloatMatrix const &)*arg1,(FloatMatrix const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FloatComplexMatrix(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_FloatComplexMatrix__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_15(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_16(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_MDiagArray2T_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_17(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_18(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_19(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_FloatComplexMatrix__SWIG_20(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatComplexMatrix__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_FloatComplexMatrix__SWIG_21(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_FloatComplexMatrix__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_FloatComplexMatrix__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FloatComplexMatrix'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::FloatComplexMatrix()\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatComplexMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(octave_idx_type,octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(dim_vector const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(dim_vector const &,FloatComplex const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatRowVector const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatColumnVector const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatDiagMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(MDiagArray2< float > const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(DiagArray2< float > const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatComplexRowVector const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatComplexColumnVector const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatComplexDiagMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(MDiagArray2< FloatComplex > const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(DiagArray2< FloatComplex > const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(boolMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(charMatrix const &)\n"
    "    FloatComplexMatrix::FloatComplexMatrix(FloatMatrix const &,FloatMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix___eq(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexMatrix::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::operator ==",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::operator ==",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix___eq",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix___eq",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = (bool)((FloatComplexMatrix const *)arg1)->operator ==((FloatComplexMatrix const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_ishermitian(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexMatrix::ishermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::ishermitian",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_ishermitian",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = (bool)((FloatComplexMatrix const *)arg1)->ishermitian();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatRowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatDiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatDiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatComplexMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatComplexMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatComplexRowVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatComplexRowVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatComplexColumnVector const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatComplexColumnVector const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexDiagMatrix *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::insert",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::insert",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::insert",2,"FloatComplexDiagMatrix const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::insert",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::insert",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_insert",2,SWIGTYPE_p_FloatComplexDiagMatrix);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = (FloatComplexMatrix *) &(arg1)->insert((FloatComplexDiagMatrix const &)*arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_insert(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_insert__SWIG_7(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_insert'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::insert(FloatMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatRowVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatDiagMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatComplexMatrix const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatComplexRowVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatComplexColumnVector const &,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::insert(FloatComplexDiagMatrix const &,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_fill__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  float arg2 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fill",1,"FloatComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::fill",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (FloatComplexMatrix *) &(arg1)->fill(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_fill__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplex *arg2 = 0 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::fill",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fill",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::fill",2,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (FloatComplexMatrix *) &(arg1)->fill((FloatComplex const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_fill__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  float arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fill",1,"FloatComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::fill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatComplexMatrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("FloatComplexMatrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (FloatComplexMatrix *) &(arg1)->fill(arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_fill__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplex *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  octave_idx_type arg6 ;
  FloatComplexMatrix *result = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::fill",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fill",1,"FloatComplexMatrix *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::fill",2,"FloatComplex const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::fill",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::fill",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatComplexMatrix::fill",5,"octave_idx_type");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("FloatComplexMatrix::fill",6,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fill",2,SWIGTYPE_p_std__complexT_float_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  arg6 = (octave_idx_type)lua_tonumber(L, 6);
  result = (FloatComplexMatrix *) &(arg1)->fill((FloatComplex const &)*arg2,arg3,arg4,arg5,arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_FloatComplexMatrix,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_fill(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_fill__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_fill__SWIG_0(L);
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_fill__SWIG_3(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_fill__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_fill'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::fill(float)\n"
    "    FloatComplexMatrix::fill(FloatComplex const &)\n"
    "    FloatComplexMatrix::fill(float,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n"
    "    FloatComplexMatrix::fill(FloatComplex const &,octave_idx_type,octave_idx_type,octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatRowVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatColumnVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatDiagMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatComplexRowVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexDiagMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::append",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::append",2,"FloatComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_append",2,SWIGTYPE_p_FloatComplexDiagMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->append((FloatComplexDiagMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_append__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::append(FloatMatrix const &) const\n"
    "    FloatComplexMatrix::append(FloatRowVector const &) const\n"
    "    FloatComplexMatrix::append(FloatColumnVector const &) const\n"
    "    FloatComplexMatrix::append(FloatDiagMatrix const &) const\n"
    "    FloatComplexMatrix::append(FloatComplexMatrix const &) const\n"
    "    FloatComplexMatrix::append(FloatComplexRowVector const &) const\n"
    "    FloatComplexMatrix::append(FloatComplexColumnVector const &) const\n"
    "    FloatComplexMatrix::append(FloatComplexDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatRowVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatRowVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatRowVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatColumnVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatDiagMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatDiagMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexRowVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatComplexRowVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexDiagMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::stack",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::stack",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::stack",2,"FloatComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexDiagMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_stack",2,SWIGTYPE_p_FloatComplexDiagMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->stack((FloatComplexDiagMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_stack(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_6(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_stack__SWIG_7(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_stack'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::stack(FloatMatrix const &) const\n"
    "    FloatComplexMatrix::stack(FloatRowVector const &) const\n"
    "    FloatComplexMatrix::stack(FloatColumnVector const &) const\n"
    "    FloatComplexMatrix::stack(FloatDiagMatrix const &) const\n"
    "    FloatComplexMatrix::stack(FloatComplexMatrix const &) const\n"
    "    FloatComplexMatrix::stack(FloatComplexRowVector const &) const\n"
    "    FloatComplexMatrix::stack(FloatComplexColumnVector const &) const\n"
    "    FloatComplexMatrix::stack(FloatComplexDiagMatrix const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_hermitian(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::hermitian",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::hermitian",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_hermitian",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->hermitian();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_transpose(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::transpose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::transpose",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_transpose",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->transpose();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("conj",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("conj",1,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("conj",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = conj((FloatComplexMatrix const &)*arg1);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_conj(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_conj__SWIG_4(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'conj'\n"
    "  Possible C/C++ prototypes are:\n"
    "    conj(ComplexNDArray const &)\n"
    "    conj(ComplexRowVector const &)\n"
    "    conj(ComplexColumnVector const &)\n"
    "    conj(ComplexMatrix const &)\n"
    "    conj(FloatComplexNDArray const &)\n"
    "    conj(FloatComplexRowVector const &)\n"
    "    conj(FloatComplexColumnVector const &)\n"
    "    conj(FloatComplexMatrix const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_extract(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::extract",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::extract",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::extract",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::extract",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::extract",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatComplexMatrix::extract",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_extract",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((FloatComplexMatrix const *)arg1)->extract(arg2,arg3,arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_extract_n(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  octave_idx_type arg5 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::extract_n",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::extract_n",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::extract_n",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::extract_n",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("FloatComplexMatrix::extract_n",4,"octave_idx_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("FloatComplexMatrix::extract_n",5,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_extract_n",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  arg5 = (octave_idx_type)lua_tonumber(L, 5);
  result = ((FloatComplexMatrix const *)arg1)->extract_n(arg2,arg3,arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::row",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::row",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->row(arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::column",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::column",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->column(arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplex *arg4 = 0 ;
  
  SWIG_check_num_args("FloatComplexMatrix::resize",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::resize",1,"FloatComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::resize",3,"octave_idx_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::resize",4,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_resize",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_resize",4,SWIGTYPE_p_std__complexT_float_t);
  }
  
  (arg1)->resize(arg2,arg3,(FloatComplex const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  
  SWIG_check_num_args("FloatComplexMatrix::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::resize",1,"FloatComplexMatrix *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::resize",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::resize",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_resize",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  (arg1)->resize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_resize(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_resize__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_resize__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::resize(octave_idx_type,octave_idx_type,FloatComplex const &)\n"
    "    FloatComplexMatrix::resize(octave_idx_type,octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatComplexMatrix::inverse",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatComplexMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3,arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatComplexMatrix::inverse",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3,arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::inverse",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatComplexMatrix::inverse",5,"bool");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("FloatComplexMatrix::inverse",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (lua_toboolean(L, 6)!=0);
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::inverse",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatComplexMatrix::inverse",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::inverse",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::inverse",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::inverse",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::inverse",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::inverse",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_inverse",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->inverse(*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_inverse(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_inverse__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_inverse__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_inverse__SWIG_5(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_inverse__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_inverse__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_inverse__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_inverse__SWIG_9(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_inverse__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_inverse__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_inverse__SWIG_7(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::inverse() const\n"
    "    FloatComplexMatrix::inverse(octave_idx_type &) const\n"
    "    FloatComplexMatrix::inverse(octave_idx_type &,float &,bool,bool) const\n"
    "    FloatComplexMatrix::inverse(octave_idx_type &,float &,bool) const\n"
    "    FloatComplexMatrix::inverse(octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::inverse(MatrixType &) const\n"
    "    FloatComplexMatrix::inverse(MatrixType &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::inverse(MatrixType &,octave_idx_type &,float &,bool,bool) const\n"
    "    FloatComplexMatrix::inverse(MatrixType &,octave_idx_type &,float &,bool) const\n"
    "    FloatComplexMatrix::inverse(MatrixType &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_pseudo_inverse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  float arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::pseudo_inverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::pseudo_inverse",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::pseudo_inverse",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_pseudo_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->pseudo_inverse(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_pseudo_inverse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::pseudo_inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::pseudo_inverse",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_pseudo_inverse",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->pseudo_inverse();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_pseudo_inverse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_pseudo_inverse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_pseudo_inverse__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_pseudo_inverse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::pseudo_inverse(float) const\n"
    "    FloatComplexMatrix::pseudo_inverse() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_fourier(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::fourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fourier",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fourier",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->fourier();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_ifourier(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::ifourier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::ifourier",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_ifourier",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->ifourier();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_fourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::fourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::fourier2d",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_fourier2d",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->fourier2d();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_ifourier2d(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::ifourier2d",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::ifourier2d",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_ifourier2d",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->ifourier2d();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->determinant();
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::determinant",2,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->determinant(*arg2);
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  bool arg4 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::determinant",3,"float &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("FloatComplexMatrix::determinant",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",3,SWIGTYPE_p_float);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((FloatComplexMatrix const *)arg1)->determinant(*arg2,*arg3,arg4);
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type *arg2 = 0 ;
  float *arg3 = 0 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::determinant",2,"octave_idx_type &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::determinant",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",2,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",3,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->determinant(*arg2,*arg3);
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  bool arg5 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::determinant",4,"float &");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("FloatComplexMatrix::determinant",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",4,SWIGTYPE_p_float);
  }
  
  arg5 = (lua_toboolean(L, 5)!=0);
  result = ((FloatComplexMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexDET result;
  
  SWIG_check_num_args("FloatComplexMatrix::determinant",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::determinant",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::determinant",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::determinant",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::determinant",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_determinant",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->determinant(*arg2,*arg3,*arg4);
  {
    FloatComplexDET * resultptr = new FloatComplexDET((const FloatComplexDET &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDET,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_determinant(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_determinant__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_determinant__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_determinant__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_determinant__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_determinant__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_determinant__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_determinant'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::determinant() const\n"
    "    FloatComplexMatrix::determinant(octave_idx_type &) const\n"
    "    FloatComplexMatrix::determinant(octave_idx_type &,float &,bool) const\n"
    "    FloatComplexMatrix::determinant(octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::determinant(MatrixType &,octave_idx_type &,float &,bool) const\n"
    "    FloatComplexMatrix::determinant(MatrixType &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_rcond__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  float result;
  
  SWIG_check_num_args("FloatComplexMatrix::rcond",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::rcond",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_rcond",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = (float)((FloatComplexMatrix const *)arg1)->rcond();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_rcond__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("FloatComplexMatrix::rcond",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::rcond",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::rcond",2,"MatrixType &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_rcond",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_rcond",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (float)((FloatComplexMatrix const *)arg1)->rcond(*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_rcond(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_rcond__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_rcond__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_rcond'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::rcond() const\n"
    "    FloatComplexMatrix::rcond(MatrixType &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("FloatComplexMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  blas_trans_type arg8 ;
  blas_trans_type *argp8 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"bool");
  if(!lua_isuserdata(L,8)) SWIG_fail_arg("FloatComplexMatrix::solve",8,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,8,(void**)&argp8,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",8,SWIGTYPE_p_blas_trans_type);
  }
  arg8 = *argp8;
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7,arg8);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  bool arg7 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isboolean(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  arg7 = (lua_toboolean(L, 7)!=0);
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexMatrix *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexMatrix const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg7 ;
  blas_trans_type *argp7 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,7)) SWIG_fail_arg("FloatComplexMatrix::solve",7,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,7,(void**)&argp7,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",7,SWIGTYPE_p_blas_trans_type);
  }
  arg7 = *argp7;
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5,arg6,arg7);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  MatrixType *arg2 = 0 ;
  FloatComplexColumnVector *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg6 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"MatrixType &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"float &");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_MatrixType);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve(*arg2,(FloatComplexColumnVector const &)*arg3,*arg4,*arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_24(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_25(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_26(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_27(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_28(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_29(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_30(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_31(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_32(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_33(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_34(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_35(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_36(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_37(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_38(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_39(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_40(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  blas_trans_type arg6 ;
  blas_trans_type *argp6 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("FloatComplexMatrix::solve",6,"blas_trans_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_blas_trans_type,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",6,SWIGTYPE_p_blas_trans_type);
  }
  arg6 = *argp6;
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,arg5,arg6);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve__SWIG_41(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  float *arg4 = 0 ;
  FloatComplexMatrix::solve_singularity_handler arg5 = (FloatComplexMatrix::solve_singularity_handler) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::solve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::solve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::solve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::solve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::solve",4,"float &");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("FloatComplexMatrix::solve",5,"FloatComplexMatrix::solve_singularity_handler");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_f_float__void,0))){
    SWIG_fail_ptr("FloatComplexMatrix_solve",5,SWIGTYPE_p_f_float__void);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->solve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_solve(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_solve__SWIG_22(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_solve__SWIG_27(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_solve__SWIG_32(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_solve__SWIG_37(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_23(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_28(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_33(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_17(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_solve__SWIG_38(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_18(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_29(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_13(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_34(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_24(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_solve__SWIG_39(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_8(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_26(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_19(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_36(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_14(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_31(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_solve__SWIG_41(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_35(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_16(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_30(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_25(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_21(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (SWIG_isptrtype(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (lua_isuserdata(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_40(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                return _wrap_FloatComplexMatrix_solve__SWIG_11(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FloatComplexMatrix_solve__SWIG_15(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_FloatComplexMatrix_solve__SWIG_4(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  void *ptr;
                  if (lua_isuserdata(L,argv[6])==0 || SWIG_ConvertPtr(L,argv[6], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                    _v = 0;
                  } else {
                    _v = 1;
                  }
                }
                if (_v) {
                  return _wrap_FloatComplexMatrix_solve__SWIG_20(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  return _wrap_FloatComplexMatrix_solve__SWIG_10(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_FloatComplexMatrix_solve__SWIG_3(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_f_float__void, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isboolean(L,argv[6]);
                }
                if (_v) {
                  {
                    void *ptr;
                    if (lua_isuserdata(L,argv[7])==0 || SWIG_ConvertPtr(L,argv[7], (void **) &ptr, SWIGTYPE_p_blas_trans_type, SWIG_POINTER_NO_NULL)) {
                      _v = 0;
                    } else {
                      _v = 1;
                    }
                  }
                  if (_v) {
                    return _wrap_FloatComplexMatrix_solve__SWIG_9(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_solve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,bool) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,bool,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,bool) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatColumnVector const &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexColumnVector const &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(MatrixType &,FloatComplexColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(FloatMatrix const &) const\n"
    "    FloatComplexMatrix::solve(FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(FloatMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(FloatMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(FloatMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(FloatComplexMatrix const &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(FloatComplexMatrix const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(FloatColumnVector const &) const\n"
    "    FloatComplexMatrix::solve(FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(FloatColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n"
    "    FloatComplexMatrix::solve(FloatComplexColumnVector const &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler,blas_trans_type) const\n"
    "    FloatComplexMatrix::solve(FloatComplexColumnVector const &,octave_idx_type &,float &,FloatComplexMatrix::solve_singularity_handler) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3,*arg4);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexMatrix const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector *arg2 = 0 ;
  octave_idx_type *arg3 = 0 ;
  octave_idx_type *arg4 = 0 ;
  float *arg5 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::lssolve",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::lssolve",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::lssolve",2,"FloatComplexColumnVector const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("FloatComplexMatrix::lssolve",3,"octave_idx_type &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("FloatComplexMatrix::lssolve",4,"octave_idx_type &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("FloatComplexMatrix::lssolve",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",2,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",3,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_long,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",4,SWIGTYPE_p_long);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("FloatComplexMatrix_lssolve",5,SWIGTYPE_p_float);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->lssolve((FloatComplexColumnVector const &)*arg2,*arg3,*arg4,*arg5);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_lssolve(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_lssolve__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_lssolve__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_lssolve__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_lssolve__SWIG_12(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_lssolve__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_lssolve__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_lssolve__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_lssolve__SWIG_13(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_lssolve__SWIG_10(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_lssolve__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_lssolve__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_FloatComplexMatrix_lssolve__SWIG_14(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_lssolve__SWIG_7(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_lssolve__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_lssolve__SWIG_11(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_long, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_FloatComplexMatrix_lssolve__SWIG_15(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_lssolve'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::lssolve(FloatMatrix const &) const\n"
    "    FloatComplexMatrix::lssolve(FloatMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatMatrix const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexMatrix const &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexMatrix const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::lssolve(FloatColumnVector const &) const\n"
    "    FloatComplexMatrix::lssolve(FloatColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatColumnVector const &,octave_idx_type &,octave_idx_type &,float &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexColumnVector const &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &,octave_idx_type &) const\n"
    "    FloatComplexMatrix::lssolve(FloatComplexColumnVector const &,octave_idx_type &,octave_idx_type &,float &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::all",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_all",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->all(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::all",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_all",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->all();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::all(int) const\n"
    "    FloatComplexMatrix::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::any",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_any",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->any(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::any",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_any",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->any();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::any(int) const\n"
    "    FloatComplexMatrix::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_cumprod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::cumprod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::cumprod",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::cumprod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_cumprod",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->cumprod(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_cumprod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::cumprod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::cumprod",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_cumprod",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->cumprod();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_cumprod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_cumprod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_cumprod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_cumprod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::cumprod(int) const\n"
    "    FloatComplexMatrix::cumprod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_cumsum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::cumsum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::cumsum",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::cumsum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_cumsum",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->cumsum(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_cumsum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::cumsum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::cumsum",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_cumsum",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->cumsum();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_cumsum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_cumsum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_cumsum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_cumsum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::cumsum(int) const\n"
    "    FloatComplexMatrix::cumsum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_prod__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::prod",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::prod",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::prod",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_prod",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->prod(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_prod__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::prod",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::prod",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_prod",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->prod();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_prod(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_prod__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_prod__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_prod'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::prod(int) const\n"
    "    FloatComplexMatrix::prod() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_sum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::sum",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::sum",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::sum",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_sum",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->sum(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_sum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::sum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::sum",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_sum",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->sum();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_sum(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_sum__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_sum__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_sum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::sum(int) const\n"
    "    FloatComplexMatrix::sum() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_sumsq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  int arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::sumsq",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::sumsq",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::sumsq",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_sumsq",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->sumsq(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_sumsq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::sumsq",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::sumsq",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_sumsq",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->sumsq();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_sumsq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_sumsq__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_sumsq__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_sumsq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::sumsq(int) const\n"
    "    FloatComplexMatrix::sumsq() const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_abs(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::abs",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_abs",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->abs();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::diag",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_diag",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((FloatComplexMatrix const *)arg1)->diag(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::diag",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_diag",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->diag();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  FloatComplexDiagMatrix result;
  
  SWIG_check_num_args("FloatComplexMatrix::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::diag",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("FloatComplexMatrix::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_diag",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((FloatComplexMatrix const *)arg1)->diag(arg2,arg3);
  {
    FloatComplexDiagMatrix * resultptr = new FloatComplexDiagMatrix((const FloatComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_FloatComplexMatrix_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::diag(octave_idx_type) const\n"
    "    FloatComplexMatrix::diag() const\n"
    "    FloatComplexMatrix::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_row_is_real_only(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexMatrix::row_is_real_only",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row_is_real_only",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::row_is_real_only",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_is_real_only",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (bool)((FloatComplexMatrix const *)arg1)->row_is_real_only(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column_is_real_only(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  octave_idx_type arg2 ;
  bool result;
  
  SWIG_check_num_args("FloatComplexMatrix::column_is_real_only",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column_is_real_only",1,"FloatComplexMatrix const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("FloatComplexMatrix::column_is_real_only",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_is_real_only",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (bool)((FloatComplexMatrix const *)arg1)->column_is_real_only(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::row_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row_min",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_min",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->row_min();
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::row_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row_max",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_max",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->row_max();
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::row_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row_min",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::row_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_min",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->row_min(*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_row_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_row_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_row_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::row_min() const\n"
    "    FloatComplexMatrix::row_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_row_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::row_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::row_max",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::row_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_max",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_row_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->row_max(*arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_row_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_row_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_row_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_row_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::row_max() const\n"
    "    FloatComplexMatrix::row_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_column_min__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::column_min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column_min",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_min",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->column_min();
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column_max__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::column_max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column_max",1,"FloatComplexMatrix const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_max",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->column_max();
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column_min__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::column_min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column_min",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::column_min",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_min",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_min",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->column_min(*arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column_min(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_column_min__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_column_min__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_column_min'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::column_min() const\n"
    "    FloatComplexMatrix::column_min(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_FloatComplexMatrix_column_max__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = (FloatComplexMatrix *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("FloatComplexMatrix::column_max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("FloatComplexMatrix::column_max",1,"FloatComplexMatrix const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("FloatComplexMatrix::column_max",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_max",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("FloatComplexMatrix_column_max",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((FloatComplexMatrix const *)arg1)->column_max(*arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FloatComplexMatrix_column_max(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_FloatComplexMatrix_column_max__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_FloatComplexMatrix_column_max__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'FloatComplexMatrix_column_max'\n"
    "  Possible C/C++ prototypes are:\n"
    "    FloatComplexMatrix::column_max() const\n"
    "    FloatComplexMatrix::column_max(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_FloatComplexMatrix(void *obj) {
FloatComplexMatrix *arg1 = (FloatComplexMatrix *) obj;
delete arg1;
}
static int _proxy__wrap_new_FloatComplexMatrix(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FloatComplexMatrix);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FloatComplexMatrix_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FloatComplexMatrix_methods[]= {
    { "__eq", _wrap_FloatComplexMatrix___eq},
    { "ishermitian", _wrap_FloatComplexMatrix_ishermitian},
    { "insert", _wrap_FloatComplexMatrix_insert},
    { "fill", _wrap_FloatComplexMatrix_fill},
    { "append", _wrap_FloatComplexMatrix_append},
    { "stack", _wrap_FloatComplexMatrix_stack},
    { "hermitian", _wrap_FloatComplexMatrix_hermitian},
    { "transpose", _wrap_FloatComplexMatrix_transpose},
    { "extract", _wrap_FloatComplexMatrix_extract},
    { "extract_n", _wrap_FloatComplexMatrix_extract_n},
    { "row", _wrap_FloatComplexMatrix_row},
    { "column", _wrap_FloatComplexMatrix_column},
    { "resize", _wrap_FloatComplexMatrix_resize},
    { "inverse", _wrap_FloatComplexMatrix_inverse},
    { "pseudo_inverse", _wrap_FloatComplexMatrix_pseudo_inverse},
    { "fourier", _wrap_FloatComplexMatrix_fourier},
    { "ifourier", _wrap_FloatComplexMatrix_ifourier},
    { "fourier2d", _wrap_FloatComplexMatrix_fourier2d},
    { "ifourier2d", _wrap_FloatComplexMatrix_ifourier2d},
    { "determinant", _wrap_FloatComplexMatrix_determinant},
    { "rcond", _wrap_FloatComplexMatrix_rcond},
    { "solve", _wrap_FloatComplexMatrix_solve},
    { "lssolve", _wrap_FloatComplexMatrix_lssolve},
    { "all", _wrap_FloatComplexMatrix_all},
    { "any", _wrap_FloatComplexMatrix_any},
    { "cumprod", _wrap_FloatComplexMatrix_cumprod},
    { "cumsum", _wrap_FloatComplexMatrix_cumsum},
    { "prod", _wrap_FloatComplexMatrix_prod},
    { "sum", _wrap_FloatComplexMatrix_sum},
    { "sumsq", _wrap_FloatComplexMatrix_sumsq},
    { "abs", _wrap_FloatComplexMatrix_abs},
    { "diag", _wrap_FloatComplexMatrix_diag},
    { "row_is_real_only", _wrap_FloatComplexMatrix_row_is_real_only},
    { "column_is_real_only", _wrap_FloatComplexMatrix_column_is_real_only},
    { "row_min", _wrap_FloatComplexMatrix_row_min},
    { "row_max", _wrap_FloatComplexMatrix_row_max},
    { "column_min", _wrap_FloatComplexMatrix_column_min},
    { "column_max", _wrap_FloatComplexMatrix_column_max},
    {0,0}
};
static swig_lua_method swig_FloatComplexMatrix_meta[] = {
    { "__eq", _wrap_FloatComplexMatrix___eq},
    {0,0}
};

static swig_lua_attribute swig_FloatComplexMatrix_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FloatComplexMatrix_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FloatComplexMatrix_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FloatComplexMatrix_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FloatComplexMatrix_Sf_SwigStatic = {
    "FloatComplexMatrix",
    swig_FloatComplexMatrix_Sf_SwigStatic_methods,
    swig_FloatComplexMatrix_Sf_SwigStatic_attributes,
    swig_FloatComplexMatrix_Sf_SwigStatic_constants,
    swig_FloatComplexMatrix_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FloatComplexMatrix_bases[] = {0,0};
static const char *swig_FloatComplexMatrix_base_names[] = {"FloatComplexNDArray *",0};
static swig_lua_class _wrap_class_FloatComplexMatrix = { "FloatComplexMatrix", "FloatComplexMatrix", &SWIGTYPE_p_FloatComplexMatrix,_proxy__wrap_new_FloatComplexMatrix, swig_delete_FloatComplexMatrix, swig_FloatComplexMatrix_methods, swig_FloatComplexMatrix_attributes, &swig_FloatComplexMatrix_Sf_SwigStatic, swig_FloatComplexMatrix_meta, swig_FloatComplexMatrix_bases, swig_FloatComplexMatrix_base_names };

static int _wrap_octave_value_assign_op_to_binary_op(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::assign_op arg1 ;
  octave_value::binary_op result;
  
  SWIG_check_num_args("octave_value::assign_op_to_binary_op",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::assign_op_to_binary_op",1,"octave_value::assign_op");
  arg1 = (octave_value::assign_op)(int)lua_tonumber(L, 1);
  result = (octave_value::binary_op)octave_value::assign_op_to_binary_op(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_binary_op_to_assign_op(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::binary_op arg1 ;
  octave_value::assign_op result;
  
  SWIG_check_num_args("octave_value::binary_op_to_assign_op",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::binary_op_to_assign_op",1,"octave_value::binary_op");
  arg1 = (octave_value::binary_op)(int)lua_tonumber(L, 1);
  result = (octave_value::assign_op)octave_value::binary_op_to_assign_op(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_unary_op_as_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::unary_op arg1 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::unary_op_as_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::unary_op_as_string",1,"octave_value::unary_op");
  arg1 = (octave_value::unary_op)(int)lua_tonumber(L, 1);
  result = octave_value::unary_op_as_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_unary_op_fcn_name(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::unary_op arg1 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::unary_op_fcn_name",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::unary_op_fcn_name",1,"octave_value::unary_op");
  arg1 = (octave_value::unary_op)(int)lua_tonumber(L, 1);
  result = octave_value::unary_op_fcn_name(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_binary_op_as_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::binary_op arg1 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::binary_op_as_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::binary_op_as_string",1,"octave_value::binary_op");
  arg1 = (octave_value::binary_op)(int)lua_tonumber(L, 1);
  result = octave_value::binary_op_as_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_binary_op_fcn_name(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::binary_op arg1 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::binary_op_fcn_name",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::binary_op_fcn_name",1,"octave_value::binary_op");
  arg1 = (octave_value::binary_op)(int)lua_tonumber(L, 1);
  result = octave_value::binary_op_fcn_name(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_assign_op_as_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value::assign_op arg1 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::assign_op_as_string",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::assign_op_as_string",1,"octave_value::assign_op");
  arg1 = (octave_value::assign_op)(int)lua_tonumber(L, 1);
  result = octave_value::assign_op_as_string(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_empty_conv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  octave_value *arg2 = 0 ;
  std::string temp1 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::empty_conv",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave_value::empty_conv",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::empty_conv",2,"octave_value const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_empty_conv",2,SWIGTYPE_p_octave_value);
  }
  
  result = octave_value::empty_conv((std::string const &)*arg1,(octave_value const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_empty_conv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::empty_conv",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave_value::empty_conv",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = octave_value::empty_conv((std::string const &)*arg1);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_empty_conv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_octave_value_empty_conv__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_empty_conv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_empty_conv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::empty_conv(std::string const &,octave_value const &)\n"
    "    octave_value::empty_conv(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_new_octave_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",0,0)
  result = (octave_value *)new octave_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::sys::time arg1 ;
  octave::sys::time *argp1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave::sys::time");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_octave__sys__time,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave__sys__time);
  }
  arg1 = *argp1;
  
  result = (octave_value *)new octave_value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"double");
  arg1 = (double)lua_tonumber(L, 1);
  result = (octave_value *)new octave_value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_value > *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_value > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_value_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_value_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((Array< octave_value > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_value > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_value > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_value_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_value_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_value > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Cell *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Cell const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cell,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Cell);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((Cell const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Cell *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Cell const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cell,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Cell);
  }
  
  result = (octave_value *)new octave_value((Cell const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Matrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Matrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((Matrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Matrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Matrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Matrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Matrix);
  }
  
  result = (octave_value *)new octave_value((Matrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((FloatMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  FloatMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatMatrix);
  }
  
  result = (octave_value *)new octave_value((FloatMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_NDArray);
  }
  
  result = (octave_value *)new octave_value((NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  FloatNDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatNDArray);
  }
  
  result = (octave_value *)new octave_value((FloatNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Array< double > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_double_t);
  }
  
  result = (octave_value *)new octave_value((Array< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_14(lua_State* L) {
  int SWIG_arg = 0;
  Array< float > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_float_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_float_t);
  }
  
  result = (octave_value *)new octave_value((Array< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_15(lua_State* L) {
  int SWIG_arg = 0;
  DiagMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"DiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_DiagMatrix);
  }
  
  result = (octave_value *)new octave_value((DiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_16(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< double > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"DiagArray2< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_DiagArray2T_double_t);
  }
  
  result = (octave_value *)new octave_value((DiagArray2< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_17(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< float > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"DiagArray2< float > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_float_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_DiagArray2T_float_t);
  }
  
  result = (octave_value *)new octave_value((DiagArray2< float > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_18(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< Complex > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"DiagArray2< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t);
  }
  
  result = (octave_value *)new octave_value((DiagArray2< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_19(lua_State* L) {
  int SWIG_arg = 0;
  DiagArray2< FloatComplex > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"DiagArray2< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t);
  }
  
  result = (octave_value *)new octave_value((DiagArray2< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_20(lua_State* L) {
  int SWIG_arg = 0;
  FloatDiagMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatDiagMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatDiagMatrix);
  }
  
  result = (octave_value *)new octave_value((FloatDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_21(lua_State* L) {
  int SWIG_arg = 0;
  RowVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"RowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_RowVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_RowVector);
  }
  
  result = (octave_value *)new octave_value((RowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_22(lua_State* L) {
  int SWIG_arg = 0;
  FloatRowVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatRowVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatRowVector);
  }
  
  result = (octave_value *)new octave_value((FloatRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_23(lua_State* L) {
  int SWIG_arg = 0;
  ColumnVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ColumnVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ColumnVector);
  }
  
  result = (octave_value *)new octave_value((ColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_24(lua_State* L) {
  int SWIG_arg = 0;
  FloatColumnVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatColumnVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatColumnVector);
  }
  
  result = (octave_value *)new octave_value((FloatColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_25(lua_State* L) {
  int SWIG_arg = 0;
  Complex *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Complex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_std__complexT_double_t);
  }
  
  result = (octave_value *)new octave_value((Complex const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_26(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplex *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplex const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__complexT_float_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_std__complexT_float_t);
  }
  
  result = (octave_value *)new octave_value((FloatComplex const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_27(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((ComplexMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_28(lua_State* L) {
  int SWIG_arg = 0;
  ComplexMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexMatrix);
  }
  
  result = (octave_value *)new octave_value((ComplexMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_29(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((FloatComplexMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_30(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexMatrix);
  }
  
  result = (octave_value *)new octave_value((FloatComplexMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_31(lua_State* L) {
  int SWIG_arg = 0;
  ComplexNDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexNDArray);
  }
  
  result = (octave_value *)new octave_value((ComplexNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_32(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexNDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexNDArray);
  }
  
  result = (octave_value *)new octave_value((FloatComplexNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_33(lua_State* L) {
  int SWIG_arg = 0;
  Array< Complex > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_std__complexT_double_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_34(lua_State* L) {
  int SWIG_arg = 0;
  Array< FloatComplex > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< FloatComplex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_std__complexT_float_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< FloatComplex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_35(lua_State* L) {
  int SWIG_arg = 0;
  ComplexDiagMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexDiagMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexDiagMatrix);
  }
  
  result = (octave_value *)new octave_value((ComplexDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_36(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexDiagMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexDiagMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexDiagMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexDiagMatrix);
  }
  
  result = (octave_value *)new octave_value((FloatComplexDiagMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_37(lua_State* L) {
  int SWIG_arg = 0;
  ComplexRowVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexRowVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexRowVector);
  }
  
  result = (octave_value *)new octave_value((ComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_38(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexRowVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexRowVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexRowVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexRowVector);
  }
  
  result = (octave_value *)new octave_value((FloatComplexRowVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_39(lua_State* L) {
  int SWIG_arg = 0;
  ComplexColumnVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"ComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ComplexColumnVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ComplexColumnVector);
  }
  
  result = (octave_value *)new octave_value((ComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_40(lua_State* L) {
  int SWIG_arg = 0;
  FloatComplexColumnVector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"FloatComplexColumnVector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_FloatComplexColumnVector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_FloatComplexColumnVector);
  }
  
  result = (octave_value *)new octave_value((FloatComplexColumnVector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_41(lua_State* L) {
  int SWIG_arg = 0;
  PermMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"PermMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_PermMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_PermMatrix);
  }
  
  result = (octave_value *)new octave_value((PermMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_42(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = (octave_value *)new octave_value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_43(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"boolMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_boolMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((boolMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_44(lua_State* L) {
  int SWIG_arg = 0;
  boolMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"boolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_boolMatrix);
  }
  
  result = (octave_value *)new octave_value((boolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_45(lua_State* L) {
  int SWIG_arg = 0;
  boolNDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"boolNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_boolNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_boolNDArray);
  }
  
  result = (octave_value *)new octave_value((boolNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_46(lua_State* L) {
  int SWIG_arg = 0;
  Array< bool > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< bool > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_bool_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_bool_t);
  }
  
  result = (octave_value *)new octave_value((Array< bool > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_47(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  char arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"char");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  arg1 = (lua_tostring(L, 1))[0];
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_48(lua_State* L) {
  int SWIG_arg = 0;
  char arg1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"char");
  arg1 = (lua_tostring(L, 1))[0];
  result = (octave_value *)new octave_value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_49(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  char arg2 ;
  std::string temp1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"std::string const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value((std::string const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_50(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (octave_value *)new octave_value((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_51(lua_State* L) {
  int SWIG_arg = 0;
  string_vector *arg1 = 0 ;
  char arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"string_vector const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_string_vector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_string_vector);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value((string_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_52(lua_State* L) {
  int SWIG_arg = 0;
  string_vector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"string_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_string_vector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_string_vector);
  }
  
  result = (octave_value *)new octave_value((string_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_53(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  char arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"charMatrix const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_charMatrix);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value((charMatrix const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_54(lua_State* L) {
  int SWIG_arg = 0;
  charMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"charMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_charMatrix);
  }
  
  result = (octave_value *)new octave_value((charMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_55(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  char arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"charNDArray const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_charNDArray);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value((charNDArray const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_56(lua_State* L) {
  int SWIG_arg = 0;
  charNDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"charNDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_charNDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_charNDArray);
  }
  
  result = (octave_value *)new octave_value((charNDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_57(lua_State* L) {
  int SWIG_arg = 0;
  Array< char > *arg1 = 0 ;
  char arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< char > const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_char_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_char_t);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (octave_value *)new octave_value((Array< char > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_58(lua_State* L) {
  int SWIG_arg = 0;
  Array< char > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< char > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_char_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_char_t);
  }
  
  result = (octave_value *)new octave_value((Array< char > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_59(lua_State* L) {
  int SWIG_arg = 0;
  SparseMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((SparseMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_60(lua_State* L) {
  int SWIG_arg = 0;
  SparseMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseMatrix);
  }
  
  result = (octave_value *)new octave_value((SparseMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_61(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< double > *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< double > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_double_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((Sparse< double > const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_62(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< double > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_double_t);
  }
  
  result = (octave_value *)new octave_value((Sparse< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_63(lua_State* L) {
  int SWIG_arg = 0;
  SparseComplexMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseComplexMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseComplexMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((SparseComplexMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_64(lua_State* L) {
  int SWIG_arg = 0;
  SparseComplexMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseComplexMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseComplexMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseComplexMatrix);
  }
  
  result = (octave_value *)new octave_value((SparseComplexMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_65(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< Complex > *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< Complex > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_std__complexT_double_t_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((Sparse< Complex > const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_66(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< Complex > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< Complex > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_std__complexT_double_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_std__complexT_double_t_t);
  }
  
  result = (octave_value *)new octave_value((Sparse< Complex > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_67(lua_State* L) {
  int SWIG_arg = 0;
  SparseBoolMatrix *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseBoolMatrix const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseBoolMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseBoolMatrix);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((SparseBoolMatrix const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_68(lua_State* L) {
  int SWIG_arg = 0;
  SparseBoolMatrix *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"SparseBoolMatrix const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseBoolMatrix,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseBoolMatrix);
  }
  
  result = (octave_value *)new octave_value((SparseBoolMatrix const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_69(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< bool > *arg1 = 0 ;
  MatrixType *arg2 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< bool > const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_bool_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_bool_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("new_octave_value",2,SWIGTYPE_p_MatrixType);
  }
  
  result = (octave_value *)new octave_value((Sparse< bool > const &)*arg1,(MatrixType const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_70(lua_State* L) {
  int SWIG_arg = 0;
  Sparse< bool > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Sparse< bool > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_SparseT_bool_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_SparseT_bool_t);
  }
  
  result = (octave_value *)new octave_value((Sparse< bool > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_71(lua_State* L) {
  int SWIG_arg = 0;
  octave_int8 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_int8 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_signed_char_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_signed_char_t);
  }
  
  result = (octave_value *)new octave_value((octave_int8 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_72(lua_State* L) {
  int SWIG_arg = 0;
  octave_int16 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_int16 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_short_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_short_t);
  }
  
  result = (octave_value *)new octave_value((octave_int16 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_73(lua_State* L) {
  int SWIG_arg = 0;
  octave_int32 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_int32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_int_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_int_t);
  }
  
  result = (octave_value *)new octave_value((octave_int32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_74(lua_State* L) {
  int SWIG_arg = 0;
  octave_int64 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_int64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_long_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_long_t);
  }
  
  result = (octave_value *)new octave_value((octave_int64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_75(lua_State* L) {
  int SWIG_arg = 0;
  octave_uint8 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_uint8 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_unsigned_char_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_unsigned_char_t);
  }
  
  result = (octave_value *)new octave_value((octave_uint8 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_76(lua_State* L) {
  int SWIG_arg = 0;
  octave_uint16 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_uint16 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_unsigned_short_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_unsigned_short_t);
  }
  
  result = (octave_value *)new octave_value((octave_uint16 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_77(lua_State* L) {
  int SWIG_arg = 0;
  octave_uint32 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_uint32 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_unsigned_int_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_unsigned_int_t);
  }
  
  result = (octave_value *)new octave_value((octave_uint32 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_78(lua_State* L) {
  int SWIG_arg = 0;
  octave_uint64 *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_uint64 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_intT_unsigned_long_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_intT_unsigned_long_t);
  }
  
  result = (octave_value *)new octave_value((octave_uint64 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_79(lua_State* L) {
  int SWIG_arg = 0;
  int8NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"int8NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int8NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_int8NDArray);
  }
  
  result = (octave_value *)new octave_value((int8NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_80(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_int8 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_int8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_signed_char_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_signed_char_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_int8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_81(lua_State* L) {
  int SWIG_arg = 0;
  int16NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"int16NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int16NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_int16NDArray);
  }
  
  result = (octave_value *)new octave_value((int16NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_82(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_int16 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_int16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_short_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_short_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_int16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_83(lua_State* L) {
  int SWIG_arg = 0;
  int32NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"int32NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int32NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_int32NDArray);
  }
  
  result = (octave_value *)new octave_value((int32NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_84(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_int32 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_int32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_int_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_int_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_int32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_85(lua_State* L) {
  int SWIG_arg = 0;
  int64NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"int64NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int64NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_int64NDArray);
  }
  
  result = (octave_value *)new octave_value((int64NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_86(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_int64 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_int64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_long_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_long_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_int64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_87(lua_State* L) {
  int SWIG_arg = 0;
  uint8NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"uint8NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint8NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_uint8NDArray);
  }
  
  result = (octave_value *)new octave_value((uint8NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_88(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_uint8 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_uint8 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_char_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_char_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_uint8 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_89(lua_State* L) {
  int SWIG_arg = 0;
  uint16NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"uint16NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint16NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_uint16NDArray);
  }
  
  result = (octave_value *)new octave_value((uint16NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_90(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_uint16 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_uint16 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_short_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_short_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_uint16 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_91(lua_State* L) {
  int SWIG_arg = 0;
  uint32NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"uint32NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint32NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_uint32NDArray);
  }
  
  result = (octave_value *)new octave_value((uint32NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_92(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_uint32 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_uint32 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_int_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_int_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_uint32 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_93(lua_State* L) {
  int SWIG_arg = 0;
  uint64NDArray *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"uint64NDArray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_uint64NDArray,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_uint64NDArray);
  }
  
  result = (octave_value *)new octave_value((uint64NDArray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_94(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_uint64 > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_uint64 > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_long_t_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_octave_intT_unsigned_long_t_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_uint64 > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_95(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  bool arg2 ;
  bool arg3 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_idx_type > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::octave_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (octave_value *)new octave_value((Array< octave_idx_type > const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_96(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_idx_type > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((Array< octave_idx_type > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_97(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_idx_type > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< octave_idx_type > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = (octave_value *)new octave_value((Array< octave_idx_type > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_98(lua_State* L) {
  int SWIG_arg = 0;
  Array< std::string > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Array< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_std__string_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_ArrayT_std__string_t);
  }
  
  result = (octave_value *)new octave_value((Array< std::string > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_99(lua_State* L) {
  int SWIG_arg = 0;
  octave::idx_vector *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave::idx_vector const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__idx_vector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave__idx_vector);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((octave::idx_vector const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_100(lua_State* L) {
  int SWIG_arg = 0;
  octave::idx_vector *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave::idx_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__idx_vector,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave__idx_vector);
  }
  
  result = (octave_value *)new octave_value((octave::idx_vector const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_101(lua_State* L) {
  int SWIG_arg = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"double");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::octave_value",3,"double");
  arg1 = (double)lua_tonumber(L, 1);
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (octave_value *)new octave_value(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_102(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Range const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Range);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((Range const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_103(lua_State* L) {
  int SWIG_arg = 0;
  Range *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"Range const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Range,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_Range);
  }
  
  result = (octave_value *)new octave_value((Range const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_104(lua_State* L) {
  int SWIG_arg = 0;
  octave::range< double > *arg1 = 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave::range< double > const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__rangeT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave__rangeT_double_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value((octave::range< double > const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_105(lua_State* L) {
  int SWIG_arg = 0;
  octave::range< double > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave::range< double > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__rangeT_double_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave__rangeT_double_t);
  }
  
  result = (octave_value *)new octave_value((octave::range< double > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_106(lua_State* L) {
  int SWIG_arg = 0;
  octave_map *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_map const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_map,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_map);
  }
  
  result = (octave_value *)new octave_value((octave_map const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_107(lua_State* L) {
  int SWIG_arg = 0;
  octave_scalar_map *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_scalar_map const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_scalar_map,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_scalar_map);
  }
  
  result = (octave_value *)new octave_value((octave_scalar_map const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_108(lua_State* L) {
  int SWIG_arg = 0;
  std::map< std::string,octave_value > *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"std::map< std::string,octave_value > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__mapT_std__string_octave_value_t,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_std__mapT_std__string_octave_value_t);
  }
  
  result = (octave_value *)new octave_value((std::map< std::string,octave_value > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_109(lua_State* L) {
  int SWIG_arg = 0;
  octave_map *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string > *arg3 = 0 ;
  std::string temp2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_map const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::octave_value",3,"std::list< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_map,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_map);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__string_t,0))){
    SWIG_fail_ptr("new_octave_value",3,SWIGTYPE_p_std__listT_std__string_t);
  }
  
  result = (octave_value *)new octave_value((octave_map const &)*arg1,(std::string const &)*arg2,(std::list< std::string > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_110(lua_State* L) {
  int SWIG_arg = 0;
  octave_scalar_map *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string > *arg3 = 0 ;
  std::string temp2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_scalar_map const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::octave_value",3,"std::list< std::string > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_scalar_map,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_scalar_map);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__string_t,0))){
    SWIG_fail_ptr("new_octave_value",3,SWIGTYPE_p_std__listT_std__string_t);
  }
  
  result = (octave_value *)new octave_value((octave_scalar_map const &)*arg1,(std::string const &)*arg2,(std::list< std::string > const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_111(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_value *)new octave_value((octave_value_list const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_112(lua_State* L) {
  int SWIG_arg = 0;
  octave_base_value *arg1 = (octave_base_value *) 0 ;
  bool arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_base_value *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_base_value,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_base_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_value *)new octave_value(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_113(lua_State* L) {
  int SWIG_arg = 0;
  octave_base_value *arg1 = (octave_base_value *) 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_base_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_base_value,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_base_value);
  }
  
  result = (octave_value *)new octave_value(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value__SWIG_114(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::octave_value",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value::octave_value",1,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_octave_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value *)new octave_value((octave_value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_octave_value__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__sys__time, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_value_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Cell, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_11(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_12(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_13(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_14(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_15(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_16(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_17(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_18(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_DiagArray2T_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_19(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_20(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_RowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_21(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_22(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_23(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_24(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_25(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__complexT_float_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_26(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_28(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_30(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_31(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_32(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_33(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__complexT_float_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_34(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_35(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexDiagMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_36(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_37(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexRowVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_38(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_39(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexColumnVector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_40(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_PermMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_41(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_44(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_45(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_bool_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_46(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_string_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_52(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_54(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_56(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_58(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_60(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_62(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_64(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_66(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseBoolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_68(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_bool_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_70(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_signed_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_71(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_72(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_73(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_74(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_unsigned_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_75(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_unsigned_short_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_76(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_unsigned_int_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_77(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_intT_unsigned_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_78(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int8NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_79(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_signed_char_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_80(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int16NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_81(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_short_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_82(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int32NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_83(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_84(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_int64NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_85(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_86(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint8NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_87(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_unsigned_char_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_88(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint16NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_89(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_unsigned_short_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_90(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint32NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_91(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_unsigned_int_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_92(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_uint64NDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_93(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_intT_unsigned_long_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_94(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_97(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_std__string_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_98(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__idx_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_100(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Range, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_103(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__rangeT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_105(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_map, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_106(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_scalar_map, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_107(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_octave_value_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_108(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_111(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_base_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_113(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_114(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isboolean(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_42(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_48(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_octave_value__SWIG_50(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_29(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_bool_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_69(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_string_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_51(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Cell, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_53(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_boolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_43(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_charNDArray, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_55(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_FloatMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_96(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_char_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_57(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_value_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__idx_vector, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_99(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_59(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Range, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_102(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_27(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__rangeT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_104(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_double_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_61(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseComplexMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_63(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Matrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseT_std__complexT_double_t_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_65(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_base_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_112(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_SparseBoolMatrix, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_67(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]) && (lua_rawlen(L,argv[0])==1);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_47(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_new_octave_value__SWIG_49(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_octave_value__SWIG_95(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_map, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_octave_value__SWIG_109(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_scalar_map, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__string_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_octave_value__SWIG_110(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_octave_value__SWIG_101(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_octave_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::octave_value()\n"
    "    octave_value::octave_value(octave::sys::time)\n"
    "    octave_value::octave_value(double)\n"
    "    octave_value::octave_value(Array< octave_value > const &,bool)\n"
    "    octave_value::octave_value(Array< octave_value > const &)\n"
    "    octave_value::octave_value(Cell const &,bool)\n"
    "    octave_value::octave_value(Cell const &)\n"
    "    octave_value::octave_value(Matrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(Matrix const &)\n"
    "    octave_value::octave_value(FloatMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(FloatMatrix const &)\n"
    "    octave_value::octave_value(NDArray const &)\n"
    "    octave_value::octave_value(FloatNDArray const &)\n"
    "    octave_value::octave_value(Array< double > const &)\n"
    "    octave_value::octave_value(Array< float > const &)\n"
    "    octave_value::octave_value(DiagMatrix const &)\n"
    "    octave_value::octave_value(DiagArray2< double > const &)\n"
    "    octave_value::octave_value(DiagArray2< float > const &)\n"
    "    octave_value::octave_value(DiagArray2< Complex > const &)\n"
    "    octave_value::octave_value(DiagArray2< FloatComplex > const &)\n"
    "    octave_value::octave_value(FloatDiagMatrix const &)\n"
    "    octave_value::octave_value(RowVector const &)\n"
    "    octave_value::octave_value(FloatRowVector const &)\n"
    "    octave_value::octave_value(ColumnVector const &)\n"
    "    octave_value::octave_value(FloatColumnVector const &)\n"
    "    octave_value::octave_value(Complex const &)\n"
    "    octave_value::octave_value(FloatComplex const &)\n"
    "    octave_value::octave_value(ComplexMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(ComplexMatrix const &)\n"
    "    octave_value::octave_value(FloatComplexMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(FloatComplexMatrix const &)\n"
    "    octave_value::octave_value(ComplexNDArray const &)\n"
    "    octave_value::octave_value(FloatComplexNDArray const &)\n"
    "    octave_value::octave_value(Array< Complex > const &)\n"
    "    octave_value::octave_value(Array< FloatComplex > const &)\n"
    "    octave_value::octave_value(ComplexDiagMatrix const &)\n"
    "    octave_value::octave_value(FloatComplexDiagMatrix const &)\n"
    "    octave_value::octave_value(ComplexRowVector const &)\n"
    "    octave_value::octave_value(FloatComplexRowVector const &)\n"
    "    octave_value::octave_value(ComplexColumnVector const &)\n"
    "    octave_value::octave_value(FloatComplexColumnVector const &)\n"
    "    octave_value::octave_value(PermMatrix const &)\n"
    "    octave_value::octave_value(bool)\n"
    "    octave_value::octave_value(boolMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(boolMatrix const &)\n"
    "    octave_value::octave_value(boolNDArray const &)\n"
    "    octave_value::octave_value(Array< bool > const &)\n"
    "    octave_value::octave_value(char,char)\n"
    "    octave_value::octave_value(char)\n"
    "    octave_value::octave_value(std::string const &,char)\n"
    "    octave_value::octave_value(std::string const &)\n"
    "    octave_value::octave_value(string_vector const &,char)\n"
    "    octave_value::octave_value(string_vector const &)\n"
    "    octave_value::octave_value(charMatrix const &,char)\n"
    "    octave_value::octave_value(charMatrix const &)\n"
    "    octave_value::octave_value(charNDArray const &,char)\n"
    "    octave_value::octave_value(charNDArray const &)\n"
    "    octave_value::octave_value(Array< char > const &,char)\n"
    "    octave_value::octave_value(Array< char > const &)\n"
    "    octave_value::octave_value(SparseMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(SparseMatrix const &)\n"
    "    octave_value::octave_value(Sparse< double > const &,MatrixType const &)\n"
    "    octave_value::octave_value(Sparse< double > const &)\n"
    "    octave_value::octave_value(SparseComplexMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(SparseComplexMatrix const &)\n"
    "    octave_value::octave_value(Sparse< Complex > const &,MatrixType const &)\n"
    "    octave_value::octave_value(Sparse< Complex > const &)\n"
    "    octave_value::octave_value(SparseBoolMatrix const &,MatrixType const &)\n"
    "    octave_value::octave_value(SparseBoolMatrix const &)\n"
    "    octave_value::octave_value(Sparse< bool > const &,MatrixType const &)\n"
    "    octave_value::octave_value(Sparse< bool > const &)\n"
    "    octave_value::octave_value(octave_int8 const &)\n"
    "    octave_value::octave_value(octave_int16 const &)\n"
    "    octave_value::octave_value(octave_int32 const &)\n"
    "    octave_value::octave_value(octave_int64 const &)\n"
    "    octave_value::octave_value(octave_uint8 const &)\n"
    "    octave_value::octave_value(octave_uint16 const &)\n"
    "    octave_value::octave_value(octave_uint32 const &)\n"
    "    octave_value::octave_value(octave_uint64 const &)\n"
    "    octave_value::octave_value(int8NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_int8 > const &)\n"
    "    octave_value::octave_value(int16NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_int16 > const &)\n"
    "    octave_value::octave_value(int32NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_int32 > const &)\n"
    "    octave_value::octave_value(int64NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_int64 > const &)\n"
    "    octave_value::octave_value(uint8NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_uint8 > const &)\n"
    "    octave_value::octave_value(uint16NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_uint16 > const &)\n"
    "    octave_value::octave_value(uint32NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_uint32 > const &)\n"
    "    octave_value::octave_value(uint64NDArray const &)\n"
    "    octave_value::octave_value(Array< octave_uint64 > const &)\n"
    "    octave_value::octave_value(Array< octave_idx_type > const &,bool,bool)\n"
    "    octave_value::octave_value(Array< octave_idx_type > const &,bool)\n"
    "    octave_value::octave_value(Array< octave_idx_type > const &)\n"
    "    octave_value::octave_value(Array< std::string > const &)\n"
    "    octave_value::octave_value(octave::idx_vector const &,bool)\n"
    "    octave_value::octave_value(octave::idx_vector const &)\n"
    "    octave_value::octave_value(double,double,double)\n"
    "    octave_value::octave_value(Range const &,bool)\n"
    "    octave_value::octave_value(Range const &)\n"
    "    octave_value::octave_value(octave::range< double > const &,bool)\n"
    "    octave_value::octave_value(octave::range< double > const &)\n"
    "    octave_value::octave_value(octave_map const &)\n"
    "    octave_value::octave_value(octave_scalar_map const &)\n"
    "    octave_value::octave_value(std::map< std::string,octave_value > const &)\n"
    "    octave_value::octave_value(octave_map const &,std::string const &,std::list< std::string > const &)\n"
    "    octave_value::octave_value(octave_scalar_map const &,std::string const &,std::list< std::string > const &)\n"
    "    octave_value::octave_value(octave_value_list const &)\n"
    "    octave_value::octave_value(octave_base_value *,bool)\n"
    "    octave_value::octave_value(octave_base_value *)\n"
    "    octave_value::octave_value(octave_value const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_clone(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::clone",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_clone",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_base_value *)((octave_value const *)arg1)->clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_empty_clone(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::empty_clone",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::empty_clone",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_empty_clone",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_base_value *)((octave_value const *)arg1)->empty_clone();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_make_unique__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::make_unique",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::make_unique",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_make_unique",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->make_unique();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_make_unique__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("octave_value::make_unique",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::make_unique",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::make_unique",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_make_unique",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->make_unique(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_make_unique(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_make_unique__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_make_unique__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_make_unique'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::make_unique()\n"
    "    octave_value::make_unique(int)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_break_closure_cycles(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::shared_ptr< octave::stack_frame > *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value::break_closure_cycles",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::break_closure_cycles",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::break_closure_cycles",2,"std::shared_ptr< octave::stack_frame > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_break_closure_cycles",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_octave__stack_frame_t,0))){
    SWIG_fail_ptr("octave_value_break_closure_cycles",2,SWIGTYPE_p_std__shared_ptrT_octave__stack_frame_t);
  }
  
  (arg1)->break_closure_cycles((std::shared_ptr< octave::stack_frame > const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_get_count(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::get_count",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::get_count",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_get_count",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->get_count();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_numeric_conversion_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value::type_conv_info result;
  
  SWIG_check_num_args("octave_value::numeric_conversion_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::numeric_conversion_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_numeric_conversion_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->numeric_conversion_function();
  {
    octave_base_value::type_conv_info * resultptr = new octave_base_value::type_conv_info((const octave_base_value::type_conv_info &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_base_value__type_conv_info,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_numeric_demotion_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value::type_conv_info result;
  
  SWIG_check_num_args("octave_value::numeric_demotion_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::numeric_demotion_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_numeric_demotion_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->numeric_demotion_function();
  {
    octave_base_value::type_conv_info * resultptr = new octave_base_value::type_conv_info((const octave_base_value::type_conv_info &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_base_value__type_conv_info,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_maybe_mutate(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::maybe_mutate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::maybe_mutate",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_maybe_mutate",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->maybe_mutate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_squeeze(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::squeeze",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::squeeze",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_squeeze",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->squeeze();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_full_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::full_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::full_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_full_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->full_value();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_double(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_double",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_double",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_double",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_double();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_single(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_single",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_single",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_single",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_single();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_int8(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_int8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_int8",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_int8",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_int8();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_int16(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_int16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_int16",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_int16",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_int16();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_int32(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_int32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_int32",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_int32",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_int32();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_int64(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_int64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_int64",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_int64",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_int64();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_uint8(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_uint8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_uint8",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_uint8",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_uint8();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_uint16(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_uint16",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_uint16",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_uint16",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_uint16();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_uint32(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_uint32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_uint32",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_uint32",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_uint32();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_uint64(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::as_uint64",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_uint64",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_uint64",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->as_uint64();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_try_narrowing_conversion(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::try_narrowing_conversion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::try_narrowing_conversion",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_try_narrowing_conversion",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_base_value *)(arg1)->try_narrowing_conversion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_size(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("octave_value::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::size",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_size",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->size();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xnumel(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::xnumel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xnumel",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::xnumel",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xnumel",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_xnumel",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_idx_type)(arg1)->xnumel((octave_value_list const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_single_subsref(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  octave_value_list *arg3 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::single_subsref",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::single_subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::single_subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::single_subsref",3,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_single_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_single_subsref",3,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->single_subsref((std::string const &)*arg2,(octave_value_list const &)*arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_subsref__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::subsref",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::subsref",3,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_subsref",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (arg1)->subsref((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_subsref__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::subsref",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::subsref",3,"std::list< octave_value_list > const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave_value::subsref",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_subsref",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (arg1)->subsref((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3,arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_subsref__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value::subsref",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::subsref",3,"std::list< octave_value_list > const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave_value::subsref",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_subsref",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->subsref((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_subsref(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_subsref__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_octave_value_subsref__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_octave_value_subsref__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_subsref'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::subsref(std::string const &,std::list< octave_value_list > const &)\n"
    "    octave_value::subsref(std::string const &,std::list< octave_value_list > const &,bool)\n"
    "    octave_value::subsref(std::string const &,std::list< octave_value_list > const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_next_subsref__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  std::size_t arg4 ;
  std::string temp2 ;
  std::size_t *argp4 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::next_subsref",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::next_subsref",4,"std::size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_std__size_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",4,SWIGTYPE_p_std__size_t);
  }
  arg4 = *argp4;
  
  result = (arg1)->next_subsref((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3,arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::next_subsref",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (arg1)->next_subsref((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::size_t arg5 ;
  std::string temp3 ;
  std::size_t *argp5 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value::next_subsref",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::next_subsref",4,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("octave_value::next_subsref",5,"std::size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__size_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",5,SWIGTYPE_p_std__size_t);
  }
  arg5 = *argp5;
  
  result = (arg1)->next_subsref(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4,arg5);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::string temp3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value::next_subsref",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::next_subsref",4,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (arg1)->next_subsref(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::size_t arg5 ;
  std::string temp3 ;
  std::size_t *argp5 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::next_subsref",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::next_subsref",4,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("octave_value::next_subsref",5,"std::size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_std__size_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",5,SWIGTYPE_p_std__size_t);
  }
  arg5 = *argp5;
  
  result = (arg1)->next_subsref(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4,arg5);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::string temp3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::next_subsref",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::next_subsref",1,"octave_value *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::next_subsref",2,"bool");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::next_subsref",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::next_subsref",4,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_next_subsref",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_next_subsref",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (arg1)->next_subsref(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_next_subsref(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_next_subsref__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_next_subsref__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_next_subsref__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__size_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_next_subsref__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__size_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_octave_value_next_subsref__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_std__size_t, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_octave_value_next_subsref__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_next_subsref'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::next_subsref(std::string const &,std::list< octave_value_list > const &,std::size_t)\n"
    "    octave_value::next_subsref(std::string const &,std::list< octave_value_list > const &)\n"
    "    octave_value::next_subsref(int,std::string const &,std::list< octave_value_list > const &,std::size_t)\n"
    "    octave_value::next_subsref(int,std::string const &,std::list< octave_value_list > const &)\n"
    "    octave_value::next_subsref(bool,std::string const &,std::list< octave_value_list > const &,std::size_t)\n"
    "    octave_value::next_subsref(bool,std::string const &,std::list< octave_value_list > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_index_op__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list *arg2 = 0 ;
  bool arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::index_op",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::index_op",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::index_op",2,"octave_value_list const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::index_op",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_index_op",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_index_op",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->index_op((octave_value_list const &)*arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_index_op__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::index_op",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::index_op",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::index_op",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_index_op",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_index_op",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->index_op((octave_value_list const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_index_op(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_index_op__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_index_op__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_index_op'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::index_op(octave_value_list const &,bool)\n"
    "    octave_value::index_op(octave_value_list const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_do_index_op__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list *arg2 = 0 ;
  bool arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::do_index_op",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::do_index_op",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::do_index_op",2,"octave_value_list const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::do_index_op",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_do_index_op",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_do_index_op",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (arg1)->do_index_op((octave_value_list const &)*arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_do_index_op__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::do_index_op",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::do_index_op",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::do_index_op",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_do_index_op",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_do_index_op",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->do_index_op((octave_value_list const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_do_index_op(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_do_index_op__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_do_index_op__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_do_index_op'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::do_index_op(octave_value_list const &,bool)\n"
    "    octave_value::do_index_op(octave_value_list const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_subsasgn(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  octave_value *arg4 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::subsasgn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::subsasgn",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::subsasgn",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::subsasgn",3,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::subsasgn",4,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_subsasgn",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_subsasgn",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_subsasgn",4,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->subsasgn((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3,(octave_value const &)*arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_undef_subsasgn(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::list< octave_value_list > *arg3 = 0 ;
  octave_value *arg4 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::undef_subsasgn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::undef_subsasgn",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::undef_subsasgn",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::undef_subsasgn",3,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::undef_subsasgn",4,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_undef_subsasgn",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_undef_subsasgn",3,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_undef_subsasgn",4,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->undef_subsasgn((std::string const &)*arg2,(std::list< octave_value_list > const &)*arg3,(octave_value const &)*arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_assign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value::assign_op arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  octave_value *arg5 = 0 ;
  std::string temp3 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::assign",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::assign",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::assign",2,"octave_value::assign_op");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::assign",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::assign",4,"std::list< octave_value_list > const &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("octave_value::assign",5,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_assign",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_value::assign_op)(int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_assign",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_assign",5,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value *) &(arg1)->assign(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4,(octave_value const &)*arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_assign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value::assign_op arg2 ;
  octave_value *arg3 = 0 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::assign",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::assign",2,"octave_value::assign_op");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::assign",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_assign",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_value::assign_op)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_assign",3,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value *) &(arg1)->assign(arg2,(octave_value const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_assign(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_assign__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_octave_value_assign__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_assign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::assign(octave_value::assign_op,std::string const &,std::list< octave_value_list > const &,octave_value const &)\n"
    "    octave_value::assign(octave_value::assign_op,octave_value const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_index_vector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave::idx_vector result;
  
  SWIG_check_num_args("octave_value::index_vector",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::index_vector",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::index_vector",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_index_vector",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->index_vector(arg2);
  {
    octave::idx_vector * resultptr = new octave::idx_vector((const octave::idx_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave__idx_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_index_vector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave::idx_vector result;
  
  SWIG_check_num_args("octave_value::index_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::index_vector",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_index_vector",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->index_vector();
  {
    octave::idx_vector * resultptr = new octave::idx_vector((const octave::idx_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave__idx_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_index_vector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_index_vector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_index_vector__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_index_vector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::index_vector(bool) const\n"
    "    octave_value::index_vector() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_dims(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  dim_vector result;
  
  SWIG_check_num_args("octave_value::dims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::dims",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_dims",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->dims();
  {
    dim_vector * resultptr = new dim_vector((const dim_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_dim_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_get_dims_str(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::get_dims_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::get_dims_str",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_get_dims_str",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->get_dims_str();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_rows(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::rows",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_rows",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->rows();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_columns(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::columns",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::columns",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_columns",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->columns();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_length(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::length",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_length",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ndims(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int result;
  
  SWIG_check_num_args("octave_value::ndims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ndims",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ndims",1,SWIGTYPE_p_octave_value);
  }
  
  result = (int)((octave_value const *)arg1)->ndims();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_all_zero_dims(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::all_zero_dims",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::all_zero_dims",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_all_zero_dims",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->all_zero_dims();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_zero_by_zero(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_zero_by_zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_zero_by_zero",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_zero_by_zero",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_zero_by_zero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_numel(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::numel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::numel",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_numel",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->numel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_byte_size(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::size_t result;
  
  SWIG_check_num_args("octave_value::byte_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::byte_size",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_byte_size",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->byte_size();
  {
    std::size_t * resultptr = new std::size_t((const std::size_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__size_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nnz(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::nnz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nnz",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nnz",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->nnz();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nzmax(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::nzmax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nzmax",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nzmax",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->nzmax();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nfields(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::nfields",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nfields",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nfields",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->nfields();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_reshape(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  dim_vector *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::reshape",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::reshape",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::reshape",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_reshape",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("octave_value_reshape",2,SWIGTYPE_p_dim_vector);
  }
  
  result = ((octave_value const *)arg1)->reshape((dim_vector const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_permute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< int > *arg2 = 0 ;
  bool arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::permute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::permute",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::permute",2,"Array< int > const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::permute",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_permute",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("octave_value_permute",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->permute((Array< int > const &)*arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_permute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< int > *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::permute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::permute",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::permute",2,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_permute",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("octave_value_permute",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = ((octave_value const *)arg1)->permute((Array< int > const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_permute(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_permute__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_int_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_permute__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_permute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::permute(Array< int > const &,bool) const\n"
    "    octave_value::permute(Array< int > const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_ipermute(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< int > *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::ipermute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ipermute",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::ipermute",2,"Array< int > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ipermute",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_int_t,0))){
    SWIG_fail_ptr("octave_value_ipermute",2,SWIGTYPE_p_ArrayT_int_t);
  }
  
  result = ((octave_value const *)arg1)->ipermute((Array< int > const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  dim_vector *arg2 = 0 ;
  bool arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::resize",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::resize",2,"dim_vector const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::resize",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_resize",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("octave_value_resize",2,SWIGTYPE_p_dim_vector);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->resize((dim_vector const &)*arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  dim_vector *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::resize",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::resize",2,"dim_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_resize",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_dim_vector,0))){
    SWIG_fail_ptr("octave_value_resize",2,SWIGTYPE_p_dim_vector);
  }
  
  result = ((octave_value const *)arg1)->resize((dim_vector const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_dim_vector, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::resize(dim_vector const &,bool) const\n"
    "    octave_value::resize(dim_vector const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_matrix_type__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  MatrixType result;
  
  SWIG_check_num_args("octave_value::matrix_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::matrix_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_matrix_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->matrix_type();
  {
    MatrixType * resultptr = new MatrixType((const MatrixType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_matrix_type__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  MatrixType *arg2 = 0 ;
  MatrixType result;
  
  SWIG_check_num_args("octave_value::matrix_type",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::matrix_type",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::matrix_type",2,"MatrixType const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_matrix_type",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_MatrixType,0))){
    SWIG_fail_ptr("octave_value_matrix_type",2,SWIGTYPE_p_MatrixType);
  }
  
  result = ((octave_value const *)arg1)->matrix_type((MatrixType const &)*arg2);
  {
    MatrixType * resultptr = new MatrixType((const MatrixType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MatrixType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_matrix_type(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_matrix_type__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_MatrixType, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_matrix_type__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_matrix_type'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::matrix_type() const\n"
    "    octave_value::matrix_type(MatrixType const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_is_defined(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_defined",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_defined",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_defined",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_defined();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_undefined(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_undefined",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_undefined",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_undefined",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_undefined();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_legacy_object(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_legacy_object",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_legacy_object",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_legacy_object",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_legacy_object();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isempty(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isempty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isempty",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isempty",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isempty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_iscell(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::iscell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::iscell",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_iscell",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->iscell();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_iscellstr(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::iscellstr",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::iscellstr",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_iscellstr",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->iscellstr();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_real_scalar(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_real_scalar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_real_scalar",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_real_scalar",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_real_scalar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_real_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_real_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_real_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_real_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_real_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_complex_scalar(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_complex_scalar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_complex_scalar",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_complex_scalar",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_complex_scalar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_complex_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_complex_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_complex_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_complex_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_complex_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_bool_scalar(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_bool_scalar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_bool_scalar",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_bool_scalar",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_bool_scalar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_bool_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_bool_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_bool_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_bool_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_bool_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_char_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_char_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_char_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_char_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_char_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_diag_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_diag_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_diag_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_diag_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_diag_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_perm_matrix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_perm_matrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_perm_matrix",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_perm_matrix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_perm_matrix();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_string",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_string",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_string();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_sq_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_sq_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_sq_string",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_sq_string",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_sq_string();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_dq_string(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_dq_string",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_dq_string",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_dq_string",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_dq_string();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_range(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_range",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_range",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_range",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_range();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isstruct(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isstruct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isstruct",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isstruct",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isstruct();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_classdef_meta(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_classdef_meta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_classdef_meta",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_classdef_meta",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_classdef_meta();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_classdef_object(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_classdef_object",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_classdef_object",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_classdef_object",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_classdef_object();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_classdef_superclass_ref(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_classdef_superclass_ref",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_classdef_superclass_ref",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_classdef_superclass_ref",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_classdef_superclass_ref();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_package(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_package",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_package",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_package",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_package();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isobject(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isobject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isobject",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isobject",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isobject();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isjava(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isjava",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isjava",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isjava",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isjava();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_cs_list(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_cs_list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_cs_list",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_cs_list",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_cs_list();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_magic_colon(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_magic_colon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_magic_colon",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_magic_colon",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_magic_colon();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_magic_int(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_magic_int",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_magic_int",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_magic_int",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_magic_int();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isnull(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isnull",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isnull",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isnull",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isnull();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::all",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::all",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_all",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((octave_value const *)arg1)->all(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::all",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_all",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->all();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::all(int) const\n"
    "    octave_value::all() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_any__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::any",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::any",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::any",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_any",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((octave_value const *)arg1)->any(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_any__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::any",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::any",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_any",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->any();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_any(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_any__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_any__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_any'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::any(int) const\n"
    "    octave_value::any() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_builtin_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  builtin_type_t result;
  
  SWIG_check_num_args("octave_value::builtin_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::builtin_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_builtin_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->builtin_type();
  {
    builtin_type_t * resultptr = new builtin_type_t((const builtin_type_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_builtin_type_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_double_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_double_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_double_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_double_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_double_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_single_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_single_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_single_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_single_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_single_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isfloat(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isfloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isfloat",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isfloat",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isfloat();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_int8_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_int8_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_int8_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_int8_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_int8_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_int16_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_int16_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_int16_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_int16_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_int16_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_int32_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_int32_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_int32_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_int32_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_int32_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_int64_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_int64_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_int64_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_int64_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_int64_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_uint8_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_uint8_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_uint8_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_uint8_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_uint8_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_uint16_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_uint16_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_uint16_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_uint16_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_uint16_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_uint32_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_uint32_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_uint32_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_uint32_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_uint32_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_uint64_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_uint64_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_uint64_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_uint64_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_uint64_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isinteger(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isinteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isinteger",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isinteger",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isinteger();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_islogical(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::islogical",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::islogical",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_islogical",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->islogical();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isreal(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isreal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isreal",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isreal",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isreal();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_iscomplex(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::iscomplex",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::iscomplex",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_iscomplex",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->iscomplex();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_scalar_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_scalar_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_scalar_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_scalar_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_scalar_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_matrix_type(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_matrix_type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_matrix_type",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_matrix_type",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_matrix_type();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isnumeric(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::isnumeric",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isnumeric",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isnumeric",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->isnumeric();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_issparse(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::issparse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::issparse",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_issparse",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->issparse();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_true(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_true",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_true",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_true",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_true();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_equal(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_equal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_equal",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::is_equal",2,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_equal",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_equal",2,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_equal((octave_value const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_constant(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_constant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_constant",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_constant",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_constant();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_function_handle(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_function_handle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_function_handle",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_function_handle",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_function_handle();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_anonymous_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_anonymous_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_anonymous_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_anonymous_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_anonymous_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_inline_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_inline_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_inline_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_inline_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_inline_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_user_script(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_user_script",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_user_script",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_user_script",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_user_script();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_user_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_user_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_user_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_user_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_user_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_user_code(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_user_code",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_user_code",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_user_code",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_user_code();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_builtin_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_builtin_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_builtin_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_builtin_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_builtin_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_dld_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_dld_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_dld_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_dld_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_dld_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_mex_function(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_mex_function",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_mex_function",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_mex_function",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_mex_function();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erase_subfunctions(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::erase_subfunctions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erase_subfunctions",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erase_subfunctions",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->erase_subfunctions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_eval(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::eval",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_eval",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->eval();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_short_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  short result;
  
  SWIG_check_num_args("octave_value::short_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::short_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::short_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::short_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_short_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (short)((octave_value const *)arg1)->short_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_short_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  short result;
  
  SWIG_check_num_args("octave_value::short_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::short_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::short_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_short_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (short)((octave_value const *)arg1)->short_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_short_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  short result;
  
  SWIG_check_num_args("octave_value::short_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::short_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_short_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (short)((octave_value const *)arg1)->short_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_short_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_short_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_short_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_short_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_short_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::short_value(bool,bool) const\n"
    "    octave_value::short_value(bool) const\n"
    "    octave_value::short_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_ushort_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned short result;
  
  SWIG_check_num_args("octave_value::ushort_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ushort_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::ushort_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::ushort_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ushort_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (unsigned short)((octave_value const *)arg1)->ushort_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ushort_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  unsigned short result;
  
  SWIG_check_num_args("octave_value::ushort_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ushort_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::ushort_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ushort_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (unsigned short)((octave_value const *)arg1)->ushort_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ushort_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  unsigned short result;
  
  SWIG_check_num_args("octave_value::ushort_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ushort_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ushort_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (unsigned short)((octave_value const *)arg1)->ushort_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ushort_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_ushort_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_ushort_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_ushort_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_ushort_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::ushort_value(bool,bool) const\n"
    "    octave_value::ushort_value(bool) const\n"
    "    octave_value::ushort_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_int_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int result;
  
  SWIG_check_num_args("octave_value::int_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::int_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int)((octave_value const *)arg1)->int_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("octave_value::int_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((octave_value const *)arg1)->int_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int result;
  
  SWIG_check_num_args("octave_value::int_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (int)((octave_value const *)arg1)->int_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_int_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_int_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_int_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_int_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::int_value(bool,bool) const\n"
    "    octave_value::int_value(bool) const\n"
    "    octave_value::int_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_uint_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned int result;
  
  SWIG_check_num_args("octave_value::uint_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::uint_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::uint_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (unsigned int)((octave_value const *)arg1)->uint_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("octave_value::uint_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::uint_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (unsigned int)((octave_value const *)arg1)->uint_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("octave_value::uint_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (unsigned int)((octave_value const *)arg1)->uint_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_uint_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_uint_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_uint_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_uint_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::uint_value(bool,bool) const\n"
    "    octave_value::uint_value(bool) const\n"
    "    octave_value::uint_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_nint_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  int result;
  
  SWIG_check_num_args("octave_value::nint_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nint_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::nint_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nint_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int)((octave_value const *)arg1)->nint_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nint_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int result;
  
  SWIG_check_num_args("octave_value::nint_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nint_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nint_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (int)((octave_value const *)arg1)->nint_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nint_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_nint_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_nint_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_nint_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::nint_value(bool) const\n"
    "    octave_value::nint_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_long_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  long result;
  
  SWIG_check_num_args("octave_value::long_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::long_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::long_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::long_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_long_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (long)((octave_value const *)arg1)->long_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_long_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  long result;
  
  SWIG_check_num_args("octave_value::long_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::long_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::long_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_long_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (long)((octave_value const *)arg1)->long_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_long_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  long result;
  
  SWIG_check_num_args("octave_value::long_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::long_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_long_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (long)((octave_value const *)arg1)->long_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_long_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_long_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_long_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_long_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_long_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::long_value(bool,bool) const\n"
    "    octave_value::long_value(bool) const\n"
    "    octave_value::long_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_ulong_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  unsigned long result;
  
  SWIG_check_num_args("octave_value::ulong_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ulong_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::ulong_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::ulong_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ulong_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (unsigned long)((octave_value const *)arg1)->ulong_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ulong_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  unsigned long result;
  
  SWIG_check_num_args("octave_value::ulong_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ulong_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::ulong_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ulong_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (unsigned long)((octave_value const *)arg1)->ulong_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ulong_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  unsigned long result;
  
  SWIG_check_num_args("octave_value::ulong_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ulong_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ulong_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (unsigned long)((octave_value const *)arg1)->ulong_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ulong_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_ulong_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_ulong_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_ulong_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_ulong_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::ulong_value(bool,bool) const\n"
    "    octave_value::ulong_value(bool) const\n"
    "    octave_value::ulong_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_int64_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  int64_t result;
  
  SWIG_check_num_args("octave_value::int64_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int64_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int64_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::int64_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int64_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (int64_t)((octave_value const *)arg1)->int64_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int64_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  int64_t result;
  
  SWIG_check_num_args("octave_value::int64_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int64_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int64_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int64_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (int64_t)((octave_value const *)arg1)->int64_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int64_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int64_t result;
  
  SWIG_check_num_args("octave_value::int64_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int64_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int64_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (int64_t)((octave_value const *)arg1)->int64_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int64_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_int64_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_int64_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_int64_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_int64_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::int64_value(bool,bool) const\n"
    "    octave_value::int64_value(bool) const\n"
    "    octave_value::int64_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_uint64_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  uint64_t result;
  
  SWIG_check_num_args("octave_value::uint64_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint64_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::uint64_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::uint64_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint64_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (uint64_t)((octave_value const *)arg1)->uint64_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint64_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  uint64_t result;
  
  SWIG_check_num_args("octave_value::uint64_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint64_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::uint64_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint64_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (uint64_t)((octave_value const *)arg1)->uint64_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint64_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  uint64_t result;
  
  SWIG_check_num_args("octave_value::uint64_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint64_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint64_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (uint64_t)((octave_value const *)arg1)->uint64_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint64_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_uint64_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_uint64_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_uint64_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_uint64_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::uint64_value(bool,bool) const\n"
    "    octave_value::uint64_value(bool) const\n"
    "    octave_value::uint64_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_idx_type_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::idx_type_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::idx_type_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::idx_type_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::idx_type_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_idx_type_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (octave_idx_type)((octave_value const *)arg1)->idx_type_value(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_idx_type_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::idx_type_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::idx_type_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::idx_type_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_idx_type_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_idx_type)((octave_value const *)arg1)->idx_type_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_idx_type_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value::idx_type_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::idx_type_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_idx_type_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type)((octave_value const *)arg1)->idx_type_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_idx_type_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_idx_type_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_idx_type_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_idx_type_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_idx_type_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::idx_type_value(bool,bool) const\n"
    "    octave_value::idx_type_value(bool) const\n"
    "    octave_value::idx_type_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_double_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("octave_value::double_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::double_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::double_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_double_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)((octave_value const *)arg1)->double_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_double_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  double result;
  
  SWIG_check_num_args("octave_value::double_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::double_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_double_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (double)((octave_value const *)arg1)->double_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_double_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_double_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_double_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_double_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::double_value(bool) const\n"
    "    octave_value::double_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("octave_value::float_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)((octave_value const *)arg1)->float_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  float result;
  
  SWIG_check_num_args("octave_value::float_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (float)((octave_value const *)arg1)->float_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_value(bool) const\n"
    "    octave_value::float_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_scalar_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  double result;
  
  SWIG_check_num_args("octave_value::scalar_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::scalar_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::scalar_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (double)((octave_value const *)arg1)->scalar_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_scalar_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  double result;
  
  SWIG_check_num_args("octave_value::scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (double)((octave_value const *)arg1)->scalar_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_scalar_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_scalar_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_scalar_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_scalar_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::scalar_value(bool) const\n"
    "    octave_value::scalar_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_scalar_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  float result;
  
  SWIG_check_num_args("octave_value::float_scalar_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_scalar_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_scalar_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (float)((octave_value const *)arg1)->float_scalar_value(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_scalar_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  float result;
  
  SWIG_check_num_args("octave_value::float_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (float)((octave_value const *)arg1)->float_scalar_value();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_scalar_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_scalar_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_scalar_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_scalar_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_scalar_value(bool) const\n"
    "    octave_value::float_scalar_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  Matrix result;
  
  SWIG_check_num_args("octave_value::matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->matrix_value(arg2);
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Matrix result;
  
  SWIG_check_num_args("octave_value::matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->matrix_value();
  {
    Matrix * resultptr = new Matrix((const Matrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Matrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::matrix_value(bool) const\n"
    "    octave_value::matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatMatrix result;
  
  SWIG_check_num_args("octave_value::float_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_matrix_value(arg2);
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatMatrix result;
  
  SWIG_check_num_args("octave_value::float_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_matrix_value();
  {
    FloatMatrix * resultptr = new FloatMatrix((const FloatMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_matrix_value(bool) const\n"
    "    octave_value::float_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  NDArray result;
  
  SWIG_check_num_args("octave_value::array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->array_value(arg2);
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  NDArray result;
  
  SWIG_check_num_args("octave_value::array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->array_value();
  {
    NDArray * resultptr = new NDArray((const NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::array_value(bool) const\n"
    "    octave_value::array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatNDArray result;
  
  SWIG_check_num_args("octave_value::float_array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_array_value(arg2);
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatNDArray result;
  
  SWIG_check_num_args("octave_value::float_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_array_value();
  {
    FloatNDArray * resultptr = new FloatNDArray((const FloatNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_array_value(bool) const\n"
    "    octave_value::float_array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  Complex result;
  
  SWIG_check_num_args("octave_value::complex_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_value(arg2);
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Complex result;
  
  SWIG_check_num_args("octave_value::complex_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_value();
  {
    Complex * resultptr = new Complex((const Complex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_value(bool) const\n"
    "    octave_value::complex_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplex result;
  
  SWIG_check_num_args("octave_value::float_complex_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_value(arg2);
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplex result;
  
  SWIG_check_num_args("octave_value::float_complex_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_value();
  {
    FloatComplex * resultptr = new FloatComplex((const FloatComplex &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__complexT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_value(bool) const\n"
    "    octave_value::float_complex_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("octave_value::complex_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_matrix_value(arg2);
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ComplexMatrix result;
  
  SWIG_check_num_args("octave_value::complex_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_matrix_value();
  {
    ComplexMatrix * resultptr = new ComplexMatrix((const ComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_matrix_value(bool) const\n"
    "    octave_value::complex_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("octave_value::float_complex_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_matrix_value(arg2);
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplexMatrix result;
  
  SWIG_check_num_args("octave_value::float_complex_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_matrix_value();
  {
    FloatComplexMatrix * resultptr = new FloatComplexMatrix((const FloatComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_matrix_value(bool) const\n"
    "    octave_value::float_complex_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("octave_value::complex_array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_array_value(arg2);
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ComplexNDArray result;
  
  SWIG_check_num_args("octave_value::complex_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_array_value();
  {
    ComplexNDArray * resultptr = new ComplexNDArray((const ComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_array_value(bool) const\n"
    "    octave_value::complex_array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("octave_value::float_complex_array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_array_value(arg2);
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplexNDArray result;
  
  SWIG_check_num_args("octave_value::float_complex_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_array_value();
  {
    FloatComplexNDArray * resultptr = new FloatComplexNDArray((const FloatComplexNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_array_value(bool) const\n"
    "    octave_value::float_complex_array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_bool_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("octave_value::bool_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::bool_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((octave_value const *)arg1)->bool_value(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::bool_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->bool_value();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_bool_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_bool_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_bool_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::bool_value(bool) const\n"
    "    octave_value::bool_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_bool_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  boolMatrix result;
  
  SWIG_check_num_args("octave_value::bool_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::bool_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->bool_matrix_value(arg2);
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  boolMatrix result;
  
  SWIG_check_num_args("octave_value::bool_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->bool_matrix_value();
  {
    boolMatrix * resultptr = new boolMatrix((const boolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_bool_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_bool_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_bool_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::bool_matrix_value(bool) const\n"
    "    octave_value::bool_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_bool_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  boolNDArray result;
  
  SWIG_check_num_args("octave_value::bool_array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::bool_array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->bool_array_value(arg2);
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  boolNDArray result;
  
  SWIG_check_num_args("octave_value::bool_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::bool_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_bool_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->bool_array_value();
  {
    boolNDArray * resultptr = new boolNDArray((const boolNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_boolNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_bool_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_bool_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_bool_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_bool_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::bool_array_value(bool) const\n"
    "    octave_value::bool_array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_char_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  charMatrix result;
  
  SWIG_check_num_args("octave_value::char_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::char_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::char_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_char_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->char_matrix_value(arg2);
  {
    charMatrix * resultptr = new charMatrix((const charMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_char_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  charMatrix result;
  
  SWIG_check_num_args("octave_value::char_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::char_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_char_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->char_matrix_value();
  {
    charMatrix * resultptr = new charMatrix((const charMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_char_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_char_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_char_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_char_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::char_matrix_value(bool) const\n"
    "    octave_value::char_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_char_array_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  charNDArray result;
  
  SWIG_check_num_args("octave_value::char_array_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::char_array_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::char_array_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_char_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->char_array_value(arg2);
  {
    charNDArray * resultptr = new charNDArray((const charNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_char_array_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  charNDArray result;
  
  SWIG_check_num_args("octave_value::char_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::char_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_char_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->char_array_value();
  {
    charNDArray * resultptr = new charNDArray((const charNDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_charNDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_char_array_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_char_array_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_char_array_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_char_array_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::char_array_value(bool) const\n"
    "    octave_value::char_array_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_sparse_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SparseMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::sparse_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->sparse_matrix_value(arg2);
  {
    SparseMatrix * resultptr = new SparseMatrix((const SparseMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SparseMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->sparse_matrix_value();
  {
    SparseMatrix * resultptr = new SparseMatrix((const SparseMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_sparse_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_sparse_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_sparse_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::sparse_matrix_value(bool) const\n"
    "    octave_value::sparse_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_sparse_complex_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SparseComplexMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_complex_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_complex_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::sparse_complex_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->sparse_complex_matrix_value(arg2);
  {
    SparseComplexMatrix * resultptr = new SparseComplexMatrix((const SparseComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_complex_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SparseComplexMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_complex_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_complex_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_complex_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->sparse_complex_matrix_value();
  {
    SparseComplexMatrix * resultptr = new SparseComplexMatrix((const SparseComplexMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseComplexMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_complex_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_sparse_complex_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_sparse_complex_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_sparse_complex_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::sparse_complex_matrix_value(bool) const\n"
    "    octave_value::sparse_complex_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_sparse_bool_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SparseBoolMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_bool_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_bool_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::sparse_bool_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_bool_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->sparse_bool_matrix_value(arg2);
  {
    SparseBoolMatrix * resultptr = new SparseBoolMatrix((const SparseBoolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseBoolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_bool_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SparseBoolMatrix result;
  
  SWIG_check_num_args("octave_value::sparse_bool_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sparse_bool_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sparse_bool_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->sparse_bool_matrix_value();
  {
    SparseBoolMatrix * resultptr = new SparseBoolMatrix((const SparseBoolMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SparseBoolMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sparse_bool_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_sparse_bool_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_sparse_bool_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_sparse_bool_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::sparse_bool_matrix_value(bool) const\n"
    "    octave_value::sparse_bool_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_diag_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  DiagMatrix result;
  
  SWIG_check_num_args("octave_value::diag_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::diag_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::diag_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->diag_matrix_value(arg2);
  {
    DiagMatrix * resultptr = new DiagMatrix((const DiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_diag_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  DiagMatrix result;
  
  SWIG_check_num_args("octave_value::diag_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::diag_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->diag_matrix_value();
  {
    DiagMatrix * resultptr = new DiagMatrix((const DiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_DiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_diag_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_diag_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_diag_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_diag_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::diag_matrix_value(bool) const\n"
    "    octave_value::diag_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_diag_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatDiagMatrix result;
  
  SWIG_check_num_args("octave_value::float_diag_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_diag_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_diag_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_diag_matrix_value(arg2);
  {
    FloatDiagMatrix * resultptr = new FloatDiagMatrix((const FloatDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_diag_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatDiagMatrix result;
  
  SWIG_check_num_args("octave_value::float_diag_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_diag_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_diag_matrix_value();
  {
    FloatDiagMatrix * resultptr = new FloatDiagMatrix((const FloatDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_diag_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_diag_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_diag_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_diag_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_diag_matrix_value(bool) const\n"
    "    octave_value::float_diag_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_diag_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ComplexDiagMatrix result;
  
  SWIG_check_num_args("octave_value::complex_diag_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_diag_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_diag_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_diag_matrix_value(arg2);
  {
    ComplexDiagMatrix * resultptr = new ComplexDiagMatrix((const ComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_diag_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ComplexDiagMatrix result;
  
  SWIG_check_num_args("octave_value::complex_diag_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_diag_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_diag_matrix_value();
  {
    ComplexDiagMatrix * resultptr = new ComplexDiagMatrix((const ComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_diag_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_diag_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_diag_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_diag_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_diag_matrix_value(bool) const\n"
    "    octave_value::complex_diag_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_diag_matrix_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplexDiagMatrix result;
  
  SWIG_check_num_args("octave_value::float_complex_diag_matrix_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_diag_matrix_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_diag_matrix_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_diag_matrix_value(arg2);
  {
    FloatComplexDiagMatrix * resultptr = new FloatComplexDiagMatrix((const FloatComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_diag_matrix_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplexDiagMatrix result;
  
  SWIG_check_num_args("octave_value::float_complex_diag_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_diag_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_diag_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_diag_matrix_value();
  {
    FloatComplexDiagMatrix * resultptr = new FloatComplexDiagMatrix((const FloatComplexDiagMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexDiagMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_diag_matrix_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_diag_matrix_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_diag_matrix_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_diag_matrix_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_diag_matrix_value(bool) const\n"
    "    octave_value::float_complex_diag_matrix_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_perm_matrix_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  PermMatrix result;
  
  SWIG_check_num_args("octave_value::perm_matrix_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::perm_matrix_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_perm_matrix_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->perm_matrix_value();
  {
    PermMatrix * resultptr = new PermMatrix((const PermMatrix &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_PermMatrix,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int8_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< signed char > > result;
  
  SWIG_check_num_args("octave_value::int8_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int8_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int8_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int8_scalar_value();
  {
    octave_int8 * resultptr = new octave_int8((const octave_int8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_signed_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int16_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< short > > result;
  
  SWIG_check_num_args("octave_value::int16_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int16_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int16_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int16_scalar_value();
  {
    octave_int16 * resultptr = new octave_int16((const octave_int16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int32_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< int > > result;
  
  SWIG_check_num_args("octave_value::int32_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int32_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int32_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int32_scalar_value();
  {
    octave_int32 * resultptr = new octave_int32((const octave_int32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int64_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< long > > result;
  
  SWIG_check_num_args("octave_value::int64_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int64_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int64_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int64_scalar_value();
  {
    octave_int64 * resultptr = new octave_int64((const octave_int64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint8_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< unsigned char > > result;
  
  SWIG_check_num_args("octave_value::uint8_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint8_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint8_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint8_scalar_value();
  {
    octave_uint8 * resultptr = new octave_uint8((const octave_uint8 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_unsigned_char_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint16_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< unsigned short > > result;
  
  SWIG_check_num_args("octave_value::uint16_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint16_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint16_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint16_scalar_value();
  {
    octave_uint16 * resultptr = new octave_uint16((const octave_uint16 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_unsigned_short_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint32_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< unsigned int > > result;
  
  SWIG_check_num_args("octave_value::uint32_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint32_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint32_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint32_scalar_value();
  {
    octave_uint32 * resultptr = new octave_uint32((const octave_uint32 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_unsigned_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint64_scalar_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< octave_int< unsigned long > > result;
  
  SWIG_check_num_args("octave_value::uint64_scalar_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint64_scalar_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint64_scalar_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint64_scalar_value();
  {
    octave_uint64 * resultptr = new octave_uint64((const octave_uint64 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_intT_unsigned_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int8_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int8NDArray result;
  
  SWIG_check_num_args("octave_value::int8_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int8_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int8_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int8_array_value();
  {
    int8NDArray * resultptr = new int8NDArray((const int8NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int8NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int16_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int16NDArray result;
  
  SWIG_check_num_args("octave_value::int16_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int16_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int16_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int16_array_value();
  {
    int16NDArray * resultptr = new int16NDArray((const int16NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int16NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int32_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int32NDArray result;
  
  SWIG_check_num_args("octave_value::int32_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int32_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int32_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int32_array_value();
  {
    int32NDArray * resultptr = new int32NDArray((const int32NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int32NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int64_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int64NDArray result;
  
  SWIG_check_num_args("octave_value::int64_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int64_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int64_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int64_array_value();
  {
    int64NDArray * resultptr = new int64NDArray((const int64NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_int64NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint8_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  uint8NDArray result;
  
  SWIG_check_num_args("octave_value::uint8_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint8_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint8_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint8_array_value();
  {
    uint8NDArray * resultptr = new uint8NDArray((const uint8NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint8NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint16_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  uint16NDArray result;
  
  SWIG_check_num_args("octave_value::uint16_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint16_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint16_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint16_array_value();
  {
    uint16NDArray * resultptr = new uint16NDArray((const uint16NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint16NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint32_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  uint32NDArray result;
  
  SWIG_check_num_args("octave_value::uint32_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint32_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint32_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint32_array_value();
  {
    uint32NDArray * resultptr = new uint32NDArray((const uint32NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint32NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_uint64_array_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  uint64NDArray result;
  
  SWIG_check_num_args("octave_value::uint64_array_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::uint64_array_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_uint64_array_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->uint64_array_value();
  {
    uint64NDArray * resultptr = new uint64NDArray((const uint64NDArray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_uint64NDArray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_string_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::string_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::string_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::string_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_string_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->string_value(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_string_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::string_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::string_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_string_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->string_value();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_string_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_string_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_string_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_string_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::string_value(bool) const\n"
    "    octave_value::string_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_string_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value::string_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::string_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::string_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_string_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->string_vector_value(arg2);
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_string_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value::string_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::string_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_string_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->string_vector_value();
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_string_vector_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_string_vector_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_string_vector_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_string_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::string_vector_value(bool) const\n"
    "    octave_value::string_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_cell_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Cell result;
  
  SWIG_check_num_args("octave_value::cell_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::cell_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_cell_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->cell_value();
  {
    Cell * resultptr = new Cell((const Cell &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Cell,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_cellstr_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< std::string > > result;
  
  SWIG_check_num_args("octave_value::cellstr_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::cellstr_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_cellstr_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->cellstr_value();
  {
    Array< std::string > * resultptr = new Array< std::string >((const Array< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_range_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave::range< double > result;
  
  SWIG_check_num_args("octave_value::range_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::range_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_range_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->range_value();
  {
    octave::range< double > * resultptr = new octave::range< double >((const octave::range< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave__rangeT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_map_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_map result;
  
  SWIG_check_num_args("octave_value::map_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::map_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_map_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->map_value();
  {
    octave_map * resultptr = new octave_map((const octave_map &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_map,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_scalar_map_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_scalar_map result;
  
  SWIG_check_num_args("octave_value::scalar_map_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::scalar_map_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_scalar_map_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->scalar_map_value();
  {
    octave_scalar_map * resultptr = new octave_scalar_map((const octave_scalar_map &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_scalar_map,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_map_keys(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value::map_keys",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::map_keys",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_map_keys",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->map_keys();
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_nparents(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::size_t result;
  
  SWIG_check_num_args("octave_value::nparents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::nparents",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_nparents",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->nparents();
  {
    std::size_t * resultptr = new std::size_t((const std::size_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__size_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_parent_class_name_list(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave_value::parent_class_name_list",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::parent_class_name_list",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_parent_class_name_list",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->parent_class_name_list();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_parent_class_names(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value::parent_class_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::parent_class_names",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_parent_class_names",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->parent_class_names();
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_find_parent_class(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::find_parent_class",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::find_parent_class",1,"octave_value *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::find_parent_class",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_find_parent_class",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (octave_base_value *)(arg1)->find_parent_class((std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_instance_of(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_instance_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_instance_of",1,"octave_value const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value::is_instance_of",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_instance_of",1,SWIGTYPE_p_octave_value);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((octave_value const *)arg1)->is_instance_of((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_classdef_object_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_classdef *result = 0 ;
  
  SWIG_check_num_args("octave_value::classdef_object_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::classdef_object_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::classdef_object_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_classdef_object_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_classdef *)((octave_value const *)arg1)->classdef_object_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_classdef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_classdef_object_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_classdef *result = 0 ;
  
  SWIG_check_num_args("octave_value::classdef_object_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::classdef_object_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_classdef_object_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_classdef *)((octave_value const *)arg1)->classdef_object_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_classdef,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_classdef_object_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_classdef_object_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_classdef_object_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_classdef_object_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::classdef_object_value(bool) const\n"
    "    octave_value::classdef_object_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_function_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_function *result = 0 ;
  
  SWIG_check_num_args("octave_value::function_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::function_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::function_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_function_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_function *)((octave_value const *)arg1)->function_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_function_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_function *result = 0 ;
  
  SWIG_check_num_args("octave_value::function_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::function_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_function_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_function *)((octave_value const *)arg1)->function_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_function_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_function_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_function_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_function_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::function_value(bool) const\n"
    "    octave_value::function_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_user_function_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_user_function *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_function_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_function_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::user_function_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_function_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_user_function *)((octave_value const *)arg1)->user_function_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_function_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_user_function *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_function_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_function_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_function_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_user_function *)((octave_value const *)arg1)->user_function_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_function,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_function_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_user_function_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_user_function_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_user_function_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::user_function_value(bool) const\n"
    "    octave_value::user_function_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_user_script_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_user_script *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_script_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_script_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::user_script_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_script_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_user_script *)((octave_value const *)arg1)->user_script_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_script,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_script_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_user_script *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_script_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_script_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_script_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_user_script *)((octave_value const *)arg1)->user_script_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_script,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_script_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_user_script_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_user_script_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_user_script_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::user_script_value(bool) const\n"
    "    octave_value::user_script_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_user_code_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_user_code *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_code_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_code_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::user_code_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_code_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_user_code *)((octave_value const *)arg1)->user_code_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_code,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_code_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_user_code *result = 0 ;
  
  SWIG_check_num_args("octave_value::user_code_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::user_code_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_user_code_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_user_code *)((octave_value const *)arg1)->user_code_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_user_code,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_user_code_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_user_code_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_user_code_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_user_code_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::user_code_value(bool) const\n"
    "    octave_value::user_code_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_fcn_handle_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_fcn_handle *result = 0 ;
  
  SWIG_check_num_args("octave_value::fcn_handle_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::fcn_handle_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::fcn_handle_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fcn_handle_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (octave_fcn_handle *)((octave_value const *)arg1)->fcn_handle_value(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_fcn_handle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_fcn_handle_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_fcn_handle *result = 0 ;
  
  SWIG_check_num_args("octave_value::fcn_handle_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::fcn_handle_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fcn_handle_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_fcn_handle *)((octave_value const *)arg1)->fcn_handle_value();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_fcn_handle,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_fcn_handle_value(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_fcn_handle_value__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_fcn_handle_value__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_fcn_handle_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::fcn_handle_value(bool) const\n"
    "    octave_value::fcn_handle_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value::list_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::list_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_list_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->list_value();
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_column_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ColumnVector result;
  
  SWIG_check_num_args("octave_value::column_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::column_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::column_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->column_vector_value(arg2,arg3);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_column_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ColumnVector result;
  
  SWIG_check_num_args("octave_value::column_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::column_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->column_vector_value(arg2);
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_column_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ColumnVector result;
  
  SWIG_check_num_args("octave_value::column_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::column_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->column_vector_value();
  {
    ColumnVector * resultptr = new ColumnVector((const ColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_column_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_column_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_column_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_column_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_column_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::column_vector_value(bool,bool) const\n"
    "    octave_value::column_vector_value(bool) const\n"
    "    octave_value::column_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_column_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::complex_column_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_column_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::complex_column_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->complex_column_vector_value(arg2,arg3);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_column_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::complex_column_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_column_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_column_vector_value(arg2);
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_column_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::complex_column_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_column_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_column_vector_value();
  {
    ComplexColumnVector * resultptr = new ComplexColumnVector((const ComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_column_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_column_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_column_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_complex_column_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_column_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_column_vector_value(bool,bool) const\n"
    "    octave_value::complex_column_vector_value(bool) const\n"
    "    octave_value::complex_column_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_row_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  RowVector result;
  
  SWIG_check_num_args("octave_value::row_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::row_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::row_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->row_vector_value(arg2,arg3);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_row_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  RowVector result;
  
  SWIG_check_num_args("octave_value::row_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::row_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->row_vector_value(arg2);
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_row_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  RowVector result;
  
  SWIG_check_num_args("octave_value::row_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::row_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->row_vector_value();
  {
    RowVector * resultptr = new RowVector((const RowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_RowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_row_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_row_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_row_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_row_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_row_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::row_vector_value(bool,bool) const\n"
    "    octave_value::row_vector_value(bool) const\n"
    "    octave_value::row_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_row_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("octave_value::complex_row_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_row_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::complex_row_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->complex_row_vector_value(arg2,arg3);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_row_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("octave_value::complex_row_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_row_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_row_vector_value(arg2);
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_row_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  ComplexRowVector result;
  
  SWIG_check_num_args("octave_value::complex_row_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_row_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_row_vector_value();
  {
    ComplexRowVector * resultptr = new ComplexRowVector((const ComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_row_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_row_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_row_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_complex_row_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_row_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_row_vector_value(bool,bool) const\n"
    "    octave_value::complex_row_vector_value(bool) const\n"
    "    octave_value::complex_row_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_column_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("octave_value::float_column_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_column_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_column_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_column_vector_value(arg2,arg3);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_column_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("octave_value::float_column_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_column_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_column_vector_value(arg2);
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_column_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatColumnVector result;
  
  SWIG_check_num_args("octave_value::float_column_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_column_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_column_vector_value();
  {
    FloatColumnVector * resultptr = new FloatColumnVector((const FloatColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_column_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_column_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_column_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_column_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_column_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_column_vector_value(bool,bool) const\n"
    "    octave_value::float_column_vector_value(bool) const\n"
    "    octave_value::float_column_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_column_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::float_complex_column_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_complex_column_vector_value(arg2,arg3);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_column_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::float_complex_column_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_column_vector_value(arg2);
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_column_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplexColumnVector result;
  
  SWIG_check_num_args("octave_value::float_complex_column_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_column_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_column_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_column_vector_value();
  {
    FloatComplexColumnVector * resultptr = new FloatComplexColumnVector((const FloatComplexColumnVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexColumnVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_column_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_column_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_column_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_complex_column_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_column_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_column_vector_value(bool,bool) const\n"
    "    octave_value::float_complex_column_vector_value(bool) const\n"
    "    octave_value::float_complex_column_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_row_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FloatRowVector result;
  
  SWIG_check_num_args("octave_value::float_row_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_row_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_row_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_row_vector_value(arg2,arg3);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_row_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatRowVector result;
  
  SWIG_check_num_args("octave_value::float_row_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_row_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_row_vector_value(arg2);
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_row_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatRowVector result;
  
  SWIG_check_num_args("octave_value::float_row_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_row_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_row_vector_value();
  {
    FloatRowVector * resultptr = new FloatRowVector((const FloatRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_row_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_row_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_row_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_row_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_row_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_row_vector_value(bool,bool) const\n"
    "    octave_value::float_row_vector_value(bool) const\n"
    "    octave_value::float_row_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_row_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("octave_value::float_complex_row_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_complex_row_vector_value(arg2,arg3);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_row_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("octave_value::float_complex_row_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_row_vector_value(arg2);
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_row_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  FloatComplexRowVector result;
  
  SWIG_check_num_args("octave_value::float_complex_row_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_row_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_row_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_row_vector_value();
  {
    FloatComplexRowVector * resultptr = new FloatComplexRowVector((const FloatComplexRowVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_FloatComplexRowVector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_row_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_row_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_row_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_complex_row_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_row_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_row_vector_value(bool,bool) const\n"
    "    octave_value::float_complex_row_vector_value(bool) const\n"
    "    octave_value::float_complex_row_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_int_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  SwigValueWrapper< Array< int > > result;
  
  SWIG_check_num_args("octave_value::int_vector_value",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::int_vector_value",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave_value::int_vector_value",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((octave_value const *)arg1)->int_vector_value(arg2,arg3,arg4);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< int > > result;
  
  SWIG_check_num_args("octave_value::int_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::int_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->int_vector_value(arg2,arg3);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< int > > result;
  
  SWIG_check_num_args("octave_value::int_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::int_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->int_vector_value(arg2);
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_vector_value__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< int > > result;
  
  SWIG_check_num_args("octave_value::int_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::int_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_int_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->int_vector_value();
  {
    Array< int > * resultptr = new Array< int >((const Array< int > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_int_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_int_vector_value(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_int_vector_value__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_int_vector_value__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_int_vector_value__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_octave_value_int_vector_value__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_int_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::int_vector_value(bool,bool,bool) const\n"
    "    octave_value::int_vector_value(bool,bool) const\n"
    "    octave_value::int_vector_value(bool) const\n"
    "    octave_value::int_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_octave_idx_type_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::octave_idx_type_vector_value",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_octave_idx_type_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((octave_value const *)arg1)->octave_idx_type_vector_value(arg2,arg3,arg4);
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_octave_idx_type_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::octave_idx_type_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_octave_idx_type_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->octave_idx_type_vector_value(arg2,arg3);
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_octave_idx_type_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::octave_idx_type_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_octave_idx_type_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->octave_idx_type_vector_value(arg2);
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_octave_idx_type_vector_value__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::octave_idx_type_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::octave_idx_type_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_octave_idx_type_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->octave_idx_type_vector_value();
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_octave_idx_type_vector_value(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_octave_idx_type_vector_value__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_octave_idx_type_vector_value__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_octave_idx_type_vector_value__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_octave_value_octave_idx_type_vector_value__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_octave_idx_type_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::octave_idx_type_vector_value(bool,bool,bool) const\n"
    "    octave_value::octave_idx_type_vector_value(bool,bool) const\n"
    "    octave_value::octave_idx_type_vector_value(bool) const\n"
    "    octave_value::octave_idx_type_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< double > > result;
  
  SWIG_check_num_args("octave_value::vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->vector_value(arg2,arg3);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< double > > result;
  
  SWIG_check_num_args("octave_value::vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->vector_value(arg2);
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< double > > result;
  
  SWIG_check_num_args("octave_value::vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->vector_value();
  {
    Array< double > * resultptr = new Array< double >((const Array< double > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_double_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::vector_value(bool,bool) const\n"
    "    octave_value::vector_value(bool) const\n"
    "    octave_value::vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_complex_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< std::complex< double > > > result;
  
  SWIG_check_num_args("octave_value::complex_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::complex_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->complex_vector_value(arg2,arg3);
  {
    Array< Complex > * resultptr = new Array< Complex >((const Array< Complex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< std::complex< double > > > result;
  
  SWIG_check_num_args("octave_value::complex_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::complex_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->complex_vector_value(arg2);
  {
    Array< Complex > * resultptr = new Array< Complex >((const Array< Complex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< std::complex< double > > > result;
  
  SWIG_check_num_args("octave_value::complex_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::complex_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->complex_vector_value();
  {
    Array< Complex > * resultptr = new Array< Complex >((const Array< Complex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_double_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_complex_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_complex_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_complex_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_complex_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_complex_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::complex_vector_value(bool,bool) const\n"
    "    octave_value::complex_vector_value(bool) const\n"
    "    octave_value::complex_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< float > > result;
  
  SWIG_check_num_args("octave_value::float_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_vector_value(arg2,arg3);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< float > > result;
  
  SWIG_check_num_args("octave_value::float_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_vector_value(arg2);
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< float > > result;
  
  SWIG_check_num_args("octave_value::float_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_vector_value();
  {
    Array< float > * resultptr = new Array< float >((const Array< float > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_float_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_vector_value(bool,bool) const\n"
    "    octave_value::float_vector_value(bool) const\n"
    "    octave_value::float_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_float_complex_vector_value__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  SwigValueWrapper< Array< std::complex< float > > > result;
  
  SWIG_check_num_args("octave_value::float_complex_vector_value",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_vector_value",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::float_complex_vector_value",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->float_complex_vector_value(arg2,arg3);
  {
    Array< FloatComplex > * resultptr = new Array< FloatComplex >((const Array< FloatComplex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_vector_value__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  SwigValueWrapper< Array< std::complex< float > > > result;
  
  SWIG_check_num_args("octave_value::float_complex_vector_value",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_vector_value",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::float_complex_vector_value",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->float_complex_vector_value(arg2);
  {
    Array< FloatComplex > * resultptr = new Array< FloatComplex >((const Array< FloatComplex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_vector_value__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< std::complex< float > > > result;
  
  SWIG_check_num_args("octave_value::float_complex_vector_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::float_complex_vector_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_float_complex_vector_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->float_complex_vector_value();
  {
    Array< FloatComplex > * resultptr = new Array< FloatComplex >((const Array< FloatComplex > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_std__complexT_float_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_float_complex_vector_value(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_float_complex_vector_value__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_float_complex_vector_value__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_float_complex_vector_value__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_float_complex_vector_value'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::float_complex_vector_value(bool,bool) const\n"
    "    octave_value::float_complex_vector_value(bool) const\n"
    "    octave_value::float_complex_vector_value() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_maybe_economize(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::maybe_economize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::maybe_economize",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_maybe_economize",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->maybe_economize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_storable_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::storable_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::storable_value",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_storable_value",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->storable_value();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_make_storable_value(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::make_storable_value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::make_storable_value",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_make_storable_value",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->make_storable_value();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_str__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  char arg4 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::convert_to_str",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_str",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::convert_to_str",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::convert_to_str",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("octave_value::convert_to_str",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_str",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_tostring(L, 4))[0];
  result = ((octave_value const *)arg1)->convert_to_str(arg2,arg3,arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_str__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::convert_to_str",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_str",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::convert_to_str",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::convert_to_str",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_str",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = ((octave_value const *)arg1)->convert_to_str(arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_str__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::convert_to_str",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_str",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::convert_to_str",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_str",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((octave_value const *)arg1)->convert_to_str(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_str__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::convert_to_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_str",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_str",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->convert_to_str();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_str(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_convert_to_str__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_convert_to_str__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_convert_to_str__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]) && (lua_rawlen(L,argv[3])==1);
          }
          if (_v) {
            return _wrap_octave_value_convert_to_str__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_convert_to_str'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::convert_to_str(bool,bool,char) const\n"
    "    octave_value::convert_to_str(bool,bool) const\n"
    "    octave_value::convert_to_str(bool) const\n"
    "    octave_value::convert_to_str() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_convert_to_str_internal(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  bool arg3 ;
  char arg4 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::convert_to_str_internal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_str_internal",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::convert_to_str_internal",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::convert_to_str_internal",3,"bool");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("octave_value::convert_to_str_internal",4,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_str_internal",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_tostring(L, 4))[0];
  result = ((octave_value const *)arg1)->convert_to_str_internal(arg2,arg3,arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_convert_to_row_or_column_vector(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::convert_to_row_or_column_vector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::convert_to_row_or_column_vector",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_convert_to_row_or_column_vector",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->convert_to_row_or_column_vector();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_as_scalar(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::print_as_scalar",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_as_scalar",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_as_scalar",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->print_as_scalar();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("octave_value::print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print",2,"std::ostream &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::print",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print",2,SWIGTYPE_p_std__ostream);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->print(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value::print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print",2,SWIGTYPE_p_std__ostream);
  }
  
  (arg1)->print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_print__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_print__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::print(std::ostream &,bool)\n"
    "    octave_value::print(std::ostream &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_print_raw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("octave_value::print_raw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_raw",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_raw",2,"std::ostream &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::print_raw",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_raw",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_raw",2,SWIGTYPE_p_std__ostream);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  ((octave_value const *)arg1)->print_raw(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_raw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value::print_raw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_raw",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_raw",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_raw",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_raw",2,SWIGTYPE_p_std__ostream);
  }
  
  ((octave_value const *)arg1)->print_raw(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_raw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_print_raw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_print_raw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_print_raw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::print_raw(std::ostream &,bool) const\n"
    "    octave_value::print_raw(std::ostream &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_print_name_tag(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  bool result;
  
  SWIG_check_num_args("octave_value::print_name_tag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_name_tag",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_name_tag",2,"std::ostream &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::print_name_tag",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_name_tag",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_name_tag",2,SWIGTYPE_p_std__ostream);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (bool)((octave_value const *)arg1)->print_name_tag(*arg2,(std::string const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_with_name(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave_value::print_with_name",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_with_name",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_with_name",2,"std::ostream &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::print_with_name",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_with_name",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_with_name",2,SWIGTYPE_p_std__ostream);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  ((octave_value const *)arg1)->print_with_name(*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_short_disp(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value::short_disp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::short_disp",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::short_disp",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_short_disp",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_short_disp",2,SWIGTYPE_p_std__ostream);
  }
  
  ((octave_value const *)arg1)->short_disp(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_edit_display(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  float_display_format *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_idx_type arg4 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::edit_display",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::edit_display",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::edit_display",2,"float_display_format const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::edit_display",3,"octave_idx_type");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave_value::edit_display",4,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_edit_display",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float_display_format,0))){
    SWIG_fail_ptr("octave_value_edit_display",2,SWIGTYPE_p_float_display_format);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (octave_idx_type)lua_tonumber(L, 4);
  result = ((octave_value const *)arg1)->edit_display((float_display_format const &)*arg2,arg3,arg4);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_type_id(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  int result;
  
  SWIG_check_num_args("octave_value::type_id",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::type_id",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_type_id",1,SWIGTYPE_p_octave_value);
  }
  
  result = (int)((octave_value const *)arg1)->type_id();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_type_name(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::type_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::type_name",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_type_name",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->type_name();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_class_name(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::string result;
  
  SWIG_check_num_args("octave_value::class_name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::class_name",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_class_name",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->class_name();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_non_const_unary_op__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value::unary_op arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::non_const_unary_op",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::non_const_unary_op",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::non_const_unary_op",2,"octave_value::unary_op");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_non_const_unary_op",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_value::unary_op)(int)lua_tonumber(L, 2);
  result = (octave_value *) &(arg1)->non_const_unary_op(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_non_const_unary_op__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value::unary_op arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::string temp3 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::non_const_unary_op",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::non_const_unary_op",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::non_const_unary_op",2,"octave_value::unary_op");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::non_const_unary_op",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::non_const_unary_op",4,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_non_const_unary_op",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_value::unary_op)(int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_non_const_unary_op",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (octave_value *) &(arg1)->non_const_unary_op(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_non_const_unary_op(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_non_const_unary_op__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_non_const_unary_op__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_non_const_unary_op'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::non_const_unary_op(octave_value::unary_op)\n"
    "    octave_value::non_const_unary_op(octave_value::unary_op,std::string const &,std::list< octave_value_list > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_do_non_const_unary_op(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value::unary_op arg2 ;
  std::string *arg3 = 0 ;
  std::list< octave_value_list > *arg4 = 0 ;
  std::string temp3 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::do_non_const_unary_op",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::do_non_const_unary_op",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::do_non_const_unary_op",2,"octave_value::unary_op");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::do_non_const_unary_op",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::do_non_const_unary_op",4,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_do_non_const_unary_op",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_value::unary_op)(int)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("octave_value_do_non_const_unary_op",4,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (octave_value *) &(arg1)->do_non_const_unary_op(arg2,(std::string const &)*arg3,(std::list< octave_value_list > const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_get_rep(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::get_rep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::get_rep",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_get_rep",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_base_value *) &((octave_value const *)arg1)->get_rep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_copy_of(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::is_copy_of",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_copy_of",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::is_copy_of",2,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_copy_of",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_copy_of",2,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->is_copy_of((octave_value const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_info__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave_value::print_info",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_info",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_info",2,"std::ostream &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value::print_info",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_info",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_info",2,SWIGTYPE_p_std__ostream);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  ((octave_value const *)arg1)->print_info(*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_info__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value::print_info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::print_info",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::print_info",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_print_info",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_print_info",2,SWIGTYPE_p_std__ostream);
  }
  
  ((octave_value const *)arg1)->print_info(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_print_info(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_print_info__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__ostream, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_print_info__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_print_info'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::print_info(std::ostream &,std::string const &) const\n"
    "    octave_value::print_info(std::ostream &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_save_ascii(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::save_ascii",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::save_ascii",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::save_ascii",2,"std::ostream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_save_ascii",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_save_ascii",2,SWIGTYPE_p_std__ostream);
  }
  
  result = (bool)(arg1)->save_ascii(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_load_ascii(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::istream *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::load_ascii",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::load_ascii",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::load_ascii",2,"std::istream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_load_ascii",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("octave_value_load_ascii",2,SWIGTYPE_p_std__istream);
  }
  
  result = (bool)(arg1)->load_ascii(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_save_binary(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("octave_value::save_binary",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::save_binary",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::save_binary",2,"std::ostream &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::save_binary",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_save_binary",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__ostream,0))){
    SWIG_fail_ptr("octave_value_save_binary",2,SWIGTYPE_p_std__ostream);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->save_binary(*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_load_binary(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  std::istream *arg2 = 0 ;
  bool arg3 ;
  octave::mach_info::float_format arg4 ;
  octave::mach_info::float_format *argp4 ;
  bool result;
  
  SWIG_check_num_args("octave_value::load_binary",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::load_binary",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::load_binary",2,"std::istream &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value::load_binary",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::load_binary",4,"octave::mach_info::float_format");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_load_binary",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("octave_value_load_binary",2,SWIGTYPE_p_std__istream);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_octave__mach_info__float_format,0))){
    SWIG_fail_ptr("octave_value_load_binary",4,SWIGTYPE_p_octave__mach_info__float_format);
  }
  arg4 = *argp4;
  
  result = (bool)(arg1)->load_binary(*arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_save_hdf5(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_hdf5_id arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  octave_hdf5_id *argp2 ;
  bool result;
  
  SWIG_check_num_args("octave_value::save_hdf5",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::save_hdf5",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::save_hdf5",2,"octave_hdf5_id");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("octave_value::save_hdf5",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave_value::save_hdf5",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_save_hdf5",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_octave_hdf5_id,0))){
    SWIG_fail_ptr("octave_value_save_hdf5",2,SWIGTYPE_p_octave_hdf5_id);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->save_hdf5(arg2,(char const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_load_hdf5(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_hdf5_id arg2 ;
  char *arg3 = (char *) 0 ;
  octave_hdf5_id *argp2 ;
  bool result;
  
  SWIG_check_num_args("octave_value::load_hdf5",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::load_hdf5",1,"octave_value *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::load_hdf5",2,"octave_hdf5_id");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("octave_value::load_hdf5",3,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_load_hdf5",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_octave_hdf5_id,0))){
    SWIG_fail_ptr("octave_value_load_hdf5",2,SWIGTYPE_p_octave_hdf5_id);
  }
  arg2 = *argp2;
  
  arg3 = (char *)lua_tostring(L, 3);
  result = (bool)(arg1)->load_hdf5(arg2,(char const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_write(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave::stream *arg2 = 0 ;
  int arg3 ;
  oct_data_conv::data_type arg4 ;
  int arg5 ;
  octave::mach_info::float_format arg6 ;
  oct_data_conv::data_type *argp4 ;
  octave::mach_info::float_format *argp6 ;
  int result;
  
  SWIG_check_num_args("octave_value::write",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::write",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::write",2,"octave::stream &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::write",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::write",4,"oct_data_conv::data_type");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("octave_value::write",5,"int");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("octave_value::write",6,"octave::mach_info::float_format");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_write",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave__stream,0))){
    SWIG_fail_ptr("octave_value_write",2,SWIGTYPE_p_octave__stream);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_oct_data_conv__data_type,0))){
    SWIG_fail_ptr("octave_value_write",4,SWIGTYPE_p_oct_data_conv__data_type);
  }
  arg4 = *argp4;
  
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&argp6,SWIGTYPE_p_octave__mach_info__float_format,0))){
    SWIG_fail_ptr("octave_value_write",6,SWIGTYPE_p_octave__mach_info__float_format);
  }
  arg6 = *argp6;
  
  result = (int)((octave_value const *)arg1)->write(*arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_internal_rep(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value *result = 0 ;
  
  SWIG_check_num_args("octave_value::internal_rep",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::internal_rep",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_internal_rep",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_base_value *)((octave_value const *)arg1)->internal_rep();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_base_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_mex_get_data__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  mxClassID arg2 ;
  mxComplexity arg3 ;
  mxClassID *argp2 ;
  mxComplexity *argp3 ;
  void *result = 0 ;
  
  SWIG_check_num_args("octave_value::mex_get_data",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::mex_get_data",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::mex_get_data",2,"mxClassID");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::mex_get_data",3,"mxComplexity");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mxClassID,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",2,SWIGTYPE_p_mxClassID);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_mxComplexity,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",3,SWIGTYPE_p_mxComplexity);
  }
  arg3 = *argp3;
  
  result = (void *)((octave_value const *)arg1)->mex_get_data(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_mex_get_data__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  mxClassID arg2 ;
  mxClassID *argp2 ;
  void *result = 0 ;
  
  SWIG_check_num_args("octave_value::mex_get_data",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::mex_get_data",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::mex_get_data",2,"mxClassID");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_mxClassID,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",2,SWIGTYPE_p_mxClassID);
  }
  arg2 = *argp2;
  
  result = (void *)((octave_value const *)arg1)->mex_get_data(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_mex_get_data__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  void *result = 0 ;
  
  SWIG_check_num_args("octave_value::mex_get_data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::mex_get_data",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_mex_get_data",1,SWIGTYPE_p_octave_value);
  }
  
  result = (void *)((octave_value const *)arg1)->mex_get_data();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_mex_get_data(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_mex_get_data__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mxClassID, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_mex_get_data__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_mxClassID, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_mxComplexity, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_mex_get_data__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_mex_get_data'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::mex_get_data(mxClassID,mxComplexity) const\n"
    "    octave_value::mex_get_data(mxClassID) const\n"
    "    octave_value::mex_get_data() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_mex_get_ir(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type *result = 0 ;
  
  SWIG_check_num_args("octave_value::mex_get_ir",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::mex_get_ir",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_mex_get_ir",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type *)((octave_value const *)arg1)->mex_get_ir();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_mex_get_jc(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type *result = 0 ;
  
  SWIG_check_num_args("octave_value::mex_get_jc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::mex_get_jc",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_mex_get_jc",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_idx_type *)((octave_value const *)arg1)->mex_get_jc();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_long,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_mxArray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool arg2 ;
  mxArray *result = 0 ;
  
  SWIG_check_num_args("octave_value::as_mxArray",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_mxArray",1,"octave_value const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave_value::as_mxArray",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_mxArray",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (mxArray *)((octave_value const *)arg1)->as_mxArray(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mxArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_mxArray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  mxArray *result = 0 ;
  
  SWIG_check_num_args("octave_value::as_mxArray",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::as_mxArray",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_as_mxArray",1,SWIGTYPE_p_octave_value);
  }
  
  result = (mxArray *)((octave_value const *)arg1)->as_mxArray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_mxArray,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_as_mxArray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_as_mxArray__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_as_mxArray__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_as_mxArray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::as_mxArray(bool) const\n"
    "    octave_value::as_mxArray() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_diag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::diag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::diag",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::diag",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_diag",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((octave_value const *)arg1)->diag(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_diag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::diag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::diag",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_diag",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->diag();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_diag__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::diag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::diag",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::diag",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::diag",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_diag",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((octave_value const *)arg1)->diag(arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_diag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_diag__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_diag__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_diag__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_diag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::diag(octave_idx_type) const\n"
    "    octave_value::diag() const\n"
    "    octave_value::diag(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_sort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  sortmode arg3 ;
  sortmode *argp3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::sort",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::sort",3,"sortmode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_sortmode,0))){
    SWIG_fail_ptr("octave_value_sort",3,SWIGTYPE_p_sortmode);
  }
  arg3 = *argp3;
  
  result = ((octave_value const *)arg1)->sort(arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::sort",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((octave_value const *)arg1)->sort(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->sort();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  octave_idx_type arg3 ;
  sortmode arg4 ;
  sortmode *argp4 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::sort",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::sort",3,"octave_idx_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value::sort",4,"sortmode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("octave_value_sort",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_sortmode,0))){
    SWIG_fail_ptr("octave_value_sort",4,SWIGTYPE_p_sortmode);
  }
  arg4 = *argp4;
  
  result = ((octave_value const *)arg1)->sort(*arg2,arg3,arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  octave_idx_type arg3 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::sort",2,"Array< octave_idx_type > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value::sort",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("octave_value_sort",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((octave_value const *)arg1)->sort(*arg2,arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  Array< octave_idx_type > *arg2 = 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::sort",2,"Array< octave_idx_type > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ArrayT_long_t,0))){
    SWIG_fail_ptr("octave_value_sort",2,SWIGTYPE_p_ArrayT_long_t);
  }
  
  result = ((octave_value const *)arg1)->sort(*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_sort__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_sort__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_sort__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_sort__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_sortmode, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_sort__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_ArrayT_long_t, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_sortmode, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_sort__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_sort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::sort(octave_idx_type,sortmode) const\n"
    "    octave_value::sort(octave_idx_type) const\n"
    "    octave_value::sort() const\n"
    "    octave_value::sort(Array< octave_idx_type > &,octave_idx_type,sortmode) const\n"
    "    octave_value::sort(Array< octave_idx_type > &,octave_idx_type) const\n"
    "    octave_value::sort(Array< octave_idx_type > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_issorted__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  sortmode arg2 ;
  sortmode *argp2 ;
  sortmode result;
  
  SWIG_check_num_args("octave_value::issorted",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::issorted",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::issorted",2,"sortmode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_issorted",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sortmode,0))){
    SWIG_fail_ptr("octave_value_issorted",2,SWIGTYPE_p_sortmode);
  }
  arg2 = *argp2;
  
  result = ((octave_value const *)arg1)->issorted(arg2);
  {
    sortmode * resultptr = new sortmode((const sortmode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sortmode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_issorted__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  sortmode result;
  
  SWIG_check_num_args("octave_value::issorted",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::issorted",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_issorted",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->issorted();
  {
    sortmode * resultptr = new sortmode((const sortmode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sortmode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_issorted(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_issorted__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sortmode, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_issorted__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_issorted'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::issorted(sortmode) const\n"
    "    octave_value::issorted() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_sort_rows_idx__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  sortmode arg2 ;
  sortmode *argp2 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::sort_rows_idx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort_rows_idx",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::sort_rows_idx",2,"sortmode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort_rows_idx",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sortmode,0))){
    SWIG_fail_ptr("octave_value_sort_rows_idx",2,SWIGTYPE_p_sortmode);
  }
  arg2 = *argp2;
  
  result = ((octave_value const *)arg1)->sort_rows_idx(arg2);
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort_rows_idx__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  SwigValueWrapper< Array< long > > result;
  
  SWIG_check_num_args("octave_value::sort_rows_idx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sort_rows_idx",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sort_rows_idx",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->sort_rows_idx();
  {
    Array< octave_idx_type > * resultptr = new Array< octave_idx_type >((const Array< octave_idx_type > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ArrayT_long_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sort_rows_idx(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_sort_rows_idx__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sortmode, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_sort_rows_idx__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_sort_rows_idx'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::sort_rows_idx(sortmode) const\n"
    "    octave_value::sort_rows_idx() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_is_sorted_rows__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  sortmode arg2 ;
  sortmode *argp2 ;
  sortmode result;
  
  SWIG_check_num_args("octave_value::is_sorted_rows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_sorted_rows",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::is_sorted_rows",2,"sortmode");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_sorted_rows",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_sortmode,0))){
    SWIG_fail_ptr("octave_value_is_sorted_rows",2,SWIGTYPE_p_sortmode);
  }
  arg2 = *argp2;
  
  result = ((octave_value const *)arg1)->is_sorted_rows(arg2);
  {
    sortmode * resultptr = new sortmode((const sortmode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sortmode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_sorted_rows__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  sortmode result;
  
  SWIG_check_num_args("octave_value::is_sorted_rows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::is_sorted_rows",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_is_sorted_rows",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->is_sorted_rows();
  {
    sortmode * resultptr = new sortmode((const sortmode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_sortmode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_is_sorted_rows(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_is_sorted_rows__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_sortmode, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_is_sorted_rows__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_is_sorted_rows'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value::is_sorted_rows(sortmode) const\n"
    "    octave_value::is_sorted_rows() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_lock(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::lock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::lock",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_lock",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->lock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_unlock(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::unlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::unlock",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_unlock",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->unlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_islocked(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::islocked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::islocked",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_islocked",1,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)((octave_value const *)arg1)->islocked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_call_object_destructor(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  
  SWIG_check_num_args("octave_value::call_object_destructor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::call_object_destructor",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_call_object_destructor",1,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->call_object_destructor();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_dump(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::dump",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::dump",1,"octave_value const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_dump",1,SWIGTYPE_p_octave_value);
  }
  
  result = ((octave_value const *)arg1)->dump();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_abs(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::abs",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::abs",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_abs",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->abs();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_acos(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::acos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::acos",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_acos",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->acos();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_acosh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::acosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::acosh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_acosh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->acosh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_angle(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::angle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::angle",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_angle",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->angle();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_arg(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::arg",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::arg",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_arg",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->arg();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_asin(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::asin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::asin",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_asin",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->asin();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_asinh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::asinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::asinh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_asinh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->asinh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_atan(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::atan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::atan",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_atan",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->atan();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_atanh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::atanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::atanh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_atanh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->atanh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_cbrt(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::cbrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::cbrt",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_cbrt",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->cbrt();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_ceil(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::ceil",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::ceil",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_ceil",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->ceil();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_conj(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::conj",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::conj",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_conj",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->conj();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_cos(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::cos",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::cos",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_cos",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->cos();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_cosh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::cosh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::cosh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_cosh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->cosh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erf(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erf",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erf",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erf();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erfinv(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erfinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erfinv",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erfinv",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erfinv();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erfcinv(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erfcinv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erfcinv",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erfcinv",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erfcinv();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erfc(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erfc",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erfc",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erfc",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erfc();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erfcx(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erfcx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erfcx",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erfcx",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erfcx();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_erfi(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::erfi",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::erfi",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_erfi",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->erfi();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_dawson(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::dawson",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::dawson",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_dawson",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->dawson();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_exp(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::exp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::exp",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_exp",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->exp();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_expm1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::expm1",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::expm1",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_expm1",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->expm1();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isfinite(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::isfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isfinite",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isfinite",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->isfinite();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_fix(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::fix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::fix",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fix",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->fix();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_floor(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::floor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::floor",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_floor",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->floor();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_gamma(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::gamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::gamma",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_gamma",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->gamma();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_imag(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::imag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::imag",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_imag",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->imag();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isinf(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::isinf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isinf",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isinf",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->isinf();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isna(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::isna",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isna",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isna",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->isna();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_isnan(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::isnan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::isnan",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_isnan",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->isnan();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_lgamma(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::lgamma",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::lgamma",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_lgamma",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->lgamma();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_log(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::log",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::log",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_log",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->log();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_log2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::log2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::log2",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_log2",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->log2();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_log10(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::log10",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::log10",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_log10",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->log10();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_log1p(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::log1p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::log1p",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_log1p",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->log1p();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_real(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::real",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::real",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_real",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->real();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_round(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::round",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::round",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_round",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->round();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_roundb(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::roundb",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::roundb",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_roundb",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->roundb();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_signum(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::signum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::signum",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_signum",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->signum();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sin(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sin",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sin",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->sin();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sinh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sinh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sinh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sinh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->sinh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_sqrt(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::sqrt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::sqrt",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_sqrt",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->sqrt();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_tan(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::tan",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::tan",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_tan",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->tan();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_tanh(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::tanh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::tanh",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_tanh",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->tanh();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisalnum(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisalnum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisalnum",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisalnum",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisalnum();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisalpha(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisalpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisalpha",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisalpha",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisalpha();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisascii(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisascii",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisascii",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisascii",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisascii();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xiscntrl(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xiscntrl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xiscntrl",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xiscntrl",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xiscntrl();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisdigit(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisdigit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisdigit",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisdigit",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisdigit();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisgraph(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisgraph",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisgraph",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisgraph",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisgraph();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xislower(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xislower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xislower",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xislower",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xislower();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisprint(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisprint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisprint",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisprint",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisprint();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xispunct(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xispunct",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xispunct",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xispunct",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xispunct();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisspace(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisspace",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisspace",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisspace",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisspace();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisupper(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisupper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisupper",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisupper",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisupper();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xisxdigit(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xisxdigit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xisxdigit",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xisxdigit",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xisxdigit();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xsignbit(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xsignbit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xsignbit",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xsignbit",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xsignbit();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xtolower(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xtolower",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xtolower",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xtolower",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xtolower();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_xtoupper(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::xtoupper",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::xtoupper",1,"octave_value *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_xtoupper",1,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->xtoupper();
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_map(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_base_value::unary_mapper_t arg2 ;
  octave_base_value::unary_mapper_t *argp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::map",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::map",1,"octave_value const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value::map",2,"octave_base_value::unary_mapper_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_map",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_octave_base_value__unary_mapper_t,0))){
    SWIG_fail_ptr("octave_value_map",2,SWIGTYPE_p_octave_base_value__unary_mapper_t);
  }
  arg2 = *argp2;
  
  result = ((octave_value const *)arg1)->map(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_fast_elem_extract(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value::fast_elem_extract",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::fast_elem_extract",1,"octave_value const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::fast_elem_extract",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fast_elem_extract",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = ((octave_value const *)arg1)->fast_elem_extract(arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_fast_elem_insert(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = (octave_value *) 0 ;
  octave_idx_type arg2 ;
  octave_value *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value::fast_elem_insert",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value::fast_elem_insert",1,"octave_value *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value::fast_elem_insert",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value::fast_elem_insert",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fast_elem_insert",1,SWIGTYPE_p_octave_value);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_fast_elem_insert",3,SWIGTYPE_p_octave_value);
  }
  
  result = (bool)(arg1)->fast_elem_insert(arg2,(octave_value const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_octave_value(void *obj) {
octave_value *arg1 = (octave_value *) obj;
delete arg1;
}
static int _proxy__wrap_new_octave_value(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_octave_value);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_octave_value_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_octave_value_methods[]= {
    { "clone", _wrap_octave_value_clone},
    { "empty_clone", _wrap_octave_value_empty_clone},
    { "make_unique", _wrap_octave_value_make_unique},
    { "break_closure_cycles", _wrap_octave_value_break_closure_cycles},
    { "get_count", _wrap_octave_value_get_count},
    { "numeric_conversion_function", _wrap_octave_value_numeric_conversion_function},
    { "numeric_demotion_function", _wrap_octave_value_numeric_demotion_function},
    { "maybe_mutate", _wrap_octave_value_maybe_mutate},
    { "squeeze", _wrap_octave_value_squeeze},
    { "full_value", _wrap_octave_value_full_value},
    { "as_double", _wrap_octave_value_as_double},
    { "as_single", _wrap_octave_value_as_single},
    { "as_int8", _wrap_octave_value_as_int8},
    { "as_int16", _wrap_octave_value_as_int16},
    { "as_int32", _wrap_octave_value_as_int32},
    { "as_int64", _wrap_octave_value_as_int64},
    { "as_uint8", _wrap_octave_value_as_uint8},
    { "as_uint16", _wrap_octave_value_as_uint16},
    { "as_uint32", _wrap_octave_value_as_uint32},
    { "as_uint64", _wrap_octave_value_as_uint64},
    { "try_narrowing_conversion", _wrap_octave_value_try_narrowing_conversion},
    { "size", _wrap_octave_value_size},
    { "xnumel", _wrap_octave_value_xnumel},
    { "single_subsref", _wrap_octave_value_single_subsref},
    { "subsref", _wrap_octave_value_subsref},
    { "next_subsref", _wrap_octave_value_next_subsref},
    { "index_op", _wrap_octave_value_index_op},
    { "do_index_op", _wrap_octave_value_do_index_op},
    { "subsasgn", _wrap_octave_value_subsasgn},
    { "undef_subsasgn", _wrap_octave_value_undef_subsasgn},
    { "assign", _wrap_octave_value_assign},
    { "index_vector", _wrap_octave_value_index_vector},
    { "dims", _wrap_octave_value_dims},
    { "get_dims_str", _wrap_octave_value_get_dims_str},
    { "rows", _wrap_octave_value_rows},
    { "columns", _wrap_octave_value_columns},
    { "length", _wrap_octave_value_length},
    { "ndims", _wrap_octave_value_ndims},
    { "all_zero_dims", _wrap_octave_value_all_zero_dims},
    { "is_zero_by_zero", _wrap_octave_value_is_zero_by_zero},
    { "numel", _wrap_octave_value_numel},
    { "byte_size", _wrap_octave_value_byte_size},
    { "nnz", _wrap_octave_value_nnz},
    { "nzmax", _wrap_octave_value_nzmax},
    { "nfields", _wrap_octave_value_nfields},
    { "reshape", _wrap_octave_value_reshape},
    { "permute", _wrap_octave_value_permute},
    { "ipermute", _wrap_octave_value_ipermute},
    { "resize", _wrap_octave_value_resize},
    { "matrix_type", _wrap_octave_value_matrix_type},
    { "is_defined", _wrap_octave_value_is_defined},
    { "is_undefined", _wrap_octave_value_is_undefined},
    { "is_legacy_object", _wrap_octave_value_is_legacy_object},
    { "isempty", _wrap_octave_value_isempty},
    { "iscell", _wrap_octave_value_iscell},
    { "iscellstr", _wrap_octave_value_iscellstr},
    { "is_real_scalar", _wrap_octave_value_is_real_scalar},
    { "is_real_matrix", _wrap_octave_value_is_real_matrix},
    { "is_complex_scalar", _wrap_octave_value_is_complex_scalar},
    { "is_complex_matrix", _wrap_octave_value_is_complex_matrix},
    { "is_bool_scalar", _wrap_octave_value_is_bool_scalar},
    { "is_bool_matrix", _wrap_octave_value_is_bool_matrix},
    { "is_char_matrix", _wrap_octave_value_is_char_matrix},
    { "is_diag_matrix", _wrap_octave_value_is_diag_matrix},
    { "is_perm_matrix", _wrap_octave_value_is_perm_matrix},
    { "is_string", _wrap_octave_value_is_string},
    { "is_sq_string", _wrap_octave_value_is_sq_string},
    { "is_dq_string", _wrap_octave_value_is_dq_string},
    { "is_range", _wrap_octave_value_is_range},
    { "isstruct", _wrap_octave_value_isstruct},
    { "is_classdef_meta", _wrap_octave_value_is_classdef_meta},
    { "is_classdef_object", _wrap_octave_value_is_classdef_object},
    { "is_classdef_superclass_ref", _wrap_octave_value_is_classdef_superclass_ref},
    { "is_package", _wrap_octave_value_is_package},
    { "isobject", _wrap_octave_value_isobject},
    { "isjava", _wrap_octave_value_isjava},
    { "is_cs_list", _wrap_octave_value_is_cs_list},
    { "is_magic_colon", _wrap_octave_value_is_magic_colon},
    { "is_magic_int", _wrap_octave_value_is_magic_int},
    { "isnull", _wrap_octave_value_isnull},
    { "all", _wrap_octave_value_all},
    { "any", _wrap_octave_value_any},
    { "builtin_type", _wrap_octave_value_builtin_type},
    { "is_double_type", _wrap_octave_value_is_double_type},
    { "is_single_type", _wrap_octave_value_is_single_type},
    { "isfloat", _wrap_octave_value_isfloat},
    { "is_int8_type", _wrap_octave_value_is_int8_type},
    { "is_int16_type", _wrap_octave_value_is_int16_type},
    { "is_int32_type", _wrap_octave_value_is_int32_type},
    { "is_int64_type", _wrap_octave_value_is_int64_type},
    { "is_uint8_type", _wrap_octave_value_is_uint8_type},
    { "is_uint16_type", _wrap_octave_value_is_uint16_type},
    { "is_uint32_type", _wrap_octave_value_is_uint32_type},
    { "is_uint64_type", _wrap_octave_value_is_uint64_type},
    { "isinteger", _wrap_octave_value_isinteger},
    { "islogical", _wrap_octave_value_islogical},
    { "isreal", _wrap_octave_value_isreal},
    { "iscomplex", _wrap_octave_value_iscomplex},
    { "is_scalar_type", _wrap_octave_value_is_scalar_type},
    { "is_matrix_type", _wrap_octave_value_is_matrix_type},
    { "isnumeric", _wrap_octave_value_isnumeric},
    { "issparse", _wrap_octave_value_issparse},
    { "is_true", _wrap_octave_value_is_true},
    { "is_equal", _wrap_octave_value_is_equal},
    { "is_constant", _wrap_octave_value_is_constant},
    { "is_function_handle", _wrap_octave_value_is_function_handle},
    { "is_anonymous_function", _wrap_octave_value_is_anonymous_function},
    { "is_inline_function", _wrap_octave_value_is_inline_function},
    { "is_function", _wrap_octave_value_is_function},
    { "is_user_script", _wrap_octave_value_is_user_script},
    { "is_user_function", _wrap_octave_value_is_user_function},
    { "is_user_code", _wrap_octave_value_is_user_code},
    { "is_builtin_function", _wrap_octave_value_is_builtin_function},
    { "is_dld_function", _wrap_octave_value_is_dld_function},
    { "is_mex_function", _wrap_octave_value_is_mex_function},
    { "erase_subfunctions", _wrap_octave_value_erase_subfunctions},
    { "eval", _wrap_octave_value_eval},
    { "short_value", _wrap_octave_value_short_value},
    { "ushort_value", _wrap_octave_value_ushort_value},
    { "int_value", _wrap_octave_value_int_value},
    { "uint_value", _wrap_octave_value_uint_value},
    { "nint_value", _wrap_octave_value_nint_value},
    { "long_value", _wrap_octave_value_long_value},
    { "ulong_value", _wrap_octave_value_ulong_value},
    { "int64_value", _wrap_octave_value_int64_value},
    { "uint64_value", _wrap_octave_value_uint64_value},
    { "idx_type_value", _wrap_octave_value_idx_type_value},
    { "double_value", _wrap_octave_value_double_value},
    { "float_value", _wrap_octave_value_float_value},
    { "scalar_value", _wrap_octave_value_scalar_value},
    { "float_scalar_value", _wrap_octave_value_float_scalar_value},
    { "matrix_value", _wrap_octave_value_matrix_value},
    { "float_matrix_value", _wrap_octave_value_float_matrix_value},
    { "array_value", _wrap_octave_value_array_value},
    { "float_array_value", _wrap_octave_value_float_array_value},
    { "complex_value", _wrap_octave_value_complex_value},
    { "float_complex_value", _wrap_octave_value_float_complex_value},
    { "complex_matrix_value", _wrap_octave_value_complex_matrix_value},
    { "float_complex_matrix_value", _wrap_octave_value_float_complex_matrix_value},
    { "complex_array_value", _wrap_octave_value_complex_array_value},
    { "float_complex_array_value", _wrap_octave_value_float_complex_array_value},
    { "bool_value", _wrap_octave_value_bool_value},
    { "bool_matrix_value", _wrap_octave_value_bool_matrix_value},
    { "bool_array_value", _wrap_octave_value_bool_array_value},
    { "char_matrix_value", _wrap_octave_value_char_matrix_value},
    { "char_array_value", _wrap_octave_value_char_array_value},
    { "sparse_matrix_value", _wrap_octave_value_sparse_matrix_value},
    { "sparse_complex_matrix_value", _wrap_octave_value_sparse_complex_matrix_value},
    { "sparse_bool_matrix_value", _wrap_octave_value_sparse_bool_matrix_value},
    { "diag_matrix_value", _wrap_octave_value_diag_matrix_value},
    { "float_diag_matrix_value", _wrap_octave_value_float_diag_matrix_value},
    { "complex_diag_matrix_value", _wrap_octave_value_complex_diag_matrix_value},
    { "float_complex_diag_matrix_value", _wrap_octave_value_float_complex_diag_matrix_value},
    { "perm_matrix_value", _wrap_octave_value_perm_matrix_value},
    { "int8_scalar_value", _wrap_octave_value_int8_scalar_value},
    { "int16_scalar_value", _wrap_octave_value_int16_scalar_value},
    { "int32_scalar_value", _wrap_octave_value_int32_scalar_value},
    { "int64_scalar_value", _wrap_octave_value_int64_scalar_value},
    { "uint8_scalar_value", _wrap_octave_value_uint8_scalar_value},
    { "uint16_scalar_value", _wrap_octave_value_uint16_scalar_value},
    { "uint32_scalar_value", _wrap_octave_value_uint32_scalar_value},
    { "uint64_scalar_value", _wrap_octave_value_uint64_scalar_value},
    { "int8_array_value", _wrap_octave_value_int8_array_value},
    { "int16_array_value", _wrap_octave_value_int16_array_value},
    { "int32_array_value", _wrap_octave_value_int32_array_value},
    { "int64_array_value", _wrap_octave_value_int64_array_value},
    { "uint8_array_value", _wrap_octave_value_uint8_array_value},
    { "uint16_array_value", _wrap_octave_value_uint16_array_value},
    { "uint32_array_value", _wrap_octave_value_uint32_array_value},
    { "uint64_array_value", _wrap_octave_value_uint64_array_value},
    { "string_value", _wrap_octave_value_string_value},
    { "string_vector_value", _wrap_octave_value_string_vector_value},
    { "cell_value", _wrap_octave_value_cell_value},
    { "cellstr_value", _wrap_octave_value_cellstr_value},
    { "range_value", _wrap_octave_value_range_value},
    { "map_value", _wrap_octave_value_map_value},
    { "scalar_map_value", _wrap_octave_value_scalar_map_value},
    { "map_keys", _wrap_octave_value_map_keys},
    { "nparents", _wrap_octave_value_nparents},
    { "parent_class_name_list", _wrap_octave_value_parent_class_name_list},
    { "parent_class_names", _wrap_octave_value_parent_class_names},
    { "find_parent_class", _wrap_octave_value_find_parent_class},
    { "is_instance_of", _wrap_octave_value_is_instance_of},
    { "classdef_object_value", _wrap_octave_value_classdef_object_value},
    { "function_value", _wrap_octave_value_function_value},
    { "user_function_value", _wrap_octave_value_user_function_value},
    { "user_script_value", _wrap_octave_value_user_script_value},
    { "user_code_value", _wrap_octave_value_user_code_value},
    { "fcn_handle_value", _wrap_octave_value_fcn_handle_value},
    { "list_value", _wrap_octave_value_list_value},
    { "column_vector_value", _wrap_octave_value_column_vector_value},
    { "complex_column_vector_value", _wrap_octave_value_complex_column_vector_value},
    { "row_vector_value", _wrap_octave_value_row_vector_value},
    { "complex_row_vector_value", _wrap_octave_value_complex_row_vector_value},
    { "float_column_vector_value", _wrap_octave_value_float_column_vector_value},
    { "float_complex_column_vector_value", _wrap_octave_value_float_complex_column_vector_value},
    { "float_row_vector_value", _wrap_octave_value_float_row_vector_value},
    { "float_complex_row_vector_value", _wrap_octave_value_float_complex_row_vector_value},
    { "int_vector_value", _wrap_octave_value_int_vector_value},
    { "octave_idx_type_vector_value", _wrap_octave_value_octave_idx_type_vector_value},
    { "vector_value", _wrap_octave_value_vector_value},
    { "complex_vector_value", _wrap_octave_value_complex_vector_value},
    { "float_vector_value", _wrap_octave_value_float_vector_value},
    { "float_complex_vector_value", _wrap_octave_value_float_complex_vector_value},
    { "maybe_economize", _wrap_octave_value_maybe_economize},
    { "storable_value", _wrap_octave_value_storable_value},
    { "make_storable_value", _wrap_octave_value_make_storable_value},
    { "convert_to_str", _wrap_octave_value_convert_to_str},
    { "convert_to_str_internal", _wrap_octave_value_convert_to_str_internal},
    { "convert_to_row_or_column_vector", _wrap_octave_value_convert_to_row_or_column_vector},
    { "print_as_scalar", _wrap_octave_value_print_as_scalar},
    { "print", _wrap_octave_value_print},
    { "print_raw", _wrap_octave_value_print_raw},
    { "print_name_tag", _wrap_octave_value_print_name_tag},
    { "print_with_name", _wrap_octave_value_print_with_name},
    { "short_disp", _wrap_octave_value_short_disp},
    { "edit_display", _wrap_octave_value_edit_display},
    { "type_id", _wrap_octave_value_type_id},
    { "type_name", _wrap_octave_value_type_name},
    { "class_name", _wrap_octave_value_class_name},
    { "non_const_unary_op", _wrap_octave_value_non_const_unary_op},
    { "do_non_const_unary_op", _wrap_octave_value_do_non_const_unary_op},
    { "get_rep", _wrap_octave_value_get_rep},
    { "is_copy_of", _wrap_octave_value_is_copy_of},
    { "print_info", _wrap_octave_value_print_info},
    { "save_ascii", _wrap_octave_value_save_ascii},
    { "load_ascii", _wrap_octave_value_load_ascii},
    { "save_binary", _wrap_octave_value_save_binary},
    { "load_binary", _wrap_octave_value_load_binary},
    { "save_hdf5", _wrap_octave_value_save_hdf5},
    { "load_hdf5", _wrap_octave_value_load_hdf5},
    { "write", _wrap_octave_value_write},
    { "internal_rep", _wrap_octave_value_internal_rep},
    { "mex_get_data", _wrap_octave_value_mex_get_data},
    { "mex_get_ir", _wrap_octave_value_mex_get_ir},
    { "mex_get_jc", _wrap_octave_value_mex_get_jc},
    { "as_mxArray", _wrap_octave_value_as_mxArray},
    { "diag", _wrap_octave_value_diag},
    { "sort", _wrap_octave_value_sort},
    { "issorted", _wrap_octave_value_issorted},
    { "sort_rows_idx", _wrap_octave_value_sort_rows_idx},
    { "is_sorted_rows", _wrap_octave_value_is_sorted_rows},
    { "lock", _wrap_octave_value_lock},
    { "unlock", _wrap_octave_value_unlock},
    { "islocked", _wrap_octave_value_islocked},
    { "call_object_destructor", _wrap_octave_value_call_object_destructor},
    { "dump", _wrap_octave_value_dump},
    { "abs", _wrap_octave_value_abs},
    { "acos", _wrap_octave_value_acos},
    { "acosh", _wrap_octave_value_acosh},
    { "angle", _wrap_octave_value_angle},
    { "arg", _wrap_octave_value_arg},
    { "asin", _wrap_octave_value_asin},
    { "asinh", _wrap_octave_value_asinh},
    { "atan", _wrap_octave_value_atan},
    { "atanh", _wrap_octave_value_atanh},
    { "cbrt", _wrap_octave_value_cbrt},
    { "ceil", _wrap_octave_value_ceil},
    { "conj", _wrap_octave_value_conj},
    { "cos", _wrap_octave_value_cos},
    { "cosh", _wrap_octave_value_cosh},
    { "erf", _wrap_octave_value_erf},
    { "erfinv", _wrap_octave_value_erfinv},
    { "erfcinv", _wrap_octave_value_erfcinv},
    { "erfc", _wrap_octave_value_erfc},
    { "erfcx", _wrap_octave_value_erfcx},
    { "erfi", _wrap_octave_value_erfi},
    { "dawson", _wrap_octave_value_dawson},
    { "exp", _wrap_octave_value_exp},
    { "expm1", _wrap_octave_value_expm1},
    { "isfinite", _wrap_octave_value_isfinite},
    { "fix", _wrap_octave_value_fix},
    { "floor", _wrap_octave_value_floor},
    { "gamma", _wrap_octave_value_gamma},
    { "imag", _wrap_octave_value_imag},
    { "isinf", _wrap_octave_value_isinf},
    { "isna", _wrap_octave_value_isna},
    { "isnan", _wrap_octave_value_isnan},
    { "lgamma", _wrap_octave_value_lgamma},
    { "log", _wrap_octave_value_log},
    { "log2", _wrap_octave_value_log2},
    { "log10", _wrap_octave_value_log10},
    { "log1p", _wrap_octave_value_log1p},
    { "real", _wrap_octave_value_real},
    { "round", _wrap_octave_value_round},
    { "roundb", _wrap_octave_value_roundb},
    { "signum", _wrap_octave_value_signum},
    { "sin", _wrap_octave_value_sin},
    { "sinh", _wrap_octave_value_sinh},
    { "sqrt", _wrap_octave_value_sqrt},
    { "tan", _wrap_octave_value_tan},
    { "tanh", _wrap_octave_value_tanh},
    { "xisalnum", _wrap_octave_value_xisalnum},
    { "xisalpha", _wrap_octave_value_xisalpha},
    { "xisascii", _wrap_octave_value_xisascii},
    { "xiscntrl", _wrap_octave_value_xiscntrl},
    { "xisdigit", _wrap_octave_value_xisdigit},
    { "xisgraph", _wrap_octave_value_xisgraph},
    { "xislower", _wrap_octave_value_xislower},
    { "xisprint", _wrap_octave_value_xisprint},
    { "xispunct", _wrap_octave_value_xispunct},
    { "xisspace", _wrap_octave_value_xisspace},
    { "xisupper", _wrap_octave_value_xisupper},
    { "xisxdigit", _wrap_octave_value_xisxdigit},
    { "xsignbit", _wrap_octave_value_xsignbit},
    { "xtolower", _wrap_octave_value_xtolower},
    { "xtoupper", _wrap_octave_value_xtoupper},
    { "map", _wrap_octave_value_map},
    { "fast_elem_extract", _wrap_octave_value_fast_elem_extract},
    { "fast_elem_insert", _wrap_octave_value_fast_elem_insert},
    {0,0}
};
static swig_lua_method swig_octave_value_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_octave_value_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_octave_value_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("op_not", octave_value::op_not)},
    {SWIG_LUA_CONSTTAB_INT("op_uplus", octave_value::op_uplus)},
    {SWIG_LUA_CONSTTAB_INT("op_uminus", octave_value::op_uminus)},
    {SWIG_LUA_CONSTTAB_INT("op_transpose", octave_value::op_transpose)},
    {SWIG_LUA_CONSTTAB_INT("op_hermitian", octave_value::op_hermitian)},
    {SWIG_LUA_CONSTTAB_INT("op_incr", octave_value::op_incr)},
    {SWIG_LUA_CONSTTAB_INT("op_decr", octave_value::op_decr)},
    {SWIG_LUA_CONSTTAB_INT("num_unary_ops", octave_value::num_unary_ops)},
    {SWIG_LUA_CONSTTAB_INT("unknown_unary_op", octave_value::unknown_unary_op)},
    {SWIG_LUA_CONSTTAB_INT("op_add", octave_value::op_add)},
    {SWIG_LUA_CONSTTAB_INT("op_sub", octave_value::op_sub)},
    {SWIG_LUA_CONSTTAB_INT("op_mul", octave_value::op_mul)},
    {SWIG_LUA_CONSTTAB_INT("op_div", octave_value::op_div)},
    {SWIG_LUA_CONSTTAB_INT("op_pow", octave_value::op_pow)},
    {SWIG_LUA_CONSTTAB_INT("op_ldiv", octave_value::op_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("op_lt", octave_value::op_lt)},
    {SWIG_LUA_CONSTTAB_INT("op_le", octave_value::op_le)},
    {SWIG_LUA_CONSTTAB_INT("op_eq", octave_value::op_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_ge", octave_value::op_ge)},
    {SWIG_LUA_CONSTTAB_INT("op_gt", octave_value::op_gt)},
    {SWIG_LUA_CONSTTAB_INT("op_ne", octave_value::op_ne)},
    {SWIG_LUA_CONSTTAB_INT("op_el_mul", octave_value::op_el_mul)},
    {SWIG_LUA_CONSTTAB_INT("op_el_div", octave_value::op_el_div)},
    {SWIG_LUA_CONSTTAB_INT("op_el_pow", octave_value::op_el_pow)},
    {SWIG_LUA_CONSTTAB_INT("op_el_ldiv", octave_value::op_el_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("op_el_and", octave_value::op_el_and)},
    {SWIG_LUA_CONSTTAB_INT("op_el_or", octave_value::op_el_or)},
    {SWIG_LUA_CONSTTAB_INT("op_struct_ref", octave_value::op_struct_ref)},
    {SWIG_LUA_CONSTTAB_INT("num_binary_ops", octave_value::num_binary_ops)},
    {SWIG_LUA_CONSTTAB_INT("unknown_binary_op", octave_value::unknown_binary_op)},
    {SWIG_LUA_CONSTTAB_INT("op_trans_mul", octave_value::op_trans_mul)},
    {SWIG_LUA_CONSTTAB_INT("op_mul_trans", octave_value::op_mul_trans)},
    {SWIG_LUA_CONSTTAB_INT("op_herm_mul", octave_value::op_herm_mul)},
    {SWIG_LUA_CONSTTAB_INT("op_mul_herm", octave_value::op_mul_herm)},
    {SWIG_LUA_CONSTTAB_INT("op_trans_ldiv", octave_value::op_trans_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("op_herm_ldiv", octave_value::op_herm_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("op_el_not_and", octave_value::op_el_not_and)},
    {SWIG_LUA_CONSTTAB_INT("op_el_not_or", octave_value::op_el_not_or)},
    {SWIG_LUA_CONSTTAB_INT("op_el_and_not", octave_value::op_el_and_not)},
    {SWIG_LUA_CONSTTAB_INT("op_el_or_not", octave_value::op_el_or_not)},
    {SWIG_LUA_CONSTTAB_INT("num_compound_binary_ops", octave_value::num_compound_binary_ops)},
    {SWIG_LUA_CONSTTAB_INT("unknown_compound_binary_op", octave_value::unknown_compound_binary_op)},
    {SWIG_LUA_CONSTTAB_INT("op_asn_eq", octave_value::op_asn_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_add_eq", octave_value::op_add_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_sub_eq", octave_value::op_sub_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_mul_eq", octave_value::op_mul_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_div_eq", octave_value::op_div_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_ldiv_eq", octave_value::op_ldiv_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_pow_eq", octave_value::op_pow_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_mul_eq", octave_value::op_el_mul_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_div_eq", octave_value::op_el_div_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_ldiv_eq", octave_value::op_el_ldiv_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_pow_eq", octave_value::op_el_pow_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_and_eq", octave_value::op_el_and_eq)},
    {SWIG_LUA_CONSTTAB_INT("op_el_or_eq", octave_value::op_el_or_eq)},
    {SWIG_LUA_CONSTTAB_INT("num_assign_ops", octave_value::num_assign_ops)},
    {SWIG_LUA_CONSTTAB_INT("unknown_assign_op", octave_value::unknown_assign_op)},
    {SWIG_LUA_CONSTTAB_INT("magic_colon_t", octave_value::magic_colon_t)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_octave_value_Sf_SwigStatic_methods[]= {
    { "assign_op_to_binary_op", _wrap_octave_value_assign_op_to_binary_op},
    { "binary_op_to_assign_op", _wrap_octave_value_binary_op_to_assign_op},
    { "unary_op_as_string", _wrap_octave_value_unary_op_as_string},
    { "unary_op_fcn_name", _wrap_octave_value_unary_op_fcn_name},
    { "binary_op_as_string", _wrap_octave_value_binary_op_as_string},
    { "binary_op_fcn_name", _wrap_octave_value_binary_op_fcn_name},
    { "assign_op_as_string", _wrap_octave_value_assign_op_as_string},
    { "empty_conv", _wrap_octave_value_empty_conv},
    {0,0}
};
static swig_lua_class* swig_octave_value_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_octave_value_Sf_SwigStatic = {
    "octave_value",
    swig_octave_value_Sf_SwigStatic_methods,
    swig_octave_value_Sf_SwigStatic_attributes,
    swig_octave_value_Sf_SwigStatic_constants,
    swig_octave_value_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_octave_value_bases[] = {0};
static const char *swig_octave_value_base_names[] = {0};
static swig_lua_class _wrap_class_octave_value = { "octave_value", "octave_value", &SWIGTYPE_p_octave_value,_proxy__wrap_new_octave_value, swig_delete_octave_value, swig_octave_value_methods, swig_octave_value_attributes, &swig_octave_value_Sf_SwigStatic, swig_octave_value_meta, swig_octave_value_bases, swig_octave_value_base_names };

static int _wrap_new_octave_value_list__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",0,0)
  result = (octave_value_list *)new octave_value_list();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"octave_idx_type");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  result = (octave_value_list *)new octave_value_list(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_idx_type arg1 ;
  octave_value *arg2 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"octave_idx_type");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value_list::octave_value_list",2,"octave_value const &");
  arg1 = (octave_idx_type)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_octave_value_list",2,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value_list *)new octave_value_list(arg1,(octave_value const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value_list *)new octave_value_list((octave_value const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Array< octave_value > *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"Array< octave_value > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ArrayT_octave_value_t,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_ArrayT_octave_value_t);
  }
  
  result = (octave_value_list *)new octave_value_list((Array< octave_value > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Cell *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"Cell const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Cell,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_Cell);
  }
  
  result = (octave_value_list *)new octave_value_list((Cell const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_value_list *)new octave_value_list((octave_value_list const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  std::list< octave_value > *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"std::list< octave_value > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__listT_octave_value_t,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_std__listT_octave_value_t);
  }
  
  result = (octave_value_list *)new octave_value_list((std::list< octave_value > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  std::list< octave_value_list > *arg1 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::octave_value_list",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave_value_list::octave_value_list",1,"std::list< octave_value_list > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__listT_octave_value_list_t,0))){
    SWIG_fail_ptr("new_octave_value_list",1,SWIGTYPE_p_std__listT_octave_value_list_t);
  }
  
  result = (octave_value_list *)new octave_value_list((std::list< octave_value_list > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_octave_value_list(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_octave_value_list__SWIG_0(L);
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_ArrayT_octave_value_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Cell, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__listT_octave_value_list_t, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_octave_value_list__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_octave_value_list__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_octave_value_list'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::octave_value_list()\n"
    "    octave_value_list::octave_value_list(octave_idx_type)\n"
    "    octave_value_list::octave_value_list(octave_idx_type,octave_value const &)\n"
    "    octave_value_list::octave_value_list(octave_value const &)\n"
    "    octave_value_list::octave_value_list(Array< octave_value > const &)\n"
    "    octave_value_list::octave_value_list(Cell const &)\n"
    "    octave_value_list::octave_value_list(octave_value_list const &)\n"
    "    octave_value_list::octave_value_list(std::list< octave_value > const &)\n"
    "    octave_value_list::octave_value_list(std::list< octave_value_list > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list___getitem(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  size_t arg2 ;
  octave_value result;
  
  SWIG_check_num_args("octave_value_list::__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::__getitem__",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::__getitem__",2,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list___getitem",1,SWIGTYPE_p_octave_value_list);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  result = octave_value_list___getitem____SWIG(arg1,arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list___setitem__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  size_t arg2 ;
  octave_value *arg3 = 0 ;
  
  SWIG_check_num_args("octave_value_list::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::__setitem__",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::__setitem__",2,"size_t");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value_list::__setitem__",3,"octave_value &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list___setitem",1,SWIGTYPE_p_octave_value_list);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_list___setitem",3,SWIGTYPE_p_octave_value);
  }
  
  octave_value_list___setitem____SWIG_0(arg1,arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list___setitem__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  SWIG_check_num_args("octave_value_list::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::__setitem__",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::__setitem__",2,"size_t");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value_list::__setitem__",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list___setitem",1,SWIGTYPE_p_octave_value_list);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  octave_value_list___setitem____SWIG_1(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list___setitem__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave_value_list::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::__setitem__",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::__setitem__",2,"size_t");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave_value_list::__setitem__",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list___setitem",1,SWIGTYPE_p_octave_value_list);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  octave_value_list___setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list___setitem__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("octave_value_list::__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::__setitem__",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::__setitem__",2,"size_t");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave_value_list::__setitem__",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list___setitem",1,SWIGTYPE_p_octave_value_list);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative");
  arg2 = (size_t)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  octave_value_list___setitem____SWIG_3(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list___setitem(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_list___setitem__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_list___setitem__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_list___setitem__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_list___setitem__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list___setitem'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::__setitem__(size_t,octave_value &)\n"
    "    octave_value_list::__setitem__(size_t,double)\n"
    "    octave_value_list::__setitem__(size_t,std::string const &)\n"
    "    octave_value_list::__setitem__(size_t,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_length(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type result;
  
  SWIG_check_num_args("octave_value_list::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::length",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_length",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_idx_type)((octave_value_list const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_empty(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value_list::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::empty",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_empty",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (bool)((octave_value_list const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_resize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_value *arg3 = 0 ;
  
  SWIG_check_num_args("octave_value_list::resize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::resize",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::resize",2,"octave_idx_type");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave_value_list::resize",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_resize",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_list_resize",3,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->resize(arg2,(octave_value const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_resize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("octave_value_list::resize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::resize",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::resize",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_resize",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->resize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_resize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_list_resize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_octave_value_list_resize__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list_resize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::resize(octave_idx_type,octave_value const &)\n"
    "    octave_value_list::resize(octave_idx_type)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_prepend(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_value *arg2 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::prepend",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::prepend",1,"octave_value_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value_list::prepend",2,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_prepend",1,SWIGTYPE_p_octave_value_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_list_prepend",2,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value_list *) &(arg1)->prepend((octave_value const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_append__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_value *arg2 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::append",1,"octave_value_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value_list::append",2,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_append",1,SWIGTYPE_p_octave_value_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("octave_value_list_append",2,SWIGTYPE_p_octave_value);
  }
  
  result = (octave_value_list *) &(arg1)->append((octave_value const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_append__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::append",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::append",1,"octave_value_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value_list::append",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_append",1,SWIGTYPE_p_octave_value_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_append",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_value_list *) &(arg1)->append((octave_value_list const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_append(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_list_append__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_octave_value_list_append__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list_append'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::append(octave_value const &)\n"
    "    octave_value_list::append(octave_value_list const &)\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_reverse(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_value_list *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::reverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::reverse",1,"octave_value_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_reverse",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (octave_value_list *) &(arg1)->reverse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value_list,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_slice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  bool arg4 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value_list::slice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::slice",1,"octave_value_list const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::slice",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value_list::slice",3,"octave_idx_type");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave_value_list::slice",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_slice",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = ((octave_value_list const *)arg1)->slice(arg2,arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_slice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value_list::slice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::slice",1,"octave_value_list const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::slice",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value_list::slice",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_slice",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((octave_value_list const *)arg1)->slice(arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_slice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_list_slice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_octave_value_list_slice__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list_slice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::slice(octave_idx_type,octave_idx_type,bool) const\n"
    "    octave_value_list::slice(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_splice__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_value_list *arg4 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value_list::splice",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::splice",1,"octave_value_list const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::splice",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value_list::splice",3,"octave_idx_type");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave_value_list::splice",4,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_splice",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_splice",4,SWIGTYPE_p_octave_value_list);
  }
  
  result = ((octave_value_list const *)arg1)->splice(arg2,arg3,(octave_value_list const &)*arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_splice__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_idx_type arg3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave_value_list::splice",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::splice",1,"octave_value_list const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::splice",2,"octave_idx_type");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave_value_list::splice",3,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_splice",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  arg3 = (octave_idx_type)lua_tonumber(L, 3);
  result = ((octave_value_list const *)arg1)->splice(arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_splice(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_octave_value_list_splice__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_octave_value_list_splice__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list_splice'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::splice(octave_idx_type,octave_idx_type,octave_value_list const &) const\n"
    "    octave_value_list::splice(octave_idx_type,octave_idx_type) const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_all_strings_p(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value_list::all_strings_p",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::all_strings_p",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_all_strings_p",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (bool)((octave_value_list const *)arg1)->all_strings_p();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_all_scalars(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value_list::all_scalars",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::all_scalars",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_all_scalars",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (bool)((octave_value_list const *)arg1)->all_scalars();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_any_cell(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value_list::any_cell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::any_cell",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_any_cell",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (bool)((octave_value_list const *)arg1)->any_cell();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_has_magic_colon(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave_value_list::has_magic_colon",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::has_magic_colon",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_has_magic_colon",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = (bool)((octave_value_list const *)arg1)->has_magic_colon();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_make_argv__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value_list::make_argv",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::make_argv",1,"octave_value_list const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave_value_list::make_argv",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_make_argv",1,SWIGTYPE_p_octave_value_list);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((octave_value_list const *)arg1)->make_argv((std::string const &)*arg2);
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_make_argv__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value_list::make_argv",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::make_argv",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_make_argv",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = ((octave_value_list const *)arg1)->make_argv();
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_make_argv(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_octave_value_list_make_argv__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_octave_value_list_make_argv__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'octave_value_list_make_argv'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave_value_list::make_argv(std::string const &) const\n"
    "    octave_value_list::make_argv() const\n");
  lua_error(L);return 0;
}


static int _wrap_octave_value_list_stash_name_tags(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  string_vector *arg2 = 0 ;
  
  SWIG_check_num_args("octave_value_list::stash_name_tags",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::stash_name_tags",1,"octave_value_list *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave_value_list::stash_name_tags",2,"string_vector const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_stash_name_tags",1,SWIGTYPE_p_octave_value_list);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_string_vector,0))){
    SWIG_fail_ptr("octave_value_list_stash_name_tags",2,SWIGTYPE_p_string_vector);
  }
  
  (arg1)->stash_name_tags((string_vector const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_name_tags(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  string_vector result;
  
  SWIG_check_num_args("octave_value_list::name_tags",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::name_tags",1,"octave_value_list const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_name_tags",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = ((octave_value_list const *)arg1)->name_tags();
  {
    string_vector * resultptr = new string_vector((const string_vector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_string_vector,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_make_storable_values(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  
  SWIG_check_num_args("octave_value_list::make_storable_values",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::make_storable_values",1,"octave_value_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_make_storable_values",1,SWIGTYPE_p_octave_value_list);
  }
  
  (arg1)->make_storable_values();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_xelem(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  octave_idx_type arg2 ;
  octave_value *result = 0 ;
  
  SWIG_check_num_args("octave_value_list::xelem",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::xelem",1,"octave_value_list *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave_value_list::xelem",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_xelem",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  result = (octave_value *) &(arg1)->xelem(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave_value,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_octave_value_list_clear(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = (octave_value_list *) 0 ;
  
  SWIG_check_num_args("octave_value_list::clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave_value_list::clear",1,"octave_value_list *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("octave_value_list_clear",1,SWIGTYPE_p_octave_value_list);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_octave_value_list(void *obj) {
octave_value_list *arg1 = (octave_value_list *) obj;
delete arg1;
}
static int _proxy__wrap_new_octave_value_list(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_octave_value_list);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_octave_value_list_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_octave_value_list_methods[]= {
    { "__getitem", _wrap_octave_value_list___getitem},
    { "__setitem", _wrap_octave_value_list___setitem},
    { "length", _wrap_octave_value_list_length},
    { "empty", _wrap_octave_value_list_empty},
    { "resize", _wrap_octave_value_list_resize},
    { "prepend", _wrap_octave_value_list_prepend},
    { "append", _wrap_octave_value_list_append},
    { "reverse", _wrap_octave_value_list_reverse},
    { "slice", _wrap_octave_value_list_slice},
    { "splice", _wrap_octave_value_list_splice},
    { "all_strings_p", _wrap_octave_value_list_all_strings_p},
    { "all_scalars", _wrap_octave_value_list_all_scalars},
    { "any_cell", _wrap_octave_value_list_any_cell},
    { "has_magic_colon", _wrap_octave_value_list_has_magic_colon},
    { "make_argv", _wrap_octave_value_list_make_argv},
    { "stash_name_tags", _wrap_octave_value_list_stash_name_tags},
    { "name_tags", _wrap_octave_value_list_name_tags},
    { "make_storable_values", _wrap_octave_value_list_make_storable_values},
    { "xelem", _wrap_octave_value_list_xelem},
    { "clear", _wrap_octave_value_list_clear},
    {0,0}
};
static swig_lua_method swig_octave_value_list_meta[] = {
    { "__getitem", _wrap_octave_value_list___getitem},
    { "__setitem", _wrap_octave_value_list___setitem},
    {0,0}
};

static swig_lua_attribute swig_octave_value_list_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_octave_value_list_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_octave_value_list_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_octave_value_list_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_octave_value_list_Sf_SwigStatic = {
    "octave_value_list",
    swig_octave_value_list_Sf_SwigStatic_methods,
    swig_octave_value_list_Sf_SwigStatic_attributes,
    swig_octave_value_list_Sf_SwigStatic_constants,
    swig_octave_value_list_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_octave_value_list_bases[] = {0};
static const char *swig_octave_value_list_base_names[] = {0};
static swig_lua_class _wrap_class_octave_value_list = { "octave_value_list", "octave_value_list", &SWIGTYPE_p_octave_value_list,_proxy__wrap_new_octave_value_list, swig_delete_octave_value_list, swig_octave_value_list_methods, swig_octave_value_list_attributes, &swig_octave_value_list_Sf_SwigStatic, swig_octave_value_list_meta, swig_octave_value_list_bases, swig_octave_value_list_base_names };

static int _wrap_new_interpreter(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *result = 0 ;
  
  SWIG_check_num_args("octave::interpreter::interpreter",0,0)
  result = (octave::interpreter *)new octave::interpreter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave__interpreter,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_intern_nargin(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_idx_type arg2 ;
  
  SWIG_check_num_args("octave::interpreter::intern_nargin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::intern_nargin",1,"octave::interpreter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave::interpreter::intern_nargin",2,"octave_idx_type");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_intern_nargin",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (octave_idx_type)lua_tonumber(L, 2);
  (arg1)->intern_nargin(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialize_history__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::initialize_history",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialize_history",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::initialize_history",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialize_history",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->initialize_history(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialize_history__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::initialize_history",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialize_history",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialize_history",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->initialize_history();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialize_history(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_initialize_history__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_initialize_history__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_initialize_history'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::initialize_history(bool)\n"
    "    octave::interpreter::initialize_history()\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_initialize_load_path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::initialize_load_path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialize_load_path",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::initialize_load_path",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialize_load_path",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->initialize_load_path(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialize_load_path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::initialize_load_path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialize_load_path",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialize_load_path",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->initialize_load_path();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialize_load_path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_initialize_load_path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_initialize_load_path__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_initialize_load_path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::initialize_load_path(bool)\n"
    "    octave::interpreter::initialize_load_path()\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_initialize(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialize",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialize",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_get_line_and_eval(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::get_line_and_eval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::get_line_and_eval",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_get_line_and_eval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->get_line_and_eval();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_parse_and_execute(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::parse_and_execute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::parse_and_execute",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::parse_and_execute",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::parse_and_execute",3,"bool &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_parse_and_execute",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("interpreter_parse_and_execute",3,SWIGTYPE_p_bool);
  }
  
  (arg1)->parse_and_execute((std::string const &)*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_execute(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  int result;
  
  SWIG_check_num_args("octave::interpreter::execute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::execute",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_execute",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (int)(arg1)->execute();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_server_mode(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::server_mode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::server_mode",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_server_mode",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->server_mode();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interactive__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::interactive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::interactive",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_interactive",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->interactive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interactive__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::interactive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::interactive",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::interactive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_interactive",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->interactive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interactive(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_interactive__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_interactive__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_interactive'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::interactive() const\n"
    "    octave::interpreter::interactive(bool)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_read_site_files(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::read_site_files",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::read_site_files",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::read_site_files",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_read_site_files",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->read_site_files(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_read_init_files(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::read_init_files",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::read_init_files",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::read_init_files",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_read_init_files",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->read_init_files(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_verbose(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::verbose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::verbose",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::verbose",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_verbose",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->verbose(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_traditional__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::traditional",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::traditional",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::traditional",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_traditional",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->traditional(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_traditional__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::traditional",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::traditional",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_traditional",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->traditional();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_traditional(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_traditional__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_traditional__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_traditional'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::traditional(bool)\n"
    "    octave::interpreter::traditional() const\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_inhibit_startup_message(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::inhibit_startup_message",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::inhibit_startup_message",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::inhibit_startup_message",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_inhibit_startup_message",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->inhibit_startup_message(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_in_top_level_repl(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::in_top_level_repl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::in_top_level_repl",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_in_top_level_repl",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->in_top_level_repl();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_initialized(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::initialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::initialized",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_initialized",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->initialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interrupt_all_in_process_group__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::interrupt_all_in_process_group",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::interrupt_all_in_process_group",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::interrupt_all_in_process_group",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_interrupt_all_in_process_group",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->interrupt_all_in_process_group(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interrupt_all_in_process_group__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::interrupt_all_in_process_group",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::interrupt_all_in_process_group",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_interrupt_all_in_process_group",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->interrupt_all_in_process_group();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interrupt_all_in_process_group(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_interrupt_all_in_process_group__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_interrupt_all_in_process_group__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_interrupt_all_in_process_group'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::interrupt_all_in_process_group(bool)\n"
    "    octave::interpreter::interrupt_all_in_process_group() const\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_chdir(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  int result;
  
  SWIG_check_num_args("octave::interpreter::chdir",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::chdir",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::chdir",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_chdir",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (int)(arg1)->chdir((std::string const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::mlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mlock",1,"octave::interpreter const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::mlock",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mlock",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ((octave::interpreter const *)arg1)->mlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::mlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mlock",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mlock",1,SWIGTYPE_p_octave__interpreter);
  }
  
  ((octave::interpreter const *)arg1)->mlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mlock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_mlock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_mlock__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_mlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::mlock(bool) const\n"
    "    octave::interpreter::mlock() const\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_munlock__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::munlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::munlock",1,"octave::interpreter const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::munlock",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_munlock",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  ((octave::interpreter const *)arg1)->munlock(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_munlock__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::munlock",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::munlock",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_munlock",1,SWIGTYPE_p_octave__interpreter);
  }
  
  ((octave::interpreter const *)arg1)->munlock();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mislocked__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::mislocked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mislocked",1,"octave::interpreter const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::mislocked",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mislocked",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((octave::interpreter const *)arg1)->mislocked(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mislocked__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::mislocked",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mislocked",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mislocked",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->mislocked();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_munlock__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::munlock",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::munlock",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::munlock",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_munlock",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->munlock((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_munlock(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_munlock__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_munlock__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_munlock__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_munlock'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::munlock(bool) const\n"
    "    octave::interpreter::munlock() const\n"
    "    octave::interpreter::munlock(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_mislocked__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::mislocked",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mislocked",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::mislocked",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mislocked",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->mislocked((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mislocked(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_mislocked__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_mislocked__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_mislocked__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_mislocked'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::mislocked(bool) const\n"
    "    octave::interpreter::mislocked() const\n"
    "    octave::interpreter::mislocked(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_mfilename__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  std::string result;
  
  SWIG_check_num_args("octave::interpreter::mfilename",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mfilename",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::mfilename",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mfilename",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((octave::interpreter const *)arg1)->mfilename((std::string const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mfilename__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string result;
  
  SWIG_check_num_args("octave::interpreter::mfilename",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mfilename",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mfilename",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = ((octave::interpreter const *)arg1)->mfilename();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mfilename(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_mfilename__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_mfilename__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_mfilename'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::mfilename(std::string const &) const\n"
    "    octave::interpreter::mfilename() const\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_eval_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int *arg4 = 0 ;
  int arg5 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::eval_string",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::eval_string",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::eval_string",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::interpreter::eval_string",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave::interpreter::eval_string",4,"int &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("octave::interpreter::eval_string",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_eval_string",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("interpreter_eval_string",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->eval_string((std::string const &)*arg2,arg3,*arg4,arg5);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_eval_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  int *arg4 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::eval_string",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::eval_string",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::eval_string",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::interpreter::eval_string",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave::interpreter::eval_string",4,"int &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_eval_string",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("interpreter_eval_string",4,SWIGTYPE_p_int);
  }
  
  result = (arg1)->eval_string((std::string const &)*arg2,arg3,*arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_eval_string__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value *arg2 = 0 ;
  bool arg3 ;
  int *arg4 = 0 ;
  int arg5 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::eval_string",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::eval_string",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::eval_string",2,"octave_value const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::interpreter::eval_string",3,"bool");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave::interpreter::eval_string",4,"int &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("octave::interpreter::eval_string",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_eval_string",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_eval_string",2,SWIGTYPE_p_octave_value);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("interpreter_eval_string",4,SWIGTYPE_p_int);
  }
  
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->eval_string((octave_value const &)*arg2,arg3,*arg4,arg5);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_eval_string(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_interpreter_eval_string__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_interpreter_eval_string__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_int, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_interpreter_eval_string__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_eval_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::eval_string(std::string const &,bool,int &,int)\n"
    "    octave::interpreter::eval_string(std::string const &,bool,int &)\n"
    "    octave::interpreter::eval_string(octave_value const &,bool,int &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_eval__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::eval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::eval",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::eval",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave::interpreter::eval",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_eval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->eval((std::string const &)*arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_eval__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  std::string temp3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::eval",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::eval",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::eval",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::eval",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave::interpreter::eval",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_eval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->eval((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_eval(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpreter_eval__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_eval__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_eval'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::eval(std::string const &,int)\n"
    "    octave::interpreter::eval(std::string const &,std::string const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_evalin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  std::string temp3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::evalin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::evalin",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::evalin",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::evalin",3,"std::string const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave::interpreter::evalin",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_evalin",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->evalin((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_evalin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::evalin",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::evalin",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::evalin",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::evalin",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("octave::interpreter::evalin",4,"std::string const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("octave::interpreter::evalin",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_evalin",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  arg5 = (int)lua_tonumber(L, 5);
  result = (arg1)->evalin((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_evalin(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_evalin__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_interpreter_evalin__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_evalin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::evalin(std::string const &,std::string const &,int)\n"
    "    octave::interpreter::evalin(std::string const &,std::string const &,std::string const &,int)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_feval__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value_list *arg3 = 0 ;
  int arg4 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave::interpreter::feval",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->feval((std::string const &)*arg2,(octave_value_list const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value_list *arg3 = 0 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->feval((std::string const &)*arg2,(octave_value_list const &)*arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->feval((std::string const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_function *arg2 = (octave_function *) 0 ;
  octave_value_list *arg3 = 0 ;
  int arg4 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_function *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave::interpreter::feval",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->feval(arg2,(octave_value_list const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_function *arg2 = (octave_function *) 0 ;
  octave_value_list *arg3 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_function *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->feval(arg2,(octave_value_list const &)*arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_function *arg2 = (octave_function *) 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_function);
  }
  
  result = (arg1)->feval(arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value *arg2 = 0 ;
  octave_value_list *arg3 = 0 ;
  int arg4 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_value const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("octave::interpreter::feval",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  arg4 = (int)lua_tonumber(L, 4);
  result = (arg1)->feval((octave_value const &)*arg2,(octave_value_list const &)*arg3,arg4);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value *arg2 = 0 ;
  octave_value_list *arg3 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_value const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",3,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->feval((octave_value const &)*arg2,(octave_value_list const &)*arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value *arg2 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_value);
  }
  
  result = (arg1)->feval((octave_value const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value_list *arg2 = 0 ;
  int arg3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_value_list const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave::interpreter::feval",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = (arg1)->feval((octave_value_list const &)*arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::interpreter::feval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::feval",1,"octave::interpreter *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::interpreter::feval",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_feval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("interpreter_feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = (arg1)->feval((octave_value_list const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_feval(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_interpreter_feval__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_interpreter_feval__SWIG_8(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_interpreter_feval__SWIG_10(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_feval__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_feval__SWIG_7(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_feval__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpreter_feval__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_feval__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_feval__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_feval__SWIG_6(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_feval__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_feval'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::feval(std::string const &,octave_value_list const &,int)\n"
    "    octave::interpreter::feval(std::string const &,octave_value_list const &)\n"
    "    octave::interpreter::feval(std::string const &)\n"
    "    octave::interpreter::feval(octave_function *,octave_value_list const &,int)\n"
    "    octave::interpreter::feval(octave_function *,octave_value_list const &)\n"
    "    octave::interpreter::feval(octave_function *)\n"
    "    octave::interpreter::feval(octave_value const &,octave_value_list const &,int)\n"
    "    octave::interpreter::feval(octave_value const &,octave_value_list const &)\n"
    "    octave::interpreter::feval(octave_value const &)\n"
    "    octave::interpreter::feval(octave_value_list const &,int)\n"
    "    octave::interpreter::feval(octave_value_list const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_make_function_handle(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::make_function_handle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::make_function_handle",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::make_function_handle",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_make_function_handle",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->make_function_handle((std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_install_variable(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::install_variable",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::install_variable",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::install_variable",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::install_variable",3,"octave_value const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave::interpreter::install_variable",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_install_variable",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_install_variable",3,SWIGTYPE_p_octave_value);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->install_variable((std::string const &)*arg2,(octave_value const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_global_varval(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::global_varval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::global_varval",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::global_varval",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_global_varval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((octave::interpreter const *)arg1)->global_varval((std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_global_assign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::global_assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::global_assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::global_assign",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::global_assign",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_global_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_global_assign",3,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->global_assign((std::string const &)*arg2,(octave_value const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_global_assign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::global_assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::global_assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::global_assign",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_global_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->global_assign((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_global_assign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_global_assign__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_global_assign__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_global_assign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::global_assign(std::string const &,octave_value const &)\n"
    "    octave::interpreter::global_assign(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_top_level_varval(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::top_level_varval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::top_level_varval",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::top_level_varval",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_top_level_varval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((octave::interpreter const *)arg1)->top_level_varval((std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_top_level_assign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::top_level_assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::top_level_assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::top_level_assign",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::top_level_assign",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_top_level_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_top_level_assign",3,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->top_level_assign((std::string const &)*arg2,(octave_value const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_top_level_assign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::top_level_assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::top_level_assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::top_level_assign",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_top_level_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->top_level_assign((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_top_level_assign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_top_level_assign__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_top_level_assign__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_top_level_assign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::top_level_assign(std::string const &,octave_value const &)\n"
    "    octave::interpreter::top_level_assign(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_is_variable(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::is_variable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::is_variable",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::is_variable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_is_variable",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((octave::interpreter const *)arg1)->is_variable((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_is_local_variable(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::is_local_variable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::is_local_variable",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::is_local_variable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_is_local_variable",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((octave::interpreter const *)arg1)->is_local_variable((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_varval(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::varval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::varval",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::varval",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_varval",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((octave::interpreter const *)arg1)->varval((std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_assign__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  octave_value *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::assign",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::assign",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::interpreter::assign",3,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_assign",3,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->assign((std::string const &)*arg2,(octave_value const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_assign__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::assign",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::assign",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_assign",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->assign((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_assign(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_assign__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_interpreter_assign__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_assign'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::assign(std::string const &,octave_value const &)\n"
    "    octave::interpreter::assign(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_assignin__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  octave_value *arg4 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave::interpreter::assignin",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::assignin",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::assignin",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::assignin",3,"std::string const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("octave::interpreter::assignin",4,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_assignin",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("interpreter_assignin",4,SWIGTYPE_p_octave_value);
  }
  
  (arg1)->assignin((std::string const &)*arg2,(std::string const &)*arg3,(octave_value const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_assignin__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave::interpreter::assignin",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::assignin",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::assignin",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::assignin",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_assignin",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->assignin((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_assignin(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpreter_assignin__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_interpreter_assignin__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_assignin'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::assignin(std::string const &,std::string const &,octave_value const &)\n"
    "    octave::interpreter::assignin(std::string const &,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_source_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave::interpreter::source_file",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::source_file",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::source_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::source_file",3,"std::string const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave::interpreter::source_file",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("octave::interpreter::source_file",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_source_file",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->source_file((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_source_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave::interpreter::source_file",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::source_file",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::source_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::source_file",3,"std::string const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave::interpreter::source_file",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_source_file",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->source_file((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_source_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp2 ;
  std::string temp3 ;
  
  SWIG_check_num_args("octave::interpreter::source_file",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::source_file",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::source_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::interpreter::source_file",3,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_source_file",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  (arg1)->source_file((std::string const &)*arg2,(std::string const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_source_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::source_file",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::source_file",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::source_file",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_source_file",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->source_file((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_source_file(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_source_file__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpreter_source_file__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_source_file__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_interpreter_source_file__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_source_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::source_file(std::string const &,std::string const &,bool,bool)\n"
    "    octave::interpreter::source_file(std::string const &,std::string const &,bool)\n"
    "    octave::interpreter::source_file(std::string const &,std::string const &)\n"
    "    octave::interpreter::source_file(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_at_top_level(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::at_top_level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::at_top_level",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_at_top_level",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->at_top_level();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_isglobal(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::isglobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::isglobal",1,"octave::interpreter const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::isglobal",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_isglobal",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)((octave::interpreter const *)arg1)->isglobal((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_find(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::interpreter::find",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::find",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::find",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_find",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->find((std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_all__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_all",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_all",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::clear_all",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_all",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->clear_all(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_all__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_all",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_all",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_all",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_all();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_all(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_clear_all__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_clear_all__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_clear_all'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::clear_all(bool)\n"
    "    octave::interpreter::clear_all()\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_clear_objects(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_objects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_objects",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_objects",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_objects();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_variable(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_variable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_variable",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_variable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_variable",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_variable((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_variable_pattern(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_variable_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_variable_pattern",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_variable_pattern",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_variable_pattern",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_variable_pattern((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_variable_regexp(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_variable_regexp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_variable_regexp",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_variable_regexp",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_variable_regexp",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_variable_regexp((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_variables(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_variables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_variables",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_variables",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_variables();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_global_variable(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_global_variable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_global_variable",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_global_variable",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_global_variable",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_global_variable((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_global_variable_pattern(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_global_variable_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_global_variable_pattern",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_global_variable_pattern",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_global_variable_pattern",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_global_variable_pattern((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_global_variable_regexp(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_global_variable_regexp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_global_variable_regexp",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_global_variable_regexp",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_global_variable_regexp",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_global_variable_regexp((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_global_variables(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_global_variables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_global_variables",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_global_variables",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_global_variables();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_functions__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_functions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_functions",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::clear_functions",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_functions",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->clear_functions(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_functions__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_functions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_functions",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_functions",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_functions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_functions(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_interpreter_clear_functions__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_clear_functions__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_clear_functions'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::clear_functions(bool)\n"
    "    octave::interpreter::clear_functions()\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_clear_function(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_function",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_function",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_function",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_function",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_function((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_symbol(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_symbol",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_symbol",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_symbol",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_symbol",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_symbol((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_function_pattern(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_function_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_function_pattern",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_function_pattern",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_function_pattern",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_function_pattern((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_function_regexp(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_function_regexp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_function_regexp",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_function_regexp",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_function_regexp",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_function_regexp((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_symbol_pattern(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_symbol_pattern",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_symbol_pattern",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_symbol_pattern",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_symbol_pattern",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_symbol_pattern((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_symbol_regexp(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::clear_symbol_regexp",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_symbol_regexp",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::clear_symbol_regexp",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_symbol_regexp",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->clear_symbol_regexp((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_variable_names(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::variable_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::variable_names",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_variable_names",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (arg1)->variable_names();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_top_level_variable_names(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::top_level_variable_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::top_level_variable_names",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_top_level_variable_names",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (arg1)->top_level_variable_names();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_global_variable_names(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::global_variable_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::global_variable_names",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_global_variable_names",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (arg1)->global_variable_names();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_user_function_names(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::user_function_names",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::user_function_names",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_user_function_names",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (arg1)->user_function_names();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_autoloaded_functions(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::list< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::autoloaded_functions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::autoloaded_functions",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_autoloaded_functions",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = ((octave::interpreter const *)arg1)->autoloaded_functions();
  {
    std::list< std::string > * resultptr = new std::list< std::string >((const std::list< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__listT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_interrupt(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::interrupt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::interrupt",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_interrupt",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->interrupt();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_pause(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::pause",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::pause",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_pause",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->pause();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_stop(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::stop",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_stop",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_add_debug_watch_expression(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::add_debug_watch_expression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::add_debug_watch_expression",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::add_debug_watch_expression",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_add_debug_watch_expression",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->add_debug_watch_expression((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_remove_debug_watch_expression(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::remove_debug_watch_expression",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::remove_debug_watch_expression",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::remove_debug_watch_expression",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_remove_debug_watch_expression",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->remove_debug_watch_expression((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_clear_debug_watch_expressions(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::clear_debug_watch_expressions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::clear_debug_watch_expressions",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_clear_debug_watch_expressions",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->clear_debug_watch_expressions();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_debug_watch_expressions(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  SwigValueWrapper< std::set< std::string > > result;
  
  SWIG_check_num_args("octave::interpreter::debug_watch_expressions",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::debug_watch_expressions",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_debug_watch_expressions",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = ((octave::interpreter const *)arg1)->debug_watch_expressions();
  {
    std::set< std::string > * resultptr = new std::set< std::string >((const std::set< std::string > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__setT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_resume(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::resume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::resume",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_resume",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->resume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_experimental_terminal_widget(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::experimental_terminal_widget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::experimental_terminal_widget",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_experimental_terminal_widget",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->experimental_terminal_widget();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_recover_from_exception(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::recover_from_exception",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::recover_from_exception",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_recover_from_exception",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->recover_from_exception();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_mark_for_deletion(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::mark_for_deletion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::mark_for_deletion",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::mark_for_deletion",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_mark_for_deletion",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->mark_for_deletion((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_cleanup_tmp_files(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  
  SWIG_check_num_args("octave::interpreter::cleanup_tmp_files",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::cleanup_tmp_files",1,"octave::interpreter *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_cleanup_tmp_files",1,SWIGTYPE_p_octave__interpreter);
  }
  
  (arg1)->cleanup_tmp_files();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_quit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("octave::interpreter::quit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::quit",1,"octave::interpreter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave::interpreter::quit",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::interpreter::quit",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave::interpreter::quit",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_quit",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->quit(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_quit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("octave::interpreter::quit",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::quit",1,"octave::interpreter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave::interpreter::quit",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::interpreter::quit",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_quit",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->quit(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_quit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("octave::interpreter::quit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::quit",1,"octave::interpreter *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave::interpreter::quit",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_quit",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->quit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_quit(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_interpreter_quit__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_interpreter_quit__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave__interpreter, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_interpreter_quit__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'interpreter_quit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::interpreter::quit(int,bool,bool)\n"
    "    octave::interpreter::quit(int,bool)\n"
    "    octave::interpreter::quit(int)\n");
  lua_error(L);return 0;
}


static int _wrap_interpreter_cancel_quit(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("octave::interpreter::cancel_quit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::cancel_quit",1,"octave::interpreter *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("octave::interpreter::cancel_quit",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_cancel_quit",1,SWIGTYPE_p_octave__interpreter);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->cancel_quit(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_executing_finish_script(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::executing_finish_script",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::executing_finish_script",1,"octave::interpreter const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_executing_finish_script",1,SWIGTYPE_p_octave__interpreter);
  }
  
  result = (bool)((octave::interpreter const *)arg1)->executing_finish_script();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_add_atexit_fcn(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::interpreter::add_atexit_fcn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::add_atexit_fcn",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::add_atexit_fcn",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_add_atexit_fcn",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->add_atexit_fcn((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_remove_atexit_fcn(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *arg1 = (octave::interpreter *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  bool result;
  
  SWIG_check_num_args("octave::interpreter::remove_atexit_fcn",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::interpreter::remove_atexit_fcn",1,"octave::interpreter *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::interpreter::remove_atexit_fcn",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave__interpreter,0))){
    SWIG_fail_ptr("interpreter_remove_atexit_fcn",1,SWIGTYPE_p_octave__interpreter);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->remove_atexit_fcn((std::string const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_interpreter_the_interpreter(lua_State* L) {
  int SWIG_arg = 0;
  octave::interpreter *result = 0 ;
  
  SWIG_check_num_args("octave::interpreter::the_interpreter",0,0)
  result = (octave::interpreter *)octave::interpreter::the_interpreter();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_octave__interpreter,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_interpreter(void *obj) {
octave::interpreter *arg1 = (octave::interpreter *) obj;
delete arg1;
}
static int _proxy__wrap_new_interpreter(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_interpreter);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_interpreter_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_interpreter_methods[]= {
    { "intern_nargin", _wrap_interpreter_intern_nargin},
    { "initialize_history", _wrap_interpreter_initialize_history},
    { "initialize_load_path", _wrap_interpreter_initialize_load_path},
    { "initialize", _wrap_interpreter_initialize},
    { "get_line_and_eval", _wrap_interpreter_get_line_and_eval},
    { "parse_and_execute", _wrap_interpreter_parse_and_execute},
    { "execute", _wrap_interpreter_execute},
    { "server_mode", _wrap_interpreter_server_mode},
    { "interactive", _wrap_interpreter_interactive},
    { "read_site_files", _wrap_interpreter_read_site_files},
    { "read_init_files", _wrap_interpreter_read_init_files},
    { "verbose", _wrap_interpreter_verbose},
    { "traditional", _wrap_interpreter_traditional},
    { "inhibit_startup_message", _wrap_interpreter_inhibit_startup_message},
    { "in_top_level_repl", _wrap_interpreter_in_top_level_repl},
    { "initialized", _wrap_interpreter_initialized},
    { "interrupt_all_in_process_group", _wrap_interpreter_interrupt_all_in_process_group},
    { "chdir", _wrap_interpreter_chdir},
    { "mlock", _wrap_interpreter_mlock},
    { "munlock", _wrap_interpreter_munlock},
    { "mislocked", _wrap_interpreter_mislocked},
    { "mfilename", _wrap_interpreter_mfilename},
    { "eval_string", _wrap_interpreter_eval_string},
    { "eval", _wrap_interpreter_eval},
    { "evalin", _wrap_interpreter_evalin},
    { "feval", _wrap_interpreter_feval},
    { "make_function_handle", _wrap_interpreter_make_function_handle},
    { "install_variable", _wrap_interpreter_install_variable},
    { "global_varval", _wrap_interpreter_global_varval},
    { "global_assign", _wrap_interpreter_global_assign},
    { "top_level_varval", _wrap_interpreter_top_level_varval},
    { "top_level_assign", _wrap_interpreter_top_level_assign},
    { "is_variable", _wrap_interpreter_is_variable},
    { "is_local_variable", _wrap_interpreter_is_local_variable},
    { "varval", _wrap_interpreter_varval},
    { "assign", _wrap_interpreter_assign},
    { "assignin", _wrap_interpreter_assignin},
    { "source_file", _wrap_interpreter_source_file},
    { "at_top_level", _wrap_interpreter_at_top_level},
    { "isglobal", _wrap_interpreter_isglobal},
    { "find", _wrap_interpreter_find},
    { "clear_all", _wrap_interpreter_clear_all},
    { "clear_objects", _wrap_interpreter_clear_objects},
    { "clear_variable", _wrap_interpreter_clear_variable},
    { "clear_variable_pattern", _wrap_interpreter_clear_variable_pattern},
    { "clear_variable_regexp", _wrap_interpreter_clear_variable_regexp},
    { "clear_variables", _wrap_interpreter_clear_variables},
    { "clear_global_variable", _wrap_interpreter_clear_global_variable},
    { "clear_global_variable_pattern", _wrap_interpreter_clear_global_variable_pattern},
    { "clear_global_variable_regexp", _wrap_interpreter_clear_global_variable_regexp},
    { "clear_global_variables", _wrap_interpreter_clear_global_variables},
    { "clear_functions", _wrap_interpreter_clear_functions},
    { "clear_function", _wrap_interpreter_clear_function},
    { "clear_symbol", _wrap_interpreter_clear_symbol},
    { "clear_function_pattern", _wrap_interpreter_clear_function_pattern},
    { "clear_function_regexp", _wrap_interpreter_clear_function_regexp},
    { "clear_symbol_pattern", _wrap_interpreter_clear_symbol_pattern},
    { "clear_symbol_regexp", _wrap_interpreter_clear_symbol_regexp},
    { "variable_names", _wrap_interpreter_variable_names},
    { "top_level_variable_names", _wrap_interpreter_top_level_variable_names},
    { "global_variable_names", _wrap_interpreter_global_variable_names},
    { "user_function_names", _wrap_interpreter_user_function_names},
    { "autoloaded_functions", _wrap_interpreter_autoloaded_functions},
    { "interrupt", _wrap_interpreter_interrupt},
    { "pause", _wrap_interpreter_pause},
    { "stop", _wrap_interpreter_stop},
    { "add_debug_watch_expression", _wrap_interpreter_add_debug_watch_expression},
    { "remove_debug_watch_expression", _wrap_interpreter_remove_debug_watch_expression},
    { "clear_debug_watch_expressions", _wrap_interpreter_clear_debug_watch_expressions},
    { "debug_watch_expressions", _wrap_interpreter_debug_watch_expressions},
    { "resume", _wrap_interpreter_resume},
    { "experimental_terminal_widget", _wrap_interpreter_experimental_terminal_widget},
    { "recover_from_exception", _wrap_interpreter_recover_from_exception},
    { "mark_for_deletion", _wrap_interpreter_mark_for_deletion},
    { "cleanup_tmp_files", _wrap_interpreter_cleanup_tmp_files},
    { "quit", _wrap_interpreter_quit},
    { "cancel_quit", _wrap_interpreter_cancel_quit},
    { "executing_finish_script", _wrap_interpreter_executing_finish_script},
    { "add_atexit_fcn", _wrap_interpreter_add_atexit_fcn},
    { "remove_atexit_fcn", _wrap_interpreter_remove_atexit_fcn},
    {0,0}
};
static swig_lua_method swig_interpreter_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_interpreter_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_interpreter_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_interpreter_Sf_SwigStatic_methods[]= {
    { "the_interpreter", _wrap_interpreter_the_interpreter},
    {0,0}
};
static swig_lua_class* swig_interpreter_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_interpreter_Sf_SwigStatic = {
    "interpreter",
    swig_interpreter_Sf_SwigStatic_methods,
    swig_interpreter_Sf_SwigStatic_attributes,
    swig_interpreter_Sf_SwigStatic_constants,
    swig_interpreter_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_interpreter_bases[] = {0};
static const char *swig_interpreter_base_names[] = {0};
static swig_lua_class _wrap_class_interpreter = { "interpreter", "interpreter", &SWIGTYPE_p_octave__interpreter,_proxy__wrap_new_interpreter, swig_delete_interpreter, swig_interpreter_methods, swig_interpreter_attributes, &swig_interpreter_Sf_SwigStatic, swig_interpreter_meta, swig_interpreter_bases, swig_interpreter_base_names };

static int _wrap_get_help_from_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("octave::get_help_from_file",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::get_help_from_file",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::get_help_from_file",2,"bool &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("octave::get_help_from_file",3,"std::string &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("get_help_from_file",2,SWIGTYPE_p_bool);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("get_help_from_file",3,SWIGTYPE_p_std__string);
  }
  
  result = octave::get_help_from_file((std::string const &)*arg1,*arg2,*arg3);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_help_from_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  std::string temp1 ;
  std::string result;
  
  SWIG_check_num_args("octave::get_help_from_file",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::get_help_from_file",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::get_help_from_file",2,"bool &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_bool,0))){
    SWIG_fail_ptr("get_help_from_file",2,SWIGTYPE_p_bool);
  }
  
  result = octave::get_help_from_file((std::string const &)*arg1,*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_get_help_from_file(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_get_help_from_file__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_bool, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__string, SWIG_POINTER_NO_NULL)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_get_help_from_file__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'get_help_from_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::get_help_from_file(std::string const &,bool &,std::string &)\n"
    "    octave::get_help_from_file(std::string const &,bool &)\n");
  lua_error(L);return 0;
}


static int _wrap_load_fcn_from_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::load_fcn_from_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::load_fcn_from_file",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("octave::load_fcn_from_file",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("octave::load_fcn_from_file",5,"std::string const &");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("octave::load_fcn_from_file",6,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  arg6 = (lua_toboolean(L, 6)!=0);
  result = octave::load_fcn_from_file((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  std::string temp5 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",5,5)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::load_fcn_from_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::load_fcn_from_file",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("octave::load_fcn_from_file",4,"std::string const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("octave::load_fcn_from_file",5,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  result = octave::load_fcn_from_file((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  std::string temp4 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::load_fcn_from_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::load_fcn_from_file",3,"std::string const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("octave::load_fcn_from_file",4,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = octave::load_fcn_from_file((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  std::string temp3 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::load_fcn_from_file",2,"std::string const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("octave::load_fcn_from_file",3,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = octave::load_fcn_from_file((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::load_fcn_from_file",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = octave::load_fcn_from_file((std::string const &)*arg1,(std::string const &)*arg2);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  octave_value result;
  
  SWIG_check_num_args("octave::load_fcn_from_file",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::load_fcn_from_file",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = octave::load_fcn_from_file((std::string const &)*arg1);
  {
    octave_value * resultptr = new octave_value((const octave_value &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_load_fcn_from_file(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_load_fcn_from_file__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_load_fcn_from_file__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_load_fcn_from_file__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_load_fcn_from_file__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              return _wrap_load_fcn_from_file__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_load_fcn_from_file__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'load_fcn_from_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::load_fcn_from_file(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &,bool)\n"
    "    octave::load_fcn_from_file(std::string const &,std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    octave::load_fcn_from_file(std::string const &,std::string const &,std::string const &,std::string const &)\n"
    "    octave::load_fcn_from_file(std::string const &,std::string const &,std::string const &)\n"
    "    octave::load_fcn_from_file(std::string const &,std::string const &)\n"
    "    octave::load_fcn_from_file(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_source_file__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  std::string temp1 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::source_file",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::source_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::source_file",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::source_file",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("octave::source_file",4,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  octave::source_file((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_source_file__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  std::string temp1 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::source_file",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::source_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::source_file",2,"std::string const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("octave::source_file",3,"bool");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  octave::source_file((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_source_file__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string temp1 ;
  std::string temp2 ;
  
  SWIG_check_num_args("octave::source_file",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::source_file",1,"std::string const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("octave::source_file",2,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  octave::source_file((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_source_file__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  
  SWIG_check_num_args("octave::source_file",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::source_file",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  octave::source_file((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_source_file(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_source_file__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_source_file__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_source_file__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_source_file__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'source_file'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::source_file(std::string const &,std::string const &,bool,bool)\n"
    "    octave::source_file(std::string const &,std::string const &,bool)\n"
    "    octave::source_file(std::string const &,std::string const &)\n"
    "    octave::source_file(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_feval__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  octave_value_list *arg2 = 0 ;
  int arg3 ;
  std::string temp1 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::feval",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave::feval",3,"int");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = octave::feval((std::string const &)*arg1,(octave_value_list const &)*arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  octave_value_list *arg2 = 0 ;
  std::string temp1 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::feval",1,"std::string const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = octave::feval((std::string const &)*arg1,(octave_value_list const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("octave::feval",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = octave::feval((std::string const &)*arg1);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  octave_function *arg1 = (octave_function *) 0 ;
  octave_value_list *arg2 = 0 ;
  int arg3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::feval",1,"octave_function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave::feval",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = octave::feval(arg1,(octave_value_list const &)*arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  octave_function *arg1 = (octave_function *) 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::feval",1,"octave_function *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_function);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = octave::feval(arg1,(octave_value_list const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  octave_function *arg1 = (octave_function *) 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("octave::feval",1,"octave_function *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_function,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_function);
  }
  
  result = octave::feval(arg1);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  octave_value_list *arg2 = 0 ;
  int arg3 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave::feval",1,"octave_value const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("octave::feval",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  result = octave::feval((octave_value const &)*arg1,(octave_value_list const &)*arg2,arg3);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  octave_value_list *arg2 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave::feval",1,"octave_value const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("octave::feval",2,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_value);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",2,SWIGTYPE_p_octave_value_list);
  }
  
  result = octave::feval((octave_value const &)*arg1,(octave_value_list const &)*arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  octave_value *arg1 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave::feval",1,"octave_value const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_value);
  }
  
  result = octave::feval((octave_value const &)*arg1);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = 0 ;
  int arg2 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave::feval",1,"octave_value_list const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("octave::feval",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_value_list);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = octave::feval((octave_value_list const &)*arg1,arg2);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  octave_value_list *arg1 = 0 ;
  octave_value_list result;
  
  SWIG_check_num_args("octave::feval",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("octave::feval",1,"octave_value_list const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_octave_value_list,0))){
    SWIG_fail_ptr("feval",1,SWIGTYPE_p_octave_value_list);
  }
  
  result = octave::feval((octave_value_list const &)*arg1);
  {
    octave_value_list * resultptr = new octave_value_list((const octave_value_list &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_octave_value_list,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_feval(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_feval__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_feval__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_feval__SWIG_10(L);
    }
  }
  if (argc == 1) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_feval__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_feval__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_feval__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_feval__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_feval__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_function, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_feval__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_octave_value, SWIG_POINTER_NO_NULL)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_feval__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v = 0;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_octave_value_list, SWIG_POINTER_NO_NULL)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_feval__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'feval'\n"
    "  Possible C/C++ prototypes are:\n"
    "    octave::feval(std::string const &,octave_value_list const &,int)\n"
    "    octave::feval(std::string const &,octave_value_list const &)\n"
    "    octave::feval(std::string const &)\n"
    "    octave::feval(octave_function *,octave_value_list const &,int)\n"
    "    octave::feval(octave_function *,octave_value_list const &)\n"
    "    octave::feval(octave_function *)\n"
    "    octave::feval(octave_value const &,octave_value_list const &,int)\n"
    "    octave::feval(octave_value const &,octave_value_list const &)\n"
    "    octave::feval(octave_value const &)\n"
    "    octave::feval(octave_value_list const &,int)\n"
    "    octave::feval(octave_value_list const &)\n");
  lua_error(L);return 0;
}


static swig_lua_attribute swig_SwigModule_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("octave_oct_h", 1)},
    {SWIG_LUA_CONSTTAB_INT("octave_octave_config_h", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_PROVIDE_DEPRECATED_SYMBOLS", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_HAVE_F77_INT_TYPE", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_ENABLE_64", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_ENABLE_OPENMP", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_HAVE_LONG_LONG_INT", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_HAVE_UNSIGNED_LONG_LONG_INT", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_HAVE_OVERLOAD_CHAR_INT8_TYPES", 1)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_SIZEOF_F77_INT_TYPE", 4)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_SIZEOF_IDX_TYPE", 8)},
    {SWIG_LUA_CONSTTAB_INT("OCTAVE_SIZEOF_INT", 4)},
    {SWIG_LUA_CONSTTAB_INT("F77_USES_GFORTRAN_CALLING_CONVENTION", 1)},
    {SWIG_LUA_CONSTTAB_INT("octave_oct_inttypes_fwd_h", 1)},
    {SWIG_LUA_CONSTTAB_INT("octave_oct_cmplx_h", 1)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_not", octave_value::op_not)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_uplus", octave_value::op_uplus)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_uminus", octave_value::op_uminus)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_transpose", octave_value::op_transpose)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_hermitian", octave_value::op_hermitian)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_incr", octave_value::op_incr)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_decr", octave_value::op_decr)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_num_unary_ops", octave_value::num_unary_ops)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_unknown_unary_op", octave_value::unknown_unary_op)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_add", octave_value::op_add)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_sub", octave_value::op_sub)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_mul", octave_value::op_mul)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_div", octave_value::op_div)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_pow", octave_value::op_pow)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_ldiv", octave_value::op_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_lt", octave_value::op_lt)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_le", octave_value::op_le)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_eq", octave_value::op_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_ge", octave_value::op_ge)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_gt", octave_value::op_gt)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_ne", octave_value::op_ne)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_mul", octave_value::op_el_mul)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_div", octave_value::op_el_div)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_pow", octave_value::op_el_pow)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_ldiv", octave_value::op_el_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_and", octave_value::op_el_and)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_or", octave_value::op_el_or)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_struct_ref", octave_value::op_struct_ref)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_num_binary_ops", octave_value::num_binary_ops)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_unknown_binary_op", octave_value::unknown_binary_op)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_trans_mul", octave_value::op_trans_mul)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_mul_trans", octave_value::op_mul_trans)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_herm_mul", octave_value::op_herm_mul)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_mul_herm", octave_value::op_mul_herm)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_trans_ldiv", octave_value::op_trans_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_herm_ldiv", octave_value::op_herm_ldiv)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_not_and", octave_value::op_el_not_and)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_not_or", octave_value::op_el_not_or)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_and_not", octave_value::op_el_and_not)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_or_not", octave_value::op_el_or_not)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_num_compound_binary_ops", octave_value::num_compound_binary_ops)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_unknown_compound_binary_op", octave_value::unknown_compound_binary_op)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_asn_eq", octave_value::op_asn_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_add_eq", octave_value::op_add_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_sub_eq", octave_value::op_sub_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_mul_eq", octave_value::op_mul_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_div_eq", octave_value::op_div_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_ldiv_eq", octave_value::op_ldiv_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_pow_eq", octave_value::op_pow_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_mul_eq", octave_value::op_el_mul_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_div_eq", octave_value::op_el_div_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_ldiv_eq", octave_value::op_el_ldiv_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_pow_eq", octave_value::op_el_pow_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_and_eq", octave_value::op_el_and_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_op_el_or_eq", octave_value::op_el_or_eq)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_num_assign_ops", octave_value::num_assign_ops)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_unknown_assign_op", octave_value::unknown_assign_op)},
    {SWIG_LUA_CONSTTAB_INT("octave_value_magic_colon_t", octave_value::magic_colon_t)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "dim_vector_dim_max", _wrap_dim_vector_dim_max},
    { "dim_vector_alloc", _wrap_dim_vector_alloc},
    { "ComplexNDArray_increment_index", _wrap_ComplexNDArray_increment_index},
    { "ComplexNDArray_compute_index", _wrap_ComplexNDArray_compute_index},
    { "NDArray_increment_index", _wrap_NDArray_increment_index},
    { "NDArray_compute_index", _wrap_NDArray_compute_index},
    { "FloatNDArray_increment_index", _wrap_FloatNDArray_increment_index},
    { "FloatNDArray_compute_index", _wrap_FloatNDArray_compute_index},
    { "real", _wrap_real},
    { "imag", _wrap_imag},
    { "FloatComplexNDArray_increment_index", _wrap_FloatComplexNDArray_increment_index},
    { "FloatComplexNDArray_compute_index", _wrap_FloatComplexNDArray_compute_index},
    { "conj", _wrap_conj},
    { "octave_value_assign_op_to_binary_op", _wrap_octave_value_assign_op_to_binary_op},
    { "octave_value_binary_op_to_assign_op", _wrap_octave_value_binary_op_to_assign_op},
    { "octave_value_unary_op_as_string", _wrap_octave_value_unary_op_as_string},
    { "octave_value_unary_op_fcn_name", _wrap_octave_value_unary_op_fcn_name},
    { "octave_value_binary_op_as_string", _wrap_octave_value_binary_op_as_string},
    { "octave_value_binary_op_fcn_name", _wrap_octave_value_binary_op_fcn_name},
    { "octave_value_assign_op_as_string", _wrap_octave_value_assign_op_as_string},
    { "octave_value_empty_conv", _wrap_octave_value_empty_conv},
    { "interpreter_the_interpreter", _wrap_interpreter_the_interpreter},
    { "get_help_from_file", _wrap_get_help_from_file},
    { "load_fcn_from_file", _wrap_load_fcn_from_file},
    { "source_file", _wrap_source_file},
    { "feval", _wrap_feval},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_dim_vector,
&_wrap_class_ComplexNDArray,
&_wrap_class_ComplexRowVector,
&_wrap_class_ComplexColumnVector,
&_wrap_class_ComplexMatrix,
&_wrap_class_NDArray,
&_wrap_class_RowVector,
&_wrap_class_ColumnVector,
&_wrap_class_Matrix,
&_wrap_class_FloatNDArray,
&_wrap_class_FloatRowVector,
&_wrap_class_FloatColumnVector,
&_wrap_class_FloatMatrix,
&_wrap_class_FloatComplexNDArray,
&_wrap_class_FloatComplexRowVector,
&_wrap_class_FloatComplexColumnVector,
&_wrap_class_FloatComplexMatrix,
&_wrap_class_octave_value,
&_wrap_class_octave_value_list,
&_wrap_class_interpreter,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "octopus",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ColumnVectorTo_p_MArrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< double > *)  ((ColumnVector *) x));
}
static void *_p_RowVectorTo_p_MArrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< double > *)  ((RowVector *) x));
}
static void *_p_MatrixTo_p_MArrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< double > *) (NDArray *) ((Matrix *) x));
}
static void *_p_NDArrayTo_p_MArrayT_double_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< double > *)  ((NDArray *) x));
}
static void *_p_FloatColumnVectorTo_p_MArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< float > *)  ((FloatColumnVector *) x));
}
static void *_p_FloatRowVectorTo_p_MArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< float > *)  ((FloatRowVector *) x));
}
static void *_p_FloatMatrixTo_p_MArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< float > *) (FloatNDArray *) ((FloatMatrix *) x));
}
static void *_p_FloatNDArrayTo_p_MArrayT_float_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< float > *)  ((FloatNDArray *) x));
}
static void *_p_ComplexColumnVectorTo_p_MArrayT_std__complexT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< double > > *)  ((ComplexColumnVector *) x));
}
static void *_p_ComplexRowVectorTo_p_MArrayT_std__complexT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< double > > *)  ((ComplexRowVector *) x));
}
static void *_p_ComplexMatrixTo_p_MArrayT_std__complexT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< double > > *) (ComplexNDArray *) ((ComplexMatrix *) x));
}
static void *_p_ComplexNDArrayTo_p_MArrayT_std__complexT_double_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< double > > *)  ((ComplexNDArray *) x));
}
static void *_p_FloatComplexColumnVectorTo_p_MArrayT_std__complexT_float_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< float > > *)  ((FloatComplexColumnVector *) x));
}
static void *_p_FloatComplexRowVectorTo_p_MArrayT_std__complexT_float_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< float > > *)  ((FloatComplexRowVector *) x));
}
static void *_p_FloatComplexMatrixTo_p_MArrayT_std__complexT_float_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< float > > *) (FloatComplexNDArray *) ((FloatComplexMatrix *) x));
}
static void *_p_FloatComplexNDArrayTo_p_MArrayT_std__complexT_float_t_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MArray< std::complex< float > > *)  ((FloatComplexNDArray *) x));
}
static void *_p_FloatComplexMatrixTo_p_FloatComplexNDArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatComplexNDArray *)  ((FloatComplexMatrix *) x));
}
static void *_p_FloatMatrixTo_p_FloatNDArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((FloatNDArray *)  ((FloatMatrix *) x));
}
static void *_p_ComplexMatrixTo_p_ComplexNDArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ComplexNDArray *)  ((ComplexMatrix *) x));
}
static void *_p_MatrixTo_p_NDArray(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((NDArray *)  ((Matrix *) x));
}
static swig_type_info _swigt__p_ArrayT_bool_t = {"_p_ArrayT_bool_t", "Array< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_char_t = {"_p_ArrayT_char_t", "Array< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_double_t = {"_p_ArrayT_double_t", "Array< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_float_t = {"_p_ArrayT_float_t", "Array< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_int_t = {"_p_ArrayT_int_t", "Array< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_long_t = {"_p_ArrayT_long_t", "Array< long > *|Array< octave_idx_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_int_t_t = {"_p_ArrayT_octave_intT_int_t_t", "Array< octave_int< int > > *|Array< octave_int32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_long_t_t = {"_p_ArrayT_octave_intT_long_t_t", "Array< octave_int< long > > *|Array< octave_int64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_short_t_t = {"_p_ArrayT_octave_intT_short_t_t", "Array< octave_int< short > > *|Array< octave_int16 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_signed_char_t_t = {"_p_ArrayT_octave_intT_signed_char_t_t", "Array< octave_int< signed char > > *|Array< octave_int8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_unsigned_char_t_t = {"_p_ArrayT_octave_intT_unsigned_char_t_t", "Array< octave_int< unsigned char > > *|Array< octave_uint8 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_unsigned_int_t_t = {"_p_ArrayT_octave_intT_unsigned_int_t_t", "Array< octave_int< unsigned int > > *|Array< octave_uint32 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_unsigned_long_t_t = {"_p_ArrayT_octave_intT_unsigned_long_t_t", "Array< octave_int< unsigned long > > *|Array< octave_uint64 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_intT_unsigned_short_t_t = {"_p_ArrayT_octave_intT_unsigned_short_t_t", "Array< octave_int< unsigned short > > *|Array< octave_uint16 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_octave_value_t = {"_p_ArrayT_octave_value_t", "Array< octave_value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_std__complexT_double_t_t = {"_p_ArrayT_std__complexT_double_t_t", "Array< std::complex< double > > *|Array< Complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_std__complexT_float_t_t = {"_p_ArrayT_std__complexT_float_t_t", "Array< std::complex< float > > *|Array< FloatComplex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArrayT_std__string_t = {"_p_ArrayT_std__string_t", "Array< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cell = {"_p_Cell", "Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ColumnVector = {"_p_ColumnVector", "ColumnVector *", 0, 0, (void*)&_wrap_class_ColumnVector, 0};
static swig_type_info _swigt__p_ComplexColumnVector = {"_p_ComplexColumnVector", "ComplexColumnVector *", 0, 0, (void*)&_wrap_class_ComplexColumnVector, 0};
static swig_type_info _swigt__p_ComplexDET = {"_p_ComplexDET", "ComplexDET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexDiagMatrix = {"_p_ComplexDiagMatrix", "ComplexDiagMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComplexMatrix = {"_p_ComplexMatrix", "ComplexMatrix *", 0, 0, (void*)&_wrap_class_ComplexMatrix, 0};
static swig_type_info _swigt__p_ComplexNDArray = {"_p_ComplexNDArray", "ComplexNDArray *", 0, 0, (void*)&_wrap_class_ComplexNDArray, 0};
static swig_type_info _swigt__p_ComplexRowVector = {"_p_ComplexRowVector", "ComplexRowVector *", 0, 0, (void*)&_wrap_class_ComplexRowVector, 0};
static swig_type_info _swigt__p_DET = {"_p_DET", "DET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiagArray2T_double_t = {"_p_DiagArray2T_double_t", "DiagArray2< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiagArray2T_float_t = {"_p_DiagArray2T_float_t", "DiagArray2< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiagArray2T_std__complexT_double_t_t = {"_p_DiagArray2T_std__complexT_double_t_t", "DiagArray2< std::complex< double > > *|DiagArray2< Complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiagArray2T_std__complexT_float_t_t = {"_p_DiagArray2T_std__complexT_float_t_t", "DiagArray2< std::complex< float > > *|DiagArray2< FloatComplex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DiagMatrix = {"_p_DiagMatrix", "DiagMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatColumnVector = {"_p_FloatColumnVector", "FloatColumnVector *", 0, 0, (void*)&_wrap_class_FloatColumnVector, 0};
static swig_type_info _swigt__p_FloatComplexColumnVector = {"_p_FloatComplexColumnVector", "FloatComplexColumnVector *", 0, 0, (void*)&_wrap_class_FloatComplexColumnVector, 0};
static swig_type_info _swigt__p_FloatComplexDET = {"_p_FloatComplexDET", "FloatComplexDET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatComplexDiagMatrix = {"_p_FloatComplexDiagMatrix", "FloatComplexDiagMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatComplexMatrix = {"_p_FloatComplexMatrix", "FloatComplexMatrix *", 0, 0, (void*)&_wrap_class_FloatComplexMatrix, 0};
static swig_type_info _swigt__p_FloatComplexNDArray = {"_p_FloatComplexNDArray", "FloatComplexNDArray *", 0, 0, (void*)&_wrap_class_FloatComplexNDArray, 0};
static swig_type_info _swigt__p_FloatComplexRowVector = {"_p_FloatComplexRowVector", "FloatComplexRowVector *", 0, 0, (void*)&_wrap_class_FloatComplexRowVector, 0};
static swig_type_info _swigt__p_FloatDET = {"_p_FloatDET", "FloatDET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatDiagMatrix = {"_p_FloatDiagMatrix", "FloatDiagMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FloatMatrix = {"_p_FloatMatrix", "FloatMatrix *", 0, 0, (void*)&_wrap_class_FloatMatrix, 0};
static swig_type_info _swigt__p_FloatNDArray = {"_p_FloatNDArray", "FloatNDArray *", 0, 0, (void*)&_wrap_class_FloatNDArray, 0};
static swig_type_info _swigt__p_FloatRowVector = {"_p_FloatRowVector", "FloatRowVector *", 0, 0, (void*)&_wrap_class_FloatRowVector, 0};
static swig_type_info _swigt__p_MArrayT_double_t = {"_p_MArrayT_double_t", "MArray< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MArrayT_float_t = {"_p_MArrayT_float_t", "MArray< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MArrayT_std__complexT_double_t_t = {"_p_MArrayT_std__complexT_double_t_t", "MArray< std::complex< double > > *|MArray< Complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MArrayT_std__complexT_float_t_t = {"_p_MArrayT_std__complexT_float_t_t", "MArray< std::complex< float > > *|MArray< FloatComplex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDiagArray2T_double_t = {"_p_MDiagArray2T_double_t", "MDiagArray2< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDiagArray2T_float_t = {"_p_MDiagArray2T_float_t", "MDiagArray2< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDiagArray2T_std__complexT_double_t_t = {"_p_MDiagArray2T_std__complexT_double_t_t", "MDiagArray2< std::complex< double > > *|MDiagArray2< Complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDiagArray2T_std__complexT_float_t_t = {"_p_MDiagArray2T_std__complexT_float_t_t", "MDiagArray2< std::complex< float > > *|MDiagArray2< FloatComplex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Matrix = {"_p_Matrix", "Matrix *", 0, 0, (void*)&_wrap_class_Matrix, 0};
static swig_type_info _swigt__p_MatrixType = {"_p_MatrixType", "MatrixType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NDArray = {"_p_NDArray", "NDArray *", 0, 0, (void*)&_wrap_class_NDArray, 0};
static swig_type_info _swigt__p_PermMatrix = {"_p_PermMatrix", "PermMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Range = {"_p_Range", "Range *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RowVector = {"_p_RowVector", "RowVector *", 0, 0, (void*)&_wrap_class_RowVector, 0};
static swig_type_info _swigt__p_SparseBoolMatrix = {"_p_SparseBoolMatrix", "SparseBoolMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SparseComplexMatrix = {"_p_SparseComplexMatrix", "SparseComplexMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SparseMatrix = {"_p_SparseMatrix", "SparseMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SparseT_bool_t = {"_p_SparseT_bool_t", "Sparse< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SparseT_double_t = {"_p_SparseT_double_t", "Sparse< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SparseT_std__complexT_double_t_t = {"_p_SparseT_std__complexT_double_t_t", "Sparse< std::complex< double > > *|Sparse< Complex > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_blas_trans_type = {"_p_blas_trans_type", "blas_trans_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boolMatrix = {"_p_boolMatrix", "boolMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boolNDArray = {"_p_boolNDArray", "boolNDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_builtin_type_t = {"_p_builtin_type_t", "builtin_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_charMatrix = {"_p_charMatrix", "charMatrix *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_charNDArray = {"_p_charNDArray", "charNDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_column_vector_type = {"_p_column_vector_type", "column_vector_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_diag_matrix_type = {"_p_complex_diag_matrix_type", "complex_diag_matrix_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_elt_type = {"_p_complex_elt_type", "complex_elt_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_complex_matrix_type = {"_p_complex_matrix_type", "complex_matrix_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dim_vector = {"_p_dim_vector", "dim_vector *", 0, 0, (void*)&_wrap_class_dim_vector, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_double__void = {"_p_f_double__void", "ComplexMatrix::solve_singularity_handler|Matrix::solve_singularity_handler|void (*)(double)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_float__void = {"_p_f_float__void", "void (*)(float)|FloatMatrix::solve_singularity_handler|FloatComplexMatrix::solve_singularity_handler", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float_display_format = {"_p_float_display_format", "float_display_format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "octave_f77_int_type *|int *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int16NDArray = {"_p_int16NDArray", "int16NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int32NDArray = {"_p_int32NDArray", "int32NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int64NDArray = {"_p_int64NDArray", "int64NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int8NDArray = {"_p_int8NDArray", "int8NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "octave_idx_type *|int64_t *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mxArray = {"_p_mxArray", "mxArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mxClassID = {"_p_mxClassID", "mxClassID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mxComplexity = {"_p_mxComplexity", "mxComplexity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_oct_data_conv__data_type = {"_p_oct_data_conv__data_type", "oct_data_conv::data_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__idx_vector = {"_p_octave__idx_vector", "octave::idx_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__interpreter = {"_p_octave__interpreter", "octave::interpreter *", 0, 0, (void*)&_wrap_class_interpreter, 0};
static swig_type_info _swigt__p_octave__mach_info__float_format = {"_p_octave__mach_info__float_format", "octave::mach_info::float_format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__rangeT_double_t = {"_p_octave__rangeT_double_t", "octave::range< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__stream = {"_p_octave__stream", "octave::stream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave__sys__time = {"_p_octave__sys__time", "octave::sys::time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_base_value = {"_p_octave_base_value", "octave_base_value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_base_value__type_conv_info = {"_p_octave_base_value__type_conv_info", "octave_base_value::type_conv_info *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_base_value__unary_mapper_t = {"_p_octave_base_value__unary_mapper_t", "octave_base_value::unary_mapper_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_classdef = {"_p_octave_classdef", "octave_classdef *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_fcn_handle = {"_p_octave_fcn_handle", "octave_fcn_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_function = {"_p_octave_function", "octave_function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_hdf5_id = {"_p_octave_hdf5_id", "octave_hdf5_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_int_t = {"_p_octave_intT_int_t", "octave_int32 *|octave_int< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_long_t = {"_p_octave_intT_long_t", "octave_int64 *|octave_int< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_short_t = {"_p_octave_intT_short_t", "octave_int< short > *|octave_int16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_signed_char_t = {"_p_octave_intT_signed_char_t", "octave_int< signed char > *|octave_int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_unsigned_char_t = {"_p_octave_intT_unsigned_char_t", "octave_int< unsigned char > *|octave_uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_unsigned_int_t = {"_p_octave_intT_unsigned_int_t", "octave_uint32 *|octave_int< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_unsigned_long_t = {"_p_octave_intT_unsigned_long_t", "octave_uint64 *|octave_int< unsigned long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_intT_unsigned_short_t = {"_p_octave_intT_unsigned_short_t", "octave_int< unsigned short > *|octave_uint16 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_map = {"_p_octave_map", "octave_map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_scalar_map = {"_p_octave_scalar_map", "octave_scalar_map *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_user_code = {"_p_octave_user_code", "octave_user_code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_user_function = {"_p_octave_user_function", "octave_user_function *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_user_script = {"_p_octave_user_script", "octave_user_script *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_octave_value = {"_p_octave_value", "octave_value *", 0, 0, (void*)&_wrap_class_octave_value, 0};
static swig_type_info _swigt__p_octave_value_list = {"_p_octave_value_list", "octave_value_list *", 0, 0, (void*)&_wrap_class_octave_value_list, 0};
static swig_type_info _swigt__p_real_column_vector_type = {"_p_real_column_vector_type", "real_column_vector_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_real_diag_matrix_type = {"_p_real_diag_matrix_type", "real_diag_matrix_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_real_elt_type = {"_p_real_elt_type", "real_elt_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_real_matrix_type = {"_p_real_matrix_type", "real_matrix_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_real_row_vector_type = {"_p_real_row_vector_type", "real_row_vector_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_row_vector_type = {"_p_row_vector_type", "row_vector_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_sortmode = {"_p_sortmode", "sortmode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_double_t = {"_p_std__complexT_double_t", "Complex *|std::complex< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__complexT_float_t = {"_p_std__complexT_float_t", "std::complex< float > *|FloatComplex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_octave_value_list_t = {"_p_std__listT_octave_value_list_t", "std::list< octave_value_list > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_octave_value_t = {"_p_std__listT_octave_value_t", "std::list< octave_value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__string_t = {"_p_std__listT_std__string_t", "std::list< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_octave_value_t = {"_p_std__mapT_std__string_octave_value_t", "std::map< std::string,octave_value > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_octave__stack_frame_t = {"_p_std__shared_ptrT_octave__stack_frame_t", "std::shared_ptr< octave::stack_frame > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__size_t = {"_p_std__size_t", "std::size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_string_vector = {"_p_string_vector", "string_vector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint16NDArray = {"_p_uint16NDArray", "uint16NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint32NDArray = {"_p_uint32NDArray", "uint32NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint64NDArray = {"_p_uint64NDArray", "uint64NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_uint8NDArray = {"_p_uint8NDArray", "uint8NDArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uint64_t *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ArrayT_bool_t,
  &_swigt__p_ArrayT_char_t,
  &_swigt__p_ArrayT_double_t,
  &_swigt__p_ArrayT_float_t,
  &_swigt__p_ArrayT_int_t,
  &_swigt__p_ArrayT_long_t,
  &_swigt__p_ArrayT_octave_intT_int_t_t,
  &_swigt__p_ArrayT_octave_intT_long_t_t,
  &_swigt__p_ArrayT_octave_intT_short_t_t,
  &_swigt__p_ArrayT_octave_intT_signed_char_t_t,
  &_swigt__p_ArrayT_octave_intT_unsigned_char_t_t,
  &_swigt__p_ArrayT_octave_intT_unsigned_int_t_t,
  &_swigt__p_ArrayT_octave_intT_unsigned_long_t_t,
  &_swigt__p_ArrayT_octave_intT_unsigned_short_t_t,
  &_swigt__p_ArrayT_octave_value_t,
  &_swigt__p_ArrayT_std__complexT_double_t_t,
  &_swigt__p_ArrayT_std__complexT_float_t_t,
  &_swigt__p_ArrayT_std__string_t,
  &_swigt__p_Cell,
  &_swigt__p_ColumnVector,
  &_swigt__p_ComplexColumnVector,
  &_swigt__p_ComplexDET,
  &_swigt__p_ComplexDiagMatrix,
  &_swigt__p_ComplexMatrix,
  &_swigt__p_ComplexNDArray,
  &_swigt__p_ComplexRowVector,
  &_swigt__p_DET,
  &_swigt__p_DiagArray2T_double_t,
  &_swigt__p_DiagArray2T_float_t,
  &_swigt__p_DiagArray2T_std__complexT_double_t_t,
  &_swigt__p_DiagArray2T_std__complexT_float_t_t,
  &_swigt__p_DiagMatrix,
  &_swigt__p_FloatColumnVector,
  &_swigt__p_FloatComplexColumnVector,
  &_swigt__p_FloatComplexDET,
  &_swigt__p_FloatComplexDiagMatrix,
  &_swigt__p_FloatComplexMatrix,
  &_swigt__p_FloatComplexNDArray,
  &_swigt__p_FloatComplexRowVector,
  &_swigt__p_FloatDET,
  &_swigt__p_FloatDiagMatrix,
  &_swigt__p_FloatMatrix,
  &_swigt__p_FloatNDArray,
  &_swigt__p_FloatRowVector,
  &_swigt__p_MArrayT_double_t,
  &_swigt__p_MArrayT_float_t,
  &_swigt__p_MArrayT_std__complexT_double_t_t,
  &_swigt__p_MArrayT_std__complexT_float_t_t,
  &_swigt__p_MDiagArray2T_double_t,
  &_swigt__p_MDiagArray2T_float_t,
  &_swigt__p_MDiagArray2T_std__complexT_double_t_t,
  &_swigt__p_MDiagArray2T_std__complexT_float_t_t,
  &_swigt__p_Matrix,
  &_swigt__p_MatrixType,
  &_swigt__p_NDArray,
  &_swigt__p_PermMatrix,
  &_swigt__p_Range,
  &_swigt__p_RowVector,
  &_swigt__p_SparseBoolMatrix,
  &_swigt__p_SparseComplexMatrix,
  &_swigt__p_SparseMatrix,
  &_swigt__p_SparseT_bool_t,
  &_swigt__p_SparseT_double_t,
  &_swigt__p_SparseT_std__complexT_double_t_t,
  &_swigt__p_blas_trans_type,
  &_swigt__p_bool,
  &_swigt__p_boolMatrix,
  &_swigt__p_boolNDArray,
  &_swigt__p_builtin_type_t,
  &_swigt__p_charMatrix,
  &_swigt__p_charNDArray,
  &_swigt__p_column_vector_type,
  &_swigt__p_complex_diag_matrix_type,
  &_swigt__p_complex_elt_type,
  &_swigt__p_complex_matrix_type,
  &_swigt__p_dim_vector,
  &_swigt__p_double,
  &_swigt__p_f_double__void,
  &_swigt__p_f_float__void,
  &_swigt__p_float,
  &_swigt__p_float_display_format,
  &_swigt__p_int,
  &_swigt__p_int16NDArray,
  &_swigt__p_int32NDArray,
  &_swigt__p_int64NDArray,
  &_swigt__p_int8NDArray,
  &_swigt__p_long,
  &_swigt__p_mxArray,
  &_swigt__p_mxClassID,
  &_swigt__p_mxComplexity,
  &_swigt__p_oct_data_conv__data_type,
  &_swigt__p_octave__idx_vector,
  &_swigt__p_octave__interpreter,
  &_swigt__p_octave__mach_info__float_format,
  &_swigt__p_octave__rangeT_double_t,
  &_swigt__p_octave__stream,
  &_swigt__p_octave__sys__time,
  &_swigt__p_octave_base_value,
  &_swigt__p_octave_base_value__type_conv_info,
  &_swigt__p_octave_base_value__unary_mapper_t,
  &_swigt__p_octave_classdef,
  &_swigt__p_octave_fcn_handle,
  &_swigt__p_octave_function,
  &_swigt__p_octave_hdf5_id,
  &_swigt__p_octave_intT_int_t,
  &_swigt__p_octave_intT_long_t,
  &_swigt__p_octave_intT_short_t,
  &_swigt__p_octave_intT_signed_char_t,
  &_swigt__p_octave_intT_unsigned_char_t,
  &_swigt__p_octave_intT_unsigned_int_t,
  &_swigt__p_octave_intT_unsigned_long_t,
  &_swigt__p_octave_intT_unsigned_short_t,
  &_swigt__p_octave_map,
  &_swigt__p_octave_scalar_map,
  &_swigt__p_octave_user_code,
  &_swigt__p_octave_user_function,
  &_swigt__p_octave_user_script,
  &_swigt__p_octave_value,
  &_swigt__p_octave_value_list,
  &_swigt__p_real_column_vector_type,
  &_swigt__p_real_diag_matrix_type,
  &_swigt__p_real_elt_type,
  &_swigt__p_real_matrix_type,
  &_swigt__p_real_row_vector_type,
  &_swigt__p_row_vector_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_sortmode,
  &_swigt__p_std__complexT_double_t,
  &_swigt__p_std__complexT_float_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_octave_value_list_t,
  &_swigt__p_std__listT_octave_value_t,
  &_swigt__p_std__listT_std__string_t,
  &_swigt__p_std__mapT_std__string_octave_value_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__shared_ptrT_octave__stack_frame_t,
  &_swigt__p_std__size_t,
  &_swigt__p_std__string,
  &_swigt__p_string_vector,
  &_swigt__p_uint16NDArray,
  &_swigt__p_uint32NDArray,
  &_swigt__p_uint64NDArray,
  &_swigt__p_uint8NDArray,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ArrayT_bool_t[] = {  {&_swigt__p_ArrayT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_char_t[] = {  {&_swigt__p_ArrayT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_double_t[] = {  {&_swigt__p_ArrayT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_float_t[] = {  {&_swigt__p_ArrayT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_int_t[] = {  {&_swigt__p_ArrayT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_long_t[] = {  {&_swigt__p_ArrayT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_int_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_long_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_short_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_signed_char_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_signed_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_unsigned_char_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_unsigned_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_unsigned_int_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_unsigned_long_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_unsigned_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_intT_unsigned_short_t_t[] = {  {&_swigt__p_ArrayT_octave_intT_unsigned_short_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_octave_value_t[] = {  {&_swigt__p_ArrayT_octave_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__complexT_double_t_t[] = {  {&_swigt__p_ArrayT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__complexT_float_t_t[] = {  {&_swigt__p_ArrayT_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArrayT_std__string_t[] = {  {&_swigt__p_ArrayT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cell[] = {  {&_swigt__p_Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ColumnVector[] = {  {&_swigt__p_ColumnVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexColumnVector[] = {  {&_swigt__p_ComplexColumnVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexDET[] = {  {&_swigt__p_ComplexDET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexDiagMatrix[] = {  {&_swigt__p_ComplexDiagMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexMatrix[] = {  {&_swigt__p_ComplexMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexNDArray[] = {  {&_swigt__p_ComplexMatrix, _p_ComplexMatrixTo_p_ComplexNDArray, 0, 0},  {&_swigt__p_ComplexNDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComplexRowVector[] = {  {&_swigt__p_ComplexRowVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DET[] = {  {&_swigt__p_DET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiagArray2T_double_t[] = {  {&_swigt__p_DiagArray2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiagArray2T_float_t[] = {  {&_swigt__p_DiagArray2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiagArray2T_std__complexT_double_t_t[] = {  {&_swigt__p_DiagArray2T_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiagArray2T_std__complexT_float_t_t[] = {  {&_swigt__p_DiagArray2T_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DiagMatrix[] = {  {&_swigt__p_DiagMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatColumnVector[] = {  {&_swigt__p_FloatColumnVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexColumnVector[] = {  {&_swigt__p_FloatComplexColumnVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexDET[] = {  {&_swigt__p_FloatComplexDET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexDiagMatrix[] = {  {&_swigt__p_FloatComplexDiagMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexMatrix[] = {  {&_swigt__p_FloatComplexMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexNDArray[] = {  {&_swigt__p_FloatComplexMatrix, _p_FloatComplexMatrixTo_p_FloatComplexNDArray, 0, 0},  {&_swigt__p_FloatComplexNDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatComplexRowVector[] = {  {&_swigt__p_FloatComplexRowVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatDET[] = {  {&_swigt__p_FloatDET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatDiagMatrix[] = {  {&_swigt__p_FloatDiagMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatMatrix[] = {  {&_swigt__p_FloatMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatNDArray[] = {  {&_swigt__p_FloatMatrix, _p_FloatMatrixTo_p_FloatNDArray, 0, 0},  {&_swigt__p_FloatNDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FloatRowVector[] = {  {&_swigt__p_FloatRowVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MArrayT_double_t[] = {  {&_swigt__p_ColumnVector, _p_ColumnVectorTo_p_MArrayT_double_t, 0, 0},  {&_swigt__p_MArrayT_double_t, 0, 0, 0},  {&_swigt__p_RowVector, _p_RowVectorTo_p_MArrayT_double_t, 0, 0},  {&_swigt__p_Matrix, _p_MatrixTo_p_MArrayT_double_t, 0, 0},  {&_swigt__p_NDArray, _p_NDArrayTo_p_MArrayT_double_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MArrayT_float_t[] = {  {&_swigt__p_FloatColumnVector, _p_FloatColumnVectorTo_p_MArrayT_float_t, 0, 0},  {&_swigt__p_FloatRowVector, _p_FloatRowVectorTo_p_MArrayT_float_t, 0, 0},  {&_swigt__p_FloatMatrix, _p_FloatMatrixTo_p_MArrayT_float_t, 0, 0},  {&_swigt__p_MArrayT_float_t, 0, 0, 0},  {&_swigt__p_FloatNDArray, _p_FloatNDArrayTo_p_MArrayT_float_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MArrayT_std__complexT_double_t_t[] = {  {&_swigt__p_ComplexColumnVector, _p_ComplexColumnVectorTo_p_MArrayT_std__complexT_double_t_t, 0, 0},  {&_swigt__p_ComplexRowVector, _p_ComplexRowVectorTo_p_MArrayT_std__complexT_double_t_t, 0, 0},  {&_swigt__p_ComplexMatrix, _p_ComplexMatrixTo_p_MArrayT_std__complexT_double_t_t, 0, 0},  {&_swigt__p_MArrayT_std__complexT_double_t_t, 0, 0, 0},  {&_swigt__p_ComplexNDArray, _p_ComplexNDArrayTo_p_MArrayT_std__complexT_double_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MArrayT_std__complexT_float_t_t[] = {  {&_swigt__p_FloatComplexColumnVector, _p_FloatComplexColumnVectorTo_p_MArrayT_std__complexT_float_t_t, 0, 0},  {&_swigt__p_MArrayT_std__complexT_float_t_t, 0, 0, 0},  {&_swigt__p_FloatComplexRowVector, _p_FloatComplexRowVectorTo_p_MArrayT_std__complexT_float_t_t, 0, 0},  {&_swigt__p_FloatComplexMatrix, _p_FloatComplexMatrixTo_p_MArrayT_std__complexT_float_t_t, 0, 0},  {&_swigt__p_FloatComplexNDArray, _p_FloatComplexNDArrayTo_p_MArrayT_std__complexT_float_t_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDiagArray2T_double_t[] = {  {&_swigt__p_MDiagArray2T_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDiagArray2T_float_t[] = {  {&_swigt__p_MDiagArray2T_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDiagArray2T_std__complexT_double_t_t[] = {  {&_swigt__p_MDiagArray2T_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDiagArray2T_std__complexT_float_t_t[] = {  {&_swigt__p_MDiagArray2T_std__complexT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Matrix[] = {  {&_swigt__p_Matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MatrixType[] = {  {&_swigt__p_MatrixType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NDArray[] = {  {&_swigt__p_Matrix, _p_MatrixTo_p_NDArray, 0, 0},  {&_swigt__p_NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PermMatrix[] = {  {&_swigt__p_PermMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Range[] = {  {&_swigt__p_Range, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RowVector[] = {  {&_swigt__p_RowVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseBoolMatrix[] = {  {&_swigt__p_SparseBoolMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseComplexMatrix[] = {  {&_swigt__p_SparseComplexMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseMatrix[] = {  {&_swigt__p_SparseMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseT_bool_t[] = {  {&_swigt__p_SparseT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseT_double_t[] = {  {&_swigt__p_SparseT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SparseT_std__complexT_double_t_t[] = {  {&_swigt__p_SparseT_std__complexT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_blas_trans_type[] = {  {&_swigt__p_blas_trans_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boolMatrix[] = {  {&_swigt__p_boolMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boolNDArray[] = {  {&_swigt__p_boolNDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_builtin_type_t[] = {  {&_swigt__p_builtin_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_charMatrix[] = {  {&_swigt__p_charMatrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_charNDArray[] = {  {&_swigt__p_charNDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_column_vector_type[] = {  {&_swigt__p_column_vector_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_diag_matrix_type[] = {  {&_swigt__p_complex_diag_matrix_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_elt_type[] = {  {&_swigt__p_complex_elt_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_complex_matrix_type[] = {  {&_swigt__p_complex_matrix_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dim_vector[] = {  {&_swigt__p_dim_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_double__void[] = {  {&_swigt__p_f_double__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_float__void[] = {  {&_swigt__p_f_float__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float_display_format[] = {  {&_swigt__p_float_display_format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int16NDArray[] = {  {&_swigt__p_int16NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int32NDArray[] = {  {&_swigt__p_int32NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int64NDArray[] = {  {&_swigt__p_int64NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int8NDArray[] = {  {&_swigt__p_int8NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mxArray[] = {  {&_swigt__p_mxArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mxClassID[] = {  {&_swigt__p_mxClassID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mxComplexity[] = {  {&_swigt__p_mxComplexity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_oct_data_conv__data_type[] = {  {&_swigt__p_oct_data_conv__data_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__idx_vector[] = {  {&_swigt__p_octave__idx_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__interpreter[] = {  {&_swigt__p_octave__interpreter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__mach_info__float_format[] = {  {&_swigt__p_octave__mach_info__float_format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__rangeT_double_t[] = {  {&_swigt__p_octave__rangeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__stream[] = {  {&_swigt__p_octave__stream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave__sys__time[] = {  {&_swigt__p_octave__sys__time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_base_value[] = {  {&_swigt__p_octave_base_value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_base_value__type_conv_info[] = {  {&_swigt__p_octave_base_value__type_conv_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_base_value__unary_mapper_t[] = {  {&_swigt__p_octave_base_value__unary_mapper_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_classdef[] = {  {&_swigt__p_octave_classdef, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_fcn_handle[] = {  {&_swigt__p_octave_fcn_handle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_function[] = {  {&_swigt__p_octave_function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_hdf5_id[] = {  {&_swigt__p_octave_hdf5_id, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_int_t[] = {  {&_swigt__p_octave_intT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_long_t[] = {  {&_swigt__p_octave_intT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_short_t[] = {  {&_swigt__p_octave_intT_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_signed_char_t[] = {  {&_swigt__p_octave_intT_signed_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_unsigned_char_t[] = {  {&_swigt__p_octave_intT_unsigned_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_unsigned_int_t[] = {  {&_swigt__p_octave_intT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_unsigned_long_t[] = {  {&_swigt__p_octave_intT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_intT_unsigned_short_t[] = {  {&_swigt__p_octave_intT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_map[] = {  {&_swigt__p_octave_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_scalar_map[] = {  {&_swigt__p_octave_scalar_map, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_user_code[] = {  {&_swigt__p_octave_user_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_user_function[] = {  {&_swigt__p_octave_user_function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_user_script[] = {  {&_swigt__p_octave_user_script, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_value[] = {  {&_swigt__p_octave_value, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_octave_value_list[] = {  {&_swigt__p_octave_value_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real_column_vector_type[] = {  {&_swigt__p_real_column_vector_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real_diag_matrix_type[] = {  {&_swigt__p_real_diag_matrix_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real_elt_type[] = {  {&_swigt__p_real_elt_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real_matrix_type[] = {  {&_swigt__p_real_matrix_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_real_row_vector_type[] = {  {&_swigt__p_real_row_vector_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_row_vector_type[] = {  {&_swigt__p_row_vector_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_sortmode[] = {  {&_swigt__p_sortmode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_double_t[] = {  {&_swigt__p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__complexT_float_t[] = {  {&_swigt__p_std__complexT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_octave_value_list_t[] = {  {&_swigt__p_std__listT_octave_value_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_octave_value_t[] = {  {&_swigt__p_std__listT_octave_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__string_t[] = {  {&_swigt__p_std__listT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_octave_value_t[] = {  {&_swigt__p_std__mapT_std__string_octave_value_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_octave__stack_frame_t[] = {  {&_swigt__p_std__shared_ptrT_octave__stack_frame_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__size_t[] = {  {&_swigt__p_std__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_string_vector[] = {  {&_swigt__p_string_vector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint16NDArray[] = {  {&_swigt__p_uint16NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint32NDArray[] = {  {&_swigt__p_uint32NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint64NDArray[] = {  {&_swigt__p_uint64NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_uint8NDArray[] = {  {&_swigt__p_uint8NDArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ArrayT_bool_t,
  _swigc__p_ArrayT_char_t,
  _swigc__p_ArrayT_double_t,
  _swigc__p_ArrayT_float_t,
  _swigc__p_ArrayT_int_t,
  _swigc__p_ArrayT_long_t,
  _swigc__p_ArrayT_octave_intT_int_t_t,
  _swigc__p_ArrayT_octave_intT_long_t_t,
  _swigc__p_ArrayT_octave_intT_short_t_t,
  _swigc__p_ArrayT_octave_intT_signed_char_t_t,
  _swigc__p_ArrayT_octave_intT_unsigned_char_t_t,
  _swigc__p_ArrayT_octave_intT_unsigned_int_t_t,
  _swigc__p_ArrayT_octave_intT_unsigned_long_t_t,
  _swigc__p_ArrayT_octave_intT_unsigned_short_t_t,
  _swigc__p_ArrayT_octave_value_t,
  _swigc__p_ArrayT_std__complexT_double_t_t,
  _swigc__p_ArrayT_std__complexT_float_t_t,
  _swigc__p_ArrayT_std__string_t,
  _swigc__p_Cell,
  _swigc__p_ColumnVector,
  _swigc__p_ComplexColumnVector,
  _swigc__p_ComplexDET,
  _swigc__p_ComplexDiagMatrix,
  _swigc__p_ComplexMatrix,
  _swigc__p_ComplexNDArray,
  _swigc__p_ComplexRowVector,
  _swigc__p_DET,
  _swigc__p_DiagArray2T_double_t,
  _swigc__p_DiagArray2T_float_t,
  _swigc__p_DiagArray2T_std__complexT_double_t_t,
  _swigc__p_DiagArray2T_std__complexT_float_t_t,
  _swigc__p_DiagMatrix,
  _swigc__p_FloatColumnVector,
  _swigc__p_FloatComplexColumnVector,
  _swigc__p_FloatComplexDET,
  _swigc__p_FloatComplexDiagMatrix,
  _swigc__p_FloatComplexMatrix,
  _swigc__p_FloatComplexNDArray,
  _swigc__p_FloatComplexRowVector,
  _swigc__p_FloatDET,
  _swigc__p_FloatDiagMatrix,
  _swigc__p_FloatMatrix,
  _swigc__p_FloatNDArray,
  _swigc__p_FloatRowVector,
  _swigc__p_MArrayT_double_t,
  _swigc__p_MArrayT_float_t,
  _swigc__p_MArrayT_std__complexT_double_t_t,
  _swigc__p_MArrayT_std__complexT_float_t_t,
  _swigc__p_MDiagArray2T_double_t,
  _swigc__p_MDiagArray2T_float_t,
  _swigc__p_MDiagArray2T_std__complexT_double_t_t,
  _swigc__p_MDiagArray2T_std__complexT_float_t_t,
  _swigc__p_Matrix,
  _swigc__p_MatrixType,
  _swigc__p_NDArray,
  _swigc__p_PermMatrix,
  _swigc__p_Range,
  _swigc__p_RowVector,
  _swigc__p_SparseBoolMatrix,
  _swigc__p_SparseComplexMatrix,
  _swigc__p_SparseMatrix,
  _swigc__p_SparseT_bool_t,
  _swigc__p_SparseT_double_t,
  _swigc__p_SparseT_std__complexT_double_t_t,
  _swigc__p_blas_trans_type,
  _swigc__p_bool,
  _swigc__p_boolMatrix,
  _swigc__p_boolNDArray,
  _swigc__p_builtin_type_t,
  _swigc__p_charMatrix,
  _swigc__p_charNDArray,
  _swigc__p_column_vector_type,
  _swigc__p_complex_diag_matrix_type,
  _swigc__p_complex_elt_type,
  _swigc__p_complex_matrix_type,
  _swigc__p_dim_vector,
  _swigc__p_double,
  _swigc__p_f_double__void,
  _swigc__p_f_float__void,
  _swigc__p_float,
  _swigc__p_float_display_format,
  _swigc__p_int,
  _swigc__p_int16NDArray,
  _swigc__p_int32NDArray,
  _swigc__p_int64NDArray,
  _swigc__p_int8NDArray,
  _swigc__p_long,
  _swigc__p_mxArray,
  _swigc__p_mxClassID,
  _swigc__p_mxComplexity,
  _swigc__p_oct_data_conv__data_type,
  _swigc__p_octave__idx_vector,
  _swigc__p_octave__interpreter,
  _swigc__p_octave__mach_info__float_format,
  _swigc__p_octave__rangeT_double_t,
  _swigc__p_octave__stream,
  _swigc__p_octave__sys__time,
  _swigc__p_octave_base_value,
  _swigc__p_octave_base_value__type_conv_info,
  _swigc__p_octave_base_value__unary_mapper_t,
  _swigc__p_octave_classdef,
  _swigc__p_octave_fcn_handle,
  _swigc__p_octave_function,
  _swigc__p_octave_hdf5_id,
  _swigc__p_octave_intT_int_t,
  _swigc__p_octave_intT_long_t,
  _swigc__p_octave_intT_short_t,
  _swigc__p_octave_intT_signed_char_t,
  _swigc__p_octave_intT_unsigned_char_t,
  _swigc__p_octave_intT_unsigned_int_t,
  _swigc__p_octave_intT_unsigned_long_t,
  _swigc__p_octave_intT_unsigned_short_t,
  _swigc__p_octave_map,
  _swigc__p_octave_scalar_map,
  _swigc__p_octave_user_code,
  _swigc__p_octave_user_function,
  _swigc__p_octave_user_script,
  _swigc__p_octave_value,
  _swigc__p_octave_value_list,
  _swigc__p_real_column_vector_type,
  _swigc__p_real_diag_matrix_type,
  _swigc__p_real_elt_type,
  _swigc__p_real_matrix_type,
  _swigc__p_real_row_vector_type,
  _swigc__p_row_vector_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_sortmode,
  _swigc__p_std__complexT_double_t,
  _swigc__p_std__complexT_float_t,
  _swigc__p_std__istream,
  _swigc__p_std__listT_octave_value_list_t,
  _swigc__p_std__listT_octave_value_t,
  _swigc__p_std__listT_std__string_t,
  _swigc__p_std__mapT_std__string_octave_value_t,
  _swigc__p_std__ostream,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__shared_ptrT_octave__stack_frame_t,
  _swigc__p_std__size_t,
  _swigc__p_std__string,
  _swigc__p_string_vector,
  _swigc__p_uint16NDArray,
  _swigc__p_uint32NDArray,
  _swigc__p_uint64NDArray,
  _swigc__p_uint8NDArray,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

