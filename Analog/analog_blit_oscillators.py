# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _analog_blit_oscillators
else:
    import _analog_blit_oscillators

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class float_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.float_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.float_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.float_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.float_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.float_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.float_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.float_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.float_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.float_numeric_limits_swiginit(self, _analog_blit_oscillators.new_float_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_float_numeric_limits

# Register float_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.float_numeric_limits_swigregister(float_numeric_limits)

class double_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.double_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.double_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.double_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.double_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.double_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.double_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.double_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.double_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.double_numeric_limits_swiginit(self, _analog_blit_oscillators.new_double_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_double_numeric_limits

# Register double_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.double_numeric_limits_swigregister(double_numeric_limits)

class int_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.int_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.int_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.int_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.int_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.int_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.int_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.int_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.int_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.int_numeric_limits_swiginit(self, _analog_blit_oscillators.new_int_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_int_numeric_limits

# Register int_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.int_numeric_limits_swigregister(int_numeric_limits)

class uint_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.uint_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.uint_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.uint_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.uint_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.uint_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.uint_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.uint_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.uint_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.uint_numeric_limits_swiginit(self, _analog_blit_oscillators.new_uint_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_uint_numeric_limits

# Register uint_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.uint_numeric_limits_swigregister(uint_numeric_limits)

class short_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.short_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.short_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.short_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.short_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.short_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.short_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.short_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.short_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.short_numeric_limits_swiginit(self, _analog_blit_oscillators.new_short_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_short_numeric_limits

# Register short_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.short_numeric_limits_swigregister(short_numeric_limits)

class ushort_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.ushort_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.ushort_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.ushort_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.ushort_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.ushort_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.ushort_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.ushort_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.ushort_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.ushort_numeric_limits_swiginit(self, _analog_blit_oscillators.new_ushort_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_ushort_numeric_limits

# Register ushort_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.ushort_numeric_limits_swigregister(ushort_numeric_limits)

class long_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.long_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.long_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.long_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.long_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.long_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.long_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.long_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.long_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.long_numeric_limits_swiginit(self, _analog_blit_oscillators.new_long_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_long_numeric_limits

# Register long_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.long_numeric_limits_swigregister(long_numeric_limits)

class ulong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.ulong_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.ulong_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.ulong_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.ulong_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.ulong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.ulong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.ulong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.ulong_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.ulong_numeric_limits_swiginit(self, _analog_blit_oscillators.new_ulong_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_ulong_numeric_limits

# Register ulong_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.ulong_numeric_limits_swigregister(ulong_numeric_limits)

class llong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.llong_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.llong_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.llong_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.llong_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.llong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.llong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.llong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.llong_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.llong_numeric_limits_swiginit(self, _analog_blit_oscillators.new_llong_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_llong_numeric_limits

# Register llong_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.llong_numeric_limits_swigregister(llong_numeric_limits)

class ullong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _analog_blit_oscillators.ullong_numeric_limits_min(self)

    def max(self):
        return _analog_blit_oscillators.ullong_numeric_limits_max(self)

    def epsilon(self):
        return _analog_blit_oscillators.ullong_numeric_limits_epsilon(self)

    def round_error(self):
        return _analog_blit_oscillators.ullong_numeric_limits_round_error(self)

    def infinity(self):
        return _analog_blit_oscillators.ullong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _analog_blit_oscillators.ullong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _analog_blit_oscillators.ullong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _analog_blit_oscillators.ullong_numeric_limits_denorm_min(self)

    def __init__(self):
        _analog_blit_oscillators.ullong_numeric_limits_swiginit(self, _analog_blit_oscillators.new_ullong_numeric_limits())
    __swig_destroy__ = _analog_blit_oscillators.delete_ullong_numeric_limits

# Register ullong_numeric_limits in _analog_blit_oscillators:
_analog_blit_oscillators.ullong_numeric_limits_swigregister(ullong_numeric_limits)


def Huge():
    return _analog_blit_oscillators.Huge()

def Hugef():
    return _analog_blit_oscillators.Hugef()

def Infinity():
    return _analog_blit_oscillators.Infinity()

def NaN():
    return _analog_blit_oscillators.NaN()
char_bit = _analog_blit_oscillators.char_bit
schar_min = _analog_blit_oscillators.schar_min
schar_max = _analog_blit_oscillators.schar_max
uchar_max = _analog_blit_oscillators.uchar_max
char_min = _analog_blit_oscillators.char_min
char_max = _analog_blit_oscillators.char_max
mb_len_max = _analog_blit_oscillators.mb_len_max
shrt_min = _analog_blit_oscillators.shrt_min
shrt_max = _analog_blit_oscillators.shrt_max
ushrt_max = _analog_blit_oscillators.ushrt_max
int_min = _analog_blit_oscillators.int_min
int_max = _analog_blit_oscillators.int_max
uint_max = _analog_blit_oscillators.uint_max
long_min = _analog_blit_oscillators.long_min
long_max = _analog_blit_oscillators.long_max
ulong_max = _analog_blit_oscillators.ulong_max
llong_min = _analog_blit_oscillators.llong_min
llong_max = _analog_blit_oscillators.llong_max
ullong_max = _analog_blit_oscillators.ullong_max
class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _analog_blit_oscillators.Random_swiginit(self, _analog_blit_oscillators.new_Random())

    def frand(self):
        return _analog_blit_oscillators.Random_frand(self)

    def rand(self):
        return _analog_blit_oscillators.Random_rand(self)

    def randint(self, min, max):
        return _analog_blit_oscillators.Random_randint(self, min, max)

    def flip(self, prob):
        return _analog_blit_oscillators.Random_flip(self, prob)

    def random(self, mod):
        return _analog_blit_oscillators.Random_random(self, mod)
    __swig_destroy__ = _analog_blit_oscillators.delete_Random

# Register Random in _analog_blit_oscillators:
_analog_blit_oscillators.Random_swigregister(Random)


def BlitDSF(phase, m, p, a):
    return _analog_blit_oscillators.BlitDSF(phase, m, p, a)
class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analog_blit_oscillators.float_vector_swiginit(self, _analog_blit_oscillators.new_float_vector(*args))

    def __getitem__(self, i):
        return _analog_blit_oscillators.float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _analog_blit_oscillators.float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _analog_blit_oscillators.float_vector_ibegin(self)

    def iend(self):
        return _analog_blit_oscillators.float_vector_iend(self)

    def erase(self, *args):
        return _analog_blit_oscillators.float_vector_erase(self, *args)

    def front(self):
        return _analog_blit_oscillators.float_vector_front(self)

    def back(self):
        return _analog_blit_oscillators.float_vector_back(self)

    def push_back(self, q):
        return _analog_blit_oscillators.float_vector_push_back(self, q)

    def pop_back(self):
        return _analog_blit_oscillators.float_vector_pop_back(self)

    def at(self, i):
        return _analog_blit_oscillators.float_vector_at(self, i)

    def assign(self, n, val):
        return _analog_blit_oscillators.float_vector_assign(self, n, val)

    def data(self):
        return _analog_blit_oscillators.float_vector_data(self)

    def size(self):
        return _analog_blit_oscillators.float_vector_size(self)

    def empty(self):
        return _analog_blit_oscillators.float_vector_empty(self)

    def resize(self, n):
        return _analog_blit_oscillators.float_vector_resize(self, n)

    def clear(self):
        return _analog_blit_oscillators.float_vector_clear(self)

    def swap(self, x):
        return _analog_blit_oscillators.float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _analog_blit_oscillators.float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _analog_blit_oscillators.float_vector_reserve(self, n)

    def max_size(self):
        return _analog_blit_oscillators.float_vector_max_size(self)

    def capacity(self):
        return _analog_blit_oscillators.float_vector_capacity(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_float_vector

# Register float_vector in _analog_blit_oscillators:
_analog_blit_oscillators.float_vector_swigregister(float_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analog_blit_oscillators.double_vector_swiginit(self, _analog_blit_oscillators.new_double_vector(*args))

    def __getitem__(self, i):
        return _analog_blit_oscillators.double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _analog_blit_oscillators.double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _analog_blit_oscillators.double_vector_ibegin(self)

    def iend(self):
        return _analog_blit_oscillators.double_vector_iend(self)

    def erase(self, *args):
        return _analog_blit_oscillators.double_vector_erase(self, *args)

    def front(self):
        return _analog_blit_oscillators.double_vector_front(self)

    def back(self):
        return _analog_blit_oscillators.double_vector_back(self)

    def push_back(self, q):
        return _analog_blit_oscillators.double_vector_push_back(self, q)

    def pop_back(self):
        return _analog_blit_oscillators.double_vector_pop_back(self)

    def at(self, i):
        return _analog_blit_oscillators.double_vector_at(self, i)

    def assign(self, n, val):
        return _analog_blit_oscillators.double_vector_assign(self, n, val)

    def data(self):
        return _analog_blit_oscillators.double_vector_data(self)

    def size(self):
        return _analog_blit_oscillators.double_vector_size(self)

    def empty(self):
        return _analog_blit_oscillators.double_vector_empty(self)

    def resize(self, n):
        return _analog_blit_oscillators.double_vector_resize(self, n)

    def clear(self):
        return _analog_blit_oscillators.double_vector_clear(self)

    def swap(self, x):
        return _analog_blit_oscillators.double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _analog_blit_oscillators.double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _analog_blit_oscillators.double_vector_reserve(self, n)

    def max_size(self):
        return _analog_blit_oscillators.double_vector_max_size(self)

    def capacity(self):
        return _analog_blit_oscillators.double_vector_capacity(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_double_vector

# Register double_vector in _analog_blit_oscillators:
_analog_blit_oscillators.double_vector_swigregister(double_vector)

class complex_float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analog_blit_oscillators.complex_float_vector_swiginit(self, _analog_blit_oscillators.new_complex_float_vector(*args))

    def __getitem__(self, i):
        return _analog_blit_oscillators.complex_float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _analog_blit_oscillators.complex_float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _analog_blit_oscillators.complex_float_vector_ibegin(self)

    def iend(self):
        return _analog_blit_oscillators.complex_float_vector_iend(self)

    def erase(self, *args):
        return _analog_blit_oscillators.complex_float_vector_erase(self, *args)

    def front(self):
        return _analog_blit_oscillators.complex_float_vector_front(self)

    def back(self):
        return _analog_blit_oscillators.complex_float_vector_back(self)

    def push_back(self, q):
        return _analog_blit_oscillators.complex_float_vector_push_back(self, q)

    def pop_back(self):
        return _analog_blit_oscillators.complex_float_vector_pop_back(self)

    def at(self, i):
        return _analog_blit_oscillators.complex_float_vector_at(self, i)

    def assign(self, n, val):
        return _analog_blit_oscillators.complex_float_vector_assign(self, n, val)

    def data(self):
        return _analog_blit_oscillators.complex_float_vector_data(self)

    def size(self):
        return _analog_blit_oscillators.complex_float_vector_size(self)

    def empty(self):
        return _analog_blit_oscillators.complex_float_vector_empty(self)

    def resize(self, n):
        return _analog_blit_oscillators.complex_float_vector_resize(self, n)

    def clear(self):
        return _analog_blit_oscillators.complex_float_vector_clear(self)

    def swap(self, x):
        return _analog_blit_oscillators.complex_float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _analog_blit_oscillators.complex_float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _analog_blit_oscillators.complex_float_vector_reserve(self, n)

    def max_size(self):
        return _analog_blit_oscillators.complex_float_vector_max_size(self)

    def capacity(self):
        return _analog_blit_oscillators.complex_float_vector_capacity(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_complex_float_vector

# Register complex_float_vector in _analog_blit_oscillators:
_analog_blit_oscillators.complex_float_vector_swigregister(complex_float_vector)

class complex_double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _analog_blit_oscillators.complex_double_vector_swiginit(self, _analog_blit_oscillators.new_complex_double_vector(*args))

    def __getitem__(self, i):
        return _analog_blit_oscillators.complex_double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _analog_blit_oscillators.complex_double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _analog_blit_oscillators.complex_double_vector_ibegin(self)

    def iend(self):
        return _analog_blit_oscillators.complex_double_vector_iend(self)

    def erase(self, *args):
        return _analog_blit_oscillators.complex_double_vector_erase(self, *args)

    def front(self):
        return _analog_blit_oscillators.complex_double_vector_front(self)

    def back(self):
        return _analog_blit_oscillators.complex_double_vector_back(self)

    def push_back(self, q):
        return _analog_blit_oscillators.complex_double_vector_push_back(self, q)

    def pop_back(self):
        return _analog_blit_oscillators.complex_double_vector_pop_back(self)

    def at(self, i):
        return _analog_blit_oscillators.complex_double_vector_at(self, i)

    def assign(self, n, val):
        return _analog_blit_oscillators.complex_double_vector_assign(self, n, val)

    def data(self):
        return _analog_blit_oscillators.complex_double_vector_data(self)

    def size(self):
        return _analog_blit_oscillators.complex_double_vector_size(self)

    def empty(self):
        return _analog_blit_oscillators.complex_double_vector_empty(self)

    def resize(self, n):
        return _analog_blit_oscillators.complex_double_vector_resize(self, n)

    def clear(self):
        return _analog_blit_oscillators.complex_double_vector_clear(self)

    def swap(self, x):
        return _analog_blit_oscillators.complex_double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _analog_blit_oscillators.complex_double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _analog_blit_oscillators.complex_double_vector_reserve(self, n)

    def max_size(self):
        return _analog_blit_oscillators.complex_double_vector_max_size(self)

    def capacity(self):
        return _analog_blit_oscillators.complex_double_vector_capacity(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_complex_double_vector

# Register complex_double_vector in _analog_blit_oscillators:
_analog_blit_oscillators.complex_double_vector_swigregister(complex_double_vector)

class Blit2SawOscillator_f32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_analog_blit_oscillators.Blit2SawOscillator_f32_block_get, _analog_blit_oscillators.Blit2SawOscillator_f32_block_set)
    nHarmonics_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_nHarmonics__get, _analog_blit_oscillators.Blit2SawOscillator_f32_nHarmonics__set)
    m_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_m__get, _analog_blit_oscillators.Blit2SawOscillator_f32_m__set)
    rate_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_rate__get, _analog_blit_oscillators.Blit2SawOscillator_f32_rate__set)
    phase_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_phase__get, _analog_blit_oscillators.Blit2SawOscillator_f32_phase__set)
    offset = property(_analog_blit_oscillators.Blit2SawOscillator_f32_offset_get, _analog_blit_oscillators.Blit2SawOscillator_f32_offset_set)
    p_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_p__get, _analog_blit_oscillators.Blit2SawOscillator_f32_p__set)
    C2_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_C2__get, _analog_blit_oscillators.Blit2SawOscillator_f32_C2__set)
    a_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_a__get, _analog_blit_oscillators.Blit2SawOscillator_f32_a__set)
    state_ = property(_analog_blit_oscillators.Blit2SawOscillator_f32_state__get, _analog_blit_oscillators.Blit2SawOscillator_f32_state__set)
    y = property(_analog_blit_oscillators.Blit2SawOscillator_f32_y_get, _analog_blit_oscillators.Blit2SawOscillator_f32_y_set)
    sampleRate = property(_analog_blit_oscillators.Blit2SawOscillator_f32_sampleRate_get, _analog_blit_oscillators.Blit2SawOscillator_f32_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2SawOscillator_f32_swiginit(self, _analog_blit_oscillators.new_Blit2SawOscillator_f32(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_reset(self)

    def setFrequency(self, frequency):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_setHarmonics(self, nHarmonics)

    def getPhase(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_getPhase(self)

    def setPhaseOffset(self, o):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_updateHarmonics(self)
    PORT_FREQ = _analog_blit_oscillators.Blit2SawOscillator_f32_PORT_FREQ
    PORT_HARMONICS = _analog_blit_oscillators.Blit2SawOscillator_f32_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2SawOscillator_f32_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_setPort(self, port, v)

    def lastOut(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2SawOscillator_f32_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f32___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2SawOscillator_f32

# Register Blit2SawOscillator_f32 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2SawOscillator_f32_swigregister(Blit2SawOscillator_f32)

class Blit2SawOscillator_f64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_analog_blit_oscillators.Blit2SawOscillator_f64_block_get, _analog_blit_oscillators.Blit2SawOscillator_f64_block_set)
    nHarmonics_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_nHarmonics__get, _analog_blit_oscillators.Blit2SawOscillator_f64_nHarmonics__set)
    m_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_m__get, _analog_blit_oscillators.Blit2SawOscillator_f64_m__set)
    rate_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_rate__get, _analog_blit_oscillators.Blit2SawOscillator_f64_rate__set)
    phase_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_phase__get, _analog_blit_oscillators.Blit2SawOscillator_f64_phase__set)
    offset = property(_analog_blit_oscillators.Blit2SawOscillator_f64_offset_get, _analog_blit_oscillators.Blit2SawOscillator_f64_offset_set)
    p_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_p__get, _analog_blit_oscillators.Blit2SawOscillator_f64_p__set)
    C2_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_C2__get, _analog_blit_oscillators.Blit2SawOscillator_f64_C2__set)
    a_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_a__get, _analog_blit_oscillators.Blit2SawOscillator_f64_a__set)
    state_ = property(_analog_blit_oscillators.Blit2SawOscillator_f64_state__get, _analog_blit_oscillators.Blit2SawOscillator_f64_state__set)
    y = property(_analog_blit_oscillators.Blit2SawOscillator_f64_y_get, _analog_blit_oscillators.Blit2SawOscillator_f64_y_set)
    sampleRate = property(_analog_blit_oscillators.Blit2SawOscillator_f64_sampleRate_get, _analog_blit_oscillators.Blit2SawOscillator_f64_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2SawOscillator_f64_swiginit(self, _analog_blit_oscillators.new_Blit2SawOscillator_f64(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_reset(self)

    def setFrequency(self, frequency):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_setHarmonics(self, nHarmonics)

    def getPhase(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_getPhase(self)

    def setPhaseOffset(self, o):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_updateHarmonics(self)
    PORT_FREQ = _analog_blit_oscillators.Blit2SawOscillator_f64_PORT_FREQ
    PORT_HARMONICS = _analog_blit_oscillators.Blit2SawOscillator_f64_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2SawOscillator_f64_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_setPort(self, port, v)

    def lastOut(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2SawOscillator_f64_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2SawOscillator_f64___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2SawOscillator_f64

# Register Blit2SawOscillator_f64 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2SawOscillator_f64_swigregister(Blit2SawOscillator_f64)

class Blit2SquareOscillator_f32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_block_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_block_set)
    nHarmonics_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_nHarmonics__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_nHarmonics__set)
    m_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_m__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_m__set)
    f = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_f_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_f_set)
    rate_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_rate__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_rate__set)
    phase_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_phase__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_phase__set)
    offset = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_offset_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_offset_set)
    p_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_p__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_p__set)
    C2_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_C2__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_C2__set)
    a_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_a__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_a__set)
    state_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_state__get, _analog_blit_oscillators.Blit2SquareOscillator_f32_state__set)
    y = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_y_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_y_set)
    D = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_D_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_D_set)
    sampleRate = property(_analog_blit_oscillators.Blit2SquareOscillator_f32_sampleRate_get, _analog_blit_oscillators.Blit2SquareOscillator_f32_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2SquareOscillator_f32_swiginit(self, _analog_blit_oscillators.new_Blit2SquareOscillator_f32(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_reset(self)

    def setFrequency(self, frequency):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_setHarmonics(self, nHarmonics)

    def setDuty(self, d):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_setDuty(self, d)

    def getPhase(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_getPhase(self)

    def setPhaseOffset(self, o):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_updateHarmonics(self)
    PORT_FREQ = _analog_blit_oscillators.Blit2SquareOscillator_f32_PORT_FREQ
    PORT_HARMONICS = _analog_blit_oscillators.Blit2SquareOscillator_f32_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2SquareOscillator_f32_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_setPort(self, port, v)

    def lastOut(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f32___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2SquareOscillator_f32

# Register Blit2SquareOscillator_f32 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2SquareOscillator_f32_swigregister(Blit2SquareOscillator_f32)

class Blit2SquareOscillator_f64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    block = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_block_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_block_set)
    nHarmonics_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_nHarmonics__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_nHarmonics__set)
    m_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_m__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_m__set)
    f = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_f_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_f_set)
    rate_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_rate__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_rate__set)
    phase_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_phase__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_phase__set)
    offset = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_offset_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_offset_set)
    p_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_p__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_p__set)
    C2_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_C2__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_C2__set)
    a_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_a__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_a__set)
    state_ = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_state__get, _analog_blit_oscillators.Blit2SquareOscillator_f64_state__set)
    y = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_y_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_y_set)
    D = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_D_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_D_set)
    sampleRate = property(_analog_blit_oscillators.Blit2SquareOscillator_f64_sampleRate_get, _analog_blit_oscillators.Blit2SquareOscillator_f64_sampleRate_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2SquareOscillator_f64_swiginit(self, _analog_blit_oscillators.new_Blit2SquareOscillator_f64(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_reset(self)

    def setFrequency(self, frequency):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_setFrequency(self, frequency)

    def setHarmonics(self, nHarmonics=0):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_setHarmonics(self, nHarmonics)

    def setDuty(self, d):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_setDuty(self, d)

    def getPhase(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_getPhase(self)

    def setPhaseOffset(self, o):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_setPhaseOffset(self, o)

    def updateHarmonics(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_updateHarmonics(self)
    PORT_FREQ = _analog_blit_oscillators.Blit2SquareOscillator_f64_PORT_FREQ
    PORT_HARMONICS = _analog_blit_oscillators.Blit2SquareOscillator_f64_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2SquareOscillator_f64_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_setPort(self, port, v)

    def lastOut(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_lastOut(self)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2SquareOscillator_f64___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2SquareOscillator_f64

# Register Blit2SquareOscillator_f64 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2SquareOscillator_f64_swigregister(Blit2SquareOscillator_f64)

class Blit2TriangleOscillator_f32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sqr = property(_analog_blit_oscillators.Blit2TriangleOscillator_f32_sqr_get, _analog_blit_oscillators.Blit2TriangleOscillator_f32_sqr_set)
    b1 = property(_analog_blit_oscillators.Blit2TriangleOscillator_f32_b1_get, _analog_blit_oscillators.Blit2TriangleOscillator_f32_b1_set)
    sampleRate = property(_analog_blit_oscillators.Blit2TriangleOscillator_f32_sampleRate_get, _analog_blit_oscillators.Blit2TriangleOscillator_f32_sampleRate_set)
    triangle = property(_analog_blit_oscillators.Blit2TriangleOscillator_f32_triangle_get, _analog_blit_oscillators.Blit2TriangleOscillator_f32_triangle_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2TriangleOscillator_f32_swiginit(self, _analog_blit_oscillators.new_Blit2TriangleOscillator_f32(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_reset(self)

    def setDuty(self, d):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_setDuty(self, d)

    def setFrequency(self, f):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_setFrequency(self, f)
    PORT_FREQ = _analog_blit_oscillators.Blit2TriangleOscillator_f32_PORT_FREQ
    PORT_DUTY = _analog_blit_oscillators.Blit2TriangleOscillator_f32_PORT_DUTY
    PORT_RESET = _analog_blit_oscillators.Blit2TriangleOscillator_f32_PORT_RESET
    PORT_HARMONICS = _analog_blit_oscillators.Blit2TriangleOscillator_f32_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2TriangleOscillator_f32_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f32___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2TriangleOscillator_f32

# Register Blit2TriangleOscillator_f32 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2TriangleOscillator_f32_swigregister(Blit2TriangleOscillator_f32)

class Blit2TriangleOscillator_f64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sqr = property(_analog_blit_oscillators.Blit2TriangleOscillator_f64_sqr_get, _analog_blit_oscillators.Blit2TriangleOscillator_f64_sqr_set)
    b1 = property(_analog_blit_oscillators.Blit2TriangleOscillator_f64_b1_get, _analog_blit_oscillators.Blit2TriangleOscillator_f64_b1_set)
    sampleRate = property(_analog_blit_oscillators.Blit2TriangleOscillator_f64_sampleRate_get, _analog_blit_oscillators.Blit2TriangleOscillator_f64_sampleRate_set)
    triangle = property(_analog_blit_oscillators.Blit2TriangleOscillator_f64_triangle_get, _analog_blit_oscillators.Blit2TriangleOscillator_f64_triangle_set)

    def __init__(self, sampleRate=44100.0, frequency=440.0):
        _analog_blit_oscillators.Blit2TriangleOscillator_f64_swiginit(self, _analog_blit_oscillators.new_Blit2TriangleOscillator_f64(sampleRate, frequency))

    def reset(self):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_reset(self)

    def setDuty(self, d):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_setDuty(self, d)

    def setFrequency(self, f):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_setFrequency(self, f)
    PORT_FREQ = _analog_blit_oscillators.Blit2TriangleOscillator_f64_PORT_FREQ
    PORT_DUTY = _analog_blit_oscillators.Blit2TriangleOscillator_f64_PORT_DUTY
    PORT_RESET = _analog_blit_oscillators.Blit2TriangleOscillator_f64_PORT_RESET
    PORT_HARMONICS = _analog_blit_oscillators.Blit2TriangleOscillator_f64_PORT_HARMONICS
    PORT_PHASE = _analog_blit_oscillators.Blit2TriangleOscillator_f64_PORT_PHASE

    def setPort(self, port, v):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_setPort(self, port, v)

    def Tick(self, I=1, A=1, X=1, Y=1):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_Tick(self, I, A, X, Y)

    def ProcessSIMD(self, n, out):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64_ProcessSIMD(self, n, out)

    def __call__(self):
        return _analog_blit_oscillators.Blit2TriangleOscillator_f64___call__(self)
    __swig_destroy__ = _analog_blit_oscillators.delete_Blit2TriangleOscillator_f64

# Register Blit2TriangleOscillator_f64 in _analog_blit_oscillators:
_analog_blit_oscillators.Blit2TriangleOscillator_f64_swigregister(Blit2TriangleOscillator_f64)



