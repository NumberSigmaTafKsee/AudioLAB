# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Amplifiers
else:
    import _Amplifiers

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class float_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.float_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.float_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.float_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.float_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.float_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.float_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.float_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.float_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.float_numeric_limits_swiginit(self, _Amplifiers.new_float_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_float_numeric_limits

# Register float_numeric_limits in _Amplifiers:
_Amplifiers.float_numeric_limits_swigregister(float_numeric_limits)

class double_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.double_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.double_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.double_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.double_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.double_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.double_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.double_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.double_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.double_numeric_limits_swiginit(self, _Amplifiers.new_double_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_double_numeric_limits

# Register double_numeric_limits in _Amplifiers:
_Amplifiers.double_numeric_limits_swigregister(double_numeric_limits)

class int_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.int_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.int_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.int_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.int_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.int_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.int_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.int_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.int_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.int_numeric_limits_swiginit(self, _Amplifiers.new_int_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_int_numeric_limits

# Register int_numeric_limits in _Amplifiers:
_Amplifiers.int_numeric_limits_swigregister(int_numeric_limits)

class uint_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.uint_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.uint_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.uint_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.uint_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.uint_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.uint_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.uint_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.uint_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.uint_numeric_limits_swiginit(self, _Amplifiers.new_uint_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_uint_numeric_limits

# Register uint_numeric_limits in _Amplifiers:
_Amplifiers.uint_numeric_limits_swigregister(uint_numeric_limits)

class short_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.short_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.short_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.short_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.short_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.short_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.short_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.short_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.short_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.short_numeric_limits_swiginit(self, _Amplifiers.new_short_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_short_numeric_limits

# Register short_numeric_limits in _Amplifiers:
_Amplifiers.short_numeric_limits_swigregister(short_numeric_limits)

class ushort_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.ushort_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.ushort_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.ushort_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.ushort_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.ushort_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.ushort_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.ushort_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.ushort_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.ushort_numeric_limits_swiginit(self, _Amplifiers.new_ushort_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_ushort_numeric_limits

# Register ushort_numeric_limits in _Amplifiers:
_Amplifiers.ushort_numeric_limits_swigregister(ushort_numeric_limits)

class long_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.long_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.long_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.long_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.long_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.long_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.long_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.long_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.long_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.long_numeric_limits_swiginit(self, _Amplifiers.new_long_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_long_numeric_limits

# Register long_numeric_limits in _Amplifiers:
_Amplifiers.long_numeric_limits_swigregister(long_numeric_limits)

class ulong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.ulong_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.ulong_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.ulong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.ulong_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.ulong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.ulong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.ulong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.ulong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.ulong_numeric_limits_swiginit(self, _Amplifiers.new_ulong_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_ulong_numeric_limits

# Register ulong_numeric_limits in _Amplifiers:
_Amplifiers.ulong_numeric_limits_swigregister(ulong_numeric_limits)

class llong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.llong_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.llong_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.llong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.llong_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.llong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.llong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.llong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.llong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.llong_numeric_limits_swiginit(self, _Amplifiers.new_llong_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_llong_numeric_limits

# Register llong_numeric_limits in _Amplifiers:
_Amplifiers.llong_numeric_limits_swigregister(llong_numeric_limits)

class ullong_numeric_limits(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def min(self):
        return _Amplifiers.ullong_numeric_limits_min(self)

    def max(self):
        return _Amplifiers.ullong_numeric_limits_max(self)

    def epsilon(self):
        return _Amplifiers.ullong_numeric_limits_epsilon(self)

    def round_error(self):
        return _Amplifiers.ullong_numeric_limits_round_error(self)

    def infinity(self):
        return _Amplifiers.ullong_numeric_limits_infinity(self)

    def quiet_NaN(self):
        return _Amplifiers.ullong_numeric_limits_quiet_NaN(self)

    def signaling_NaN(self):
        return _Amplifiers.ullong_numeric_limits_signaling_NaN(self)

    def denorm_min(self):
        return _Amplifiers.ullong_numeric_limits_denorm_min(self)

    def __init__(self):
        _Amplifiers.ullong_numeric_limits_swiginit(self, _Amplifiers.new_ullong_numeric_limits())
    __swig_destroy__ = _Amplifiers.delete_ullong_numeric_limits

# Register ullong_numeric_limits in _Amplifiers:
_Amplifiers.ullong_numeric_limits_swigregister(ullong_numeric_limits)


def Huge():
    return _Amplifiers.Huge()

def Hugef():
    return _Amplifiers.Hugef()

def Infinity():
    return _Amplifiers.Infinity()

def NaN():
    return _Amplifiers.NaN()
char_bit = _Amplifiers.char_bit
schar_min = _Amplifiers.schar_min
schar_max = _Amplifiers.schar_max
uchar_max = _Amplifiers.uchar_max
char_min = _Amplifiers.char_min
char_max = _Amplifiers.char_max
mb_len_max = _Amplifiers.mb_len_max
shrt_min = _Amplifiers.shrt_min
shrt_max = _Amplifiers.shrt_max
ushrt_max = _Amplifiers.ushrt_max
int_min = _Amplifiers.int_min
int_max = _Amplifiers.int_max
uint_max = _Amplifiers.uint_max
long_min = _Amplifiers.long_min
long_max = _Amplifiers.long_max
ulong_max = _Amplifiers.ulong_max
llong_min = _Amplifiers.llong_min
llong_max = _Amplifiers.llong_max
ullong_max = _Amplifiers.ullong_max
class Random(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.Random_swiginit(self, _Amplifiers.new_Random())

    @staticmethod
    def seed():
        return _Amplifiers.Random_seed()

    def frand(self):
        return _Amplifiers.Random_frand(self)

    def rand(self):
        return _Amplifiers.Random_rand(self)

    def randint(self, min, max):
        return _Amplifiers.Random_randint(self, min, max)

    def flip(self, prob):
        return _Amplifiers.Random_flip(self, prob)

    def random(self, mod):
        return _Amplifiers.Random_random(self, mod)
    __swig_destroy__ = _Amplifiers.delete_Random

# Register Random in _Amplifiers:
_Amplifiers.Random_swigregister(Random)

PARAMETER2_PROCESSOR = _Amplifiers.PARAMETER2_PROCESSOR
STEREOSPLITTER_PROCESSOR = _Amplifiers.STEREOSPLITTER_PROCESSOR
MONO_GENERATOR_PROCESSOR = _Amplifiers.MONO_GENERATOR_PROCESSOR
MONO_FUNCTION_PROCESSOR = _Amplifiers.MONO_FUNCTION_PROCESSOR
MONO_OSCILLATOR_PROCESSOR = _Amplifiers.MONO_OSCILLATOR_PROCESSOR
MONO_FILTER_PROCESSOR = _Amplifiers.MONO_FILTER_PROCESSOR
MONO_AMPLIFIER_PROCESSOR = _Amplifiers.MONO_AMPLIFIER_PROCESSOR
MONO_FX_PROCESSOR = _Amplifiers.MONO_FX_PROCESSOR
MONO_CASCADE_PROCESSOR = _Amplifiers.MONO_CASCADE_PROCESSOR
MONO_MIXER_PROCESSOR = _Amplifiers.MONO_MIXER_PROCESSOR
MONO_MORPHER_PROCESSOR = _Amplifiers.MONO_MORPHER_PROCESSOR
MONO_OPERATOR_PROCESSOR = _Amplifiers.MONO_OPERATOR_PROCESSOR
MONO_OVERSAMPLE_PROCESSOR = _Amplifiers.MONO_OVERSAMPLE_PROCESSOR
MONO_UPSAMPLE_PROCESSOR = _Amplifiers.MONO_UPSAMPLE_PROCESSOR
MONO_DOWNSAMPLE_PROCESSOR = _Amplifiers.MONO_DOWNSAMPLE_PROCESSOR
STEREO_FX_PROCESSOR = _Amplifiers.STEREO_FX_PROCESSOR
STEREO_OVERSAMPLER_PROCESSOR = _Amplifiers.STEREO_OVERSAMPLER_PROCESSOR
STEREO_UPSAMPLER_PROCESSOR = _Amplifiers.STEREO_UPSAMPLER_PROCESSOR
STEREO_DOWNSAMPLER_PROCESSOR = _Amplifiers.STEREO_DOWNSAMPLER_PROCESSOR
STEREO_GENERATOR_PROCESSOR = _Amplifiers.STEREO_GENERATOR_PROCESSOR
STEREO_FUNCTION_PROCESSOR = _Amplifiers.STEREO_FUNCTION_PROCESSOR
STEREO_PARAMETER2_PROCESSOR = _Amplifiers.STEREO_PARAMETER2_PROCESSOR
STEREO_OSCILLATOR_PROCESSOR = _Amplifiers.STEREO_OSCILLATOR_PROCESSOR
STEREO_FILTER_PROCESSOR = _Amplifiers.STEREO_FILTER_PROCESSOR
STEREO_AMPLIFIER_PROCESSOR = _Amplifiers.STEREO_AMPLIFIER_PROCESSOR
STEREO_CASCADE_PROCESSOR = _Amplifiers.STEREO_CASCADE_PROCESSOR
STEREO_OPERATOR_PROCESSOR = _Amplifiers.STEREO_OPERATOR_PROCESSOR
MONO_SIGNAL_SOURCE_PROCESSOR = _Amplifiers.MONO_SIGNAL_SOURCE_PROCESSOR
STEREO_SIGNAL_SOURCE_PROCESSOR = _Amplifiers.STEREO_SIGNAL_SOURCE_PROCESSOR
MONO_SIGNAL_SINK_PROCESSOR = _Amplifiers.MONO_SIGNAL_SINK_PROCESSOR
STEREO_SIGNAL_SINK_PROCESSOR = _Amplifiers.STEREO_SIGNAL_SINK_PROCESSOR
INTERLEAVE_PROCESSOR = _Amplifiers.INTERLEAVE_PROCESSOR
DEINERLEAVE_PROCESSOR = _Amplifiers.DEINERLEAVE_PROCESSOR
FILTER_BANK_PROCESSOR = _Amplifiers.FILTER_BANK_PROCESSOR
SPECTRUM_PROCESSOR = _Amplifiers.SPECTRUM_PROCESSOR
class SoundProcessor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    preGain = property(_Amplifiers.SoundProcessor_preGain_get, _Amplifiers.SoundProcessor_preGain_set)
    postGain = property(_Amplifiers.SoundProcessor_postGain_get, _Amplifiers.SoundProcessor_postGain_set)

    def getType(self):
        return _Amplifiers.SoundProcessor_getType(self)

    def setPort(self, port, value):
        return _Amplifiers.SoundProcessor_setPort(self, port, value)

    def setPort2(self, port, a, b):
        return _Amplifiers.SoundProcessor_setPort2(self, port, a, b)

    def setPortV(self, port, v):
        return _Amplifiers.SoundProcessor_setPortV(self, port, v)

    def getPort(self, port):
        return _Amplifiers.SoundProcessor_getPort(self, port)

    def getPort2(self, port, v):
        return _Amplifiers.SoundProcessor_getPort2(self, port, v)

    def getPortV(self, port, v):
        return _Amplifiers.SoundProcessor_getPortV(self, port, v)

    def printPortMap(self):
        return _Amplifiers.SoundProcessor_printPortMap(self)

    def randomize(self):
        return _Amplifiers.SoundProcessor_randomize(self)

    def loadPreset(self, filename):
        return _Amplifiers.SoundProcessor_loadPreset(self, filename)

    def savePreset(self, filename):
        return _Amplifiers.SoundProcessor_savePreset(self, filename)
    __swig_destroy__ = _Amplifiers.delete_SoundProcessor

# Register SoundProcessor in _Amplifiers:
_Amplifiers.SoundProcessor_swigregister(SoundProcessor)

class Port(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    port = property(_Amplifiers.Port_port_get, _Amplifiers.Port_port_set)
    value = property(_Amplifiers.Port_value_get, _Amplifiers.Port_value_set)
    p = property(_Amplifiers.Port_p_get, _Amplifiers.Port_p_set)

    def __init__(self):
        _Amplifiers.Port_swiginit(self, _Amplifiers.new_Port())
    __swig_destroy__ = _Amplifiers.delete_Port

# Register Port in _Amplifiers:
_Amplifiers.Port_swigregister(Port)

class Ports(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ports = property(_Amplifiers.Ports_ports_get, _Amplifiers.Ports_ports_set)
    portmap = property(_Amplifiers.Ports_portmap_get, _Amplifiers.Ports_portmap_set)

    def __init__(self):
        _Amplifiers.Ports_swiginit(self, _Amplifiers.new_Ports())

    def addPort(self, name, p):
        return _Amplifiers.Ports_addPort(self, name, p)

    def Run(self):
        return _Amplifiers.Ports_Run(self)
    __swig_destroy__ = _Amplifiers.delete_Ports

# Register Ports in _Amplifiers:
_Amplifiers.Ports_swigregister(Ports)

class MonoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def InplaceProcess(self, n, buffer):
        return _Amplifiers.MonoProcessor_InplaceProcess(self, n, buffer)

    def Tick(self, I=1, A=1, X=0, Y=0):
        return _Amplifiers.MonoProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoProcessor

# Register MonoProcessor in _Amplifiers:
_Amplifiers.MonoProcessor_swigregister(MonoProcessor)

class MonoCascadeProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_Amplifiers.MonoCascadeProcessor_procs_get, _Amplifiers.MonoCascadeProcessor_procs_set)

    def __init__(self):
        _Amplifiers.MonoCascadeProcessor_swiginit(self, _Amplifiers.new_MonoCascadeProcessor())

    def getType(self):
        return _Amplifiers.MonoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoCascadeProcessor

# Register MonoCascadeProcessor in _Amplifiers:
_Amplifiers.MonoCascadeProcessor_swigregister(MonoCascadeProcessor)

class StereoProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    pan = property(_Amplifiers.StereoProcessor_pan_get, _Amplifiers.StereoProcessor_pan_set)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.StereoProcessor_ProcessBlock(self, n, inputs, outputs)

    def Tick(self, IL, IR, L, R, A=1, X=0, Y=0):
        return _Amplifiers.StereoProcessor_Tick(self, IL, IR, L, R, A, X, Y)

    def InplaceProcess(self, n, buffer):
        return _Amplifiers.StereoProcessor_InplaceProcess(self, n, buffer)

    def Run(self, n, inputs, outputs):
        return _Amplifiers.StereoProcessor_Run(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_StereoProcessor

# Register StereoProcessor in _Amplifiers:
_Amplifiers.StereoProcessor_swigregister(StereoProcessor)

class StereoCascadeProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    procs = property(_Amplifiers.StereoCascadeProcessor_procs_get, _Amplifiers.StereoCascadeProcessor_procs_set)

    def __init__(self):
        _Amplifiers.StereoCascadeProcessor_swiginit(self, _Amplifiers.new_StereoCascadeProcessor())

    def getType(self):
        return _Amplifiers.StereoCascadeProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.StereoCascadeProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_StereoCascadeProcessor

# Register StereoCascadeProcessor in _Amplifiers:
_Amplifiers.StereoCascadeProcessor_swigregister(StereoCascadeProcessor)

class MonoFXProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.MonoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoFXProcessor

# Register MonoFXProcessor in _Amplifiers:
_Amplifiers.MonoFXProcessor_swigregister(MonoFXProcessor)

class StereoFXProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.StereoFXProcessor_getType(self)

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.StereoFXProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_StereoFXProcessor

# Register StereoFXProcessor in _Amplifiers:
_Amplifiers.StereoFXProcessor_swigregister(StereoFXProcessor)

class GeneratorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.GeneratorProcessor_getType(self)

    def Tick(self, I=0, A=0, X=0, Y=0):
        return _Amplifiers.GeneratorProcessor_Tick(self, I, A, X, Y)

    def Generate(self, n, output):
        return _Amplifiers.GeneratorProcessor_Generate(self, n, output)

    def ProcessBlock(self, n, _in, out):
        return _Amplifiers.GeneratorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Amplifiers.delete_GeneratorProcessor

# Register GeneratorProcessor in _Amplifiers:
_Amplifiers.GeneratorProcessor_swigregister(GeneratorProcessor)

class MixerProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MixerProcessor_swiginit(self, _Amplifiers.new_MixerProcessor())

    def getType(self):
        return _Amplifiers.MixerProcessor_getType(self)

    def ProcessBlock(self, *args):
        return _Amplifiers.MixerProcessor_ProcessBlock(self, *args)
    __swig_destroy__ = _Amplifiers.delete_MixerProcessor

# Register MixerProcessor in _Amplifiers:
_Amplifiers.MixerProcessor_swigregister(MixerProcessor)

class FunctionProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.FunctionProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Amplifiers.FunctionProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, input, output):
        return _Amplifiers.FunctionProcessor_ProcessBlock(self, n, input, output)
    __swig_destroy__ = _Amplifiers.delete_FunctionProcessor

# Register FunctionProcessor in _Amplifiers:
_Amplifiers.FunctionProcessor_swigregister(FunctionProcessor)

class Parameter2Processor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.Parameter2Processor_getType(self)

    def Tick(self, a, b):
        return _Amplifiers.Parameter2Processor_Tick(self, a, b)

    def ProcessBlock(self, n, x, y, output):
        return _Amplifiers.Parameter2Processor_ProcessBlock(self, n, x, y, output)
    __swig_destroy__ = _Amplifiers.delete_Parameter2Processor

# Register Parameter2Processor in _Amplifiers:
_Amplifiers.Parameter2Processor_swigregister(Parameter2Processor)

class StereoSplitterProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.StereoSplitterProcessor_getType(self)

    def Tick(self, _in, a, b):
        return _Amplifiers.StereoSplitterProcessor_Tick(self, _in, a, b)

    def ProcessBlock(self, n, _in, a, b):
        return _Amplifiers.StereoSplitterProcessor_ProcessBlock(self, n, _in, a, b)
    __swig_destroy__ = _Amplifiers.delete_StereoSplitterProcessor

# Register StereoSplitterProcessor in _Amplifiers:
_Amplifiers.StereoSplitterProcessor_swigregister(StereoSplitterProcessor)

class OscillatorProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    slaves = property(_Amplifiers.OscillatorProcessor_slaves_get, _Amplifiers.OscillatorProcessor_slaves_set)
    m_waveform = property(_Amplifiers.OscillatorProcessor_m_waveform_get, _Amplifiers.OscillatorProcessor_m_waveform_set)
    m_morph = property(_Amplifiers.OscillatorProcessor_m_morph_get, _Amplifiers.OscillatorProcessor_m_morph_set)
    m_freq = property(_Amplifiers.OscillatorProcessor_m_freq_get, _Amplifiers.OscillatorProcessor_m_freq_set)
    m_phase = property(_Amplifiers.OscillatorProcessor_m_phase_get, _Amplifiers.OscillatorProcessor_m_phase_set)
    m_index = property(_Amplifiers.OscillatorProcessor_m_index_get, _Amplifiers.OscillatorProcessor_m_index_set)
    m_gain = property(_Amplifiers.OscillatorProcessor_m_gain_get, _Amplifiers.OscillatorProcessor_m_gain_set)
    m_fm = property(_Amplifiers.OscillatorProcessor_m_fm_get, _Amplifiers.OscillatorProcessor_m_fm_set)
    m_pm = property(_Amplifiers.OscillatorProcessor_m_pm_get, _Amplifiers.OscillatorProcessor_m_pm_set)
    m_fenv = property(_Amplifiers.OscillatorProcessor_m_fenv_get, _Amplifiers.OscillatorProcessor_m_fenv_set)
    m_penv = property(_Amplifiers.OscillatorProcessor_m_penv_get, _Amplifiers.OscillatorProcessor_m_penv_set)
    m_drift = property(_Amplifiers.OscillatorProcessor_m_drift_get, _Amplifiers.OscillatorProcessor_m_drift_set)
    m_mod = property(_Amplifiers.OscillatorProcessor_m_mod_get, _Amplifiers.OscillatorProcessor_m_mod_set)
    m_cmod = property(_Amplifiers.OscillatorProcessor_m_cmod_get, _Amplifiers.OscillatorProcessor_m_cmod_set)
    m_env = property(_Amplifiers.OscillatorProcessor_m_env_get, _Amplifiers.OscillatorProcessor_m_env_set)
    m_lfo = property(_Amplifiers.OscillatorProcessor_m_lfo_get, _Amplifiers.OscillatorProcessor_m_lfo_set)
    m_pwm = property(_Amplifiers.OscillatorProcessor_m_pwm_get, _Amplifiers.OscillatorProcessor_m_pwm_set)

    def getType(self):
        return _Amplifiers.OscillatorProcessor_getType(self)

    def Tick(self, I=0, A=1, X=0, Y=0):
        return _Amplifiers.OscillatorProcessor_Tick(self, I, A, X, Y)

    def ProcessBlock(self, n, _in, out):
        return _Amplifiers.OscillatorProcessor_ProcessBlock(self, n, _in, out)
    __swig_destroy__ = _Amplifiers.delete_OscillatorProcessor

# Register OscillatorProcessor in _Amplifiers:
_Amplifiers.OscillatorProcessor_swigregister(OscillatorProcessor)

class FilterProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.FilterProcessor_getType(self)

    def Tick(self, I, A=1, X=0, Y=0):
        return _Amplifiers.FilterProcessor_Tick(self, I, A, X, Y)

    def Run(self, I, A=1, X=0, Y=0):
        return _Amplifiers.FilterProcessor_Run(self, I, A, X, Y)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _Amplifiers.FilterProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_FilterProcessor

# Register FilterProcessor in _Amplifiers:
_Amplifiers.FilterProcessor_swigregister(FilterProcessor)

class AmplifierProcessor(MonoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.AmplifierProcessor_Tick(self, I, A, X, Y)

    def getType(self):
        return _Amplifiers.AmplifierProcessor_getType(self)

    def ProcessBlock(self, numSamples, inputs, outputs):
        return _Amplifiers.AmplifierProcessor_ProcessBlock(self, numSamples, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_AmplifierProcessor

# Register AmplifierProcessor in _Amplifiers:
_Amplifiers.AmplifierProcessor_swigregister(AmplifierProcessor)

class StereoOscillatorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_Amplifiers.StereoOscillatorProcessor_osc_get, _Amplifiers.StereoOscillatorProcessor_osc_set)

    def __init__(self, o):
        _Amplifiers.StereoOscillatorProcessor_swiginit(self, _Amplifiers.new_StereoOscillatorProcessor(o))

    def getType(self):
        return _Amplifiers.StereoOscillatorProcessor_getType(self)

    def setPan(self, p):
        return _Amplifiers.StereoOscillatorProcessor_setPan(self, p)

    def ProcessBlock(self, n, out):
        return _Amplifiers.StereoOscillatorProcessor_ProcessBlock(self, n, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Amplifiers.StereoOscillatorProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_StereoOscillatorProcessor

# Register StereoOscillatorProcessor in _Amplifiers:
_Amplifiers.StereoOscillatorProcessor_swigregister(StereoOscillatorProcessor)

class StereoGeneratorProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    osc = property(_Amplifiers.StereoGeneratorProcessor_osc_get, _Amplifiers.StereoGeneratorProcessor_osc_set)

    def __init__(self, o):
        _Amplifiers.StereoGeneratorProcessor_swiginit(self, _Amplifiers.new_StereoGeneratorProcessor(o))

    def getType(self):
        return _Amplifiers.StereoGeneratorProcessor_getType(self)

    def setPan(self, p):
        return _Amplifiers.StereoGeneratorProcessor_setPan(self, p)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Amplifiers.StereoGeneratorProcessor_Tick(self, iL, iR, L, R, A, X, Y)

    def ProcessBlock(self, n, out):
        return _Amplifiers.StereoGeneratorProcessor_ProcessBlock(self, n, out)
    __swig_destroy__ = _Amplifiers.delete_StereoGeneratorProcessor

# Register StereoGeneratorProcessor in _Amplifiers:
_Amplifiers.StereoGeneratorProcessor_swigregister(StereoGeneratorProcessor)

class StereoFunctionProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Amplifiers.StereoFunctionProcessor_filter_get, _Amplifiers.StereoFunctionProcessor_filter_set)

    def __init__(self, L, R):
        _Amplifiers.StereoFunctionProcessor_swiginit(self, _Amplifiers.new_StereoFunctionProcessor(L, R))

    def getType(self):
        return _Amplifiers.StereoFunctionProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Amplifiers.StereoFunctionProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Amplifiers.StereoFunctionProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_StereoFunctionProcessor

# Register StereoFunctionProcessor in _Amplifiers:
_Amplifiers.StereoFunctionProcessor_swigregister(StereoFunctionProcessor)

class StereoFilterProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filter = property(_Amplifiers.StereoFilterProcessor_filter_get, _Amplifiers.StereoFilterProcessor_filter_set)

    def __init__(self, L, R):
        _Amplifiers.StereoFilterProcessor_swiginit(self, _Amplifiers.new_StereoFilterProcessor(L, R))

    def getType(self):
        return _Amplifiers.StereoFilterProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Amplifiers.StereoFilterProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=1, X=1, Y=1):
        return _Amplifiers.StereoFilterProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_StereoFilterProcessor

# Register StereoFilterProcessor in _Amplifiers:
_Amplifiers.StereoFilterProcessor_swigregister(StereoFilterProcessor)

class StereoAmplifierProcessor(StereoProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amp = property(_Amplifiers.StereoAmplifierProcessor_amp_get, _Amplifiers.StereoAmplifierProcessor_amp_set)

    def __init__(self, L, R):
        _Amplifiers.StereoAmplifierProcessor_swiginit(self, _Amplifiers.new_StereoAmplifierProcessor(L, R))

    def getType(self):
        return _Amplifiers.StereoAmplifierProcessor_getType(self)

    def ProcessBlock(self, n, _in, out):
        return _Amplifiers.StereoAmplifierProcessor_ProcessBlock(self, n, _in, out)

    def Tick(self, iL, iR, L, R, A=0, X=0, Y=0):
        return _Amplifiers.StereoAmplifierProcessor_Tick(self, iL, iR, L, R, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_StereoAmplifierProcessor

# Register StereoAmplifierProcessor in _Amplifiers:
_Amplifiers.StereoAmplifierProcessor_swigregister(StereoAmplifierProcessor)

class SpectrumProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.SpectrumProcessor_getType(self)

    def __init__(self):
        _Amplifiers.SpectrumProcessor_swiginit(self, _Amplifiers.new_SpectrumProcessor())
    __swig_destroy__ = _Amplifiers.delete_SpectrumProcessor

# Register SpectrumProcessor in _Amplifiers:
_Amplifiers.SpectrumProcessor_swigregister(SpectrumProcessor)

class SignalSourceProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Amplifiers.delete_SignalSourceProcessor

# Register SignalSourceProcessor in _Amplifiers:
_Amplifiers.SignalSourceProcessor_swigregister(SignalSourceProcessor)

class SignalSinkProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Amplifiers.delete_SignalSinkProcessor

# Register SignalSinkProcessor in _Amplifiers:
_Amplifiers.SignalSinkProcessor_swigregister(SignalSinkProcessor)

class MonoOversampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.MonoOversampleProcessor_getType(self)

    def __init__(self):
        _Amplifiers.MonoOversampleProcessor_swiginit(self, _Amplifiers.new_MonoOversampleProcessor())
    __swig_destroy__ = _Amplifiers.delete_MonoOversampleProcessor

# Register MonoOversampleProcessor in _Amplifiers:
_Amplifiers.MonoOversampleProcessor_swigregister(MonoOversampleProcessor)

class MonoUpsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.MonoUpsampleProcessor_getType(self)

    def __init__(self):
        _Amplifiers.MonoUpsampleProcessor_swiginit(self, _Amplifiers.new_MonoUpsampleProcessor())
    __swig_destroy__ = _Amplifiers.delete_MonoUpsampleProcessor

# Register MonoUpsampleProcessor in _Amplifiers:
_Amplifiers.MonoUpsampleProcessor_swigregister(MonoUpsampleProcessor)

class MonoDownsampleProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getType(self):
        return _Amplifiers.MonoDownsampleProcessor_getType(self)

    def __init__(self):
        _Amplifiers.MonoDownsampleProcessor_swiginit(self, _Amplifiers.new_MonoDownsampleProcessor())
    __swig_destroy__ = _Amplifiers.delete_MonoDownsampleProcessor

# Register MonoDownsampleProcessor in _Amplifiers:
_Amplifiers.MonoDownsampleProcessor_swigregister(MonoDownsampleProcessor)

class OperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Amplifiers.delete_OperatorProcessor

# Register OperatorProcessor in _Amplifiers:
_Amplifiers.OperatorProcessor_swigregister(OperatorProcessor)

class MonoOperatorProcessor(SoundProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_Amplifiers.MonoOperatorProcessor_list_get, _Amplifiers.MonoOperatorProcessor_list_set)

    def __init__(self):
        _Amplifiers.MonoOperatorProcessor_swiginit(self, _Amplifiers.new_MonoOperatorProcessor())

    def getType(self):
        return _Amplifiers.MonoOperatorProcessor_getType(self)

    def GetSamples(self, p, n, input, output):
        return _Amplifiers.MonoOperatorProcessor_GetSamples(self, p, n, input, output)
    __swig_destroy__ = _Amplifiers.delete_MonoOperatorProcessor

# Register MonoOperatorProcessor in _Amplifiers:
_Amplifiers.MonoOperatorProcessor_swigregister(MonoOperatorProcessor)

class MonoCascadeOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MonoCascadeOperatorProcessor_swiginit(self, _Amplifiers.new_MonoCascadeOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoCascadeOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoCascadeOperatorProcessor

# Register MonoCascadeOperatorProcessor in _Amplifiers:
_Amplifiers.MonoCascadeOperatorProcessor_swigregister(MonoCascadeOperatorProcessor)

class MonoMultiplierOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MonoMultiplierOperatorProcessor_swiginit(self, _Amplifiers.new_MonoMultiplierOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoMultiplierOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoMultiplierOperatorProcessor

# Register MonoMultiplierOperatorProcessor in _Amplifiers:
_Amplifiers.MonoMultiplierOperatorProcessor_swigregister(MonoMultiplierOperatorProcessor)

class MonoAdderOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MonoAdderOperatorProcessor_swiginit(self, _Amplifiers.new_MonoAdderOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoAdderOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoAdderOperatorProcessor

# Register MonoAdderOperatorProcessor in _Amplifiers:
_Amplifiers.MonoAdderOperatorProcessor_swigregister(MonoAdderOperatorProcessor)

class MonoSubtractorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MonoSubtractorOperatorProcessor_swiginit(self, _Amplifiers.new_MonoSubtractorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoSubtractorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoSubtractorOperatorProcessor

# Register MonoSubtractorOperatorProcessor in _Amplifiers:
_Amplifiers.MonoSubtractorOperatorProcessor_swigregister(MonoSubtractorOperatorProcessor)

class MonoModulatorOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.MonoModulatorOperatorProcessor_swiginit(self, _Amplifiers.new_MonoModulatorOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoModulatorOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoModulatorOperatorProcessor

# Register MonoModulatorOperatorProcessor in _Amplifiers:
_Amplifiers.MonoModulatorOperatorProcessor_swigregister(MonoModulatorOperatorProcessor)

class MonoBlendOperatorProcessor(MonoOperatorProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blend = property(_Amplifiers.MonoBlendOperatorProcessor_blend_get, _Amplifiers.MonoBlendOperatorProcessor_blend_set)

    def __init__(self):
        _Amplifiers.MonoBlendOperatorProcessor_swiginit(self, _Amplifiers.new_MonoBlendOperatorProcessor())

    def ProcessBlock(self, n, inputs, outputs):
        return _Amplifiers.MonoBlendOperatorProcessor_ProcessBlock(self, n, inputs, outputs)
    __swig_destroy__ = _Amplifiers.delete_MonoBlendOperatorProcessor

# Register MonoBlendOperatorProcessor in _Amplifiers:
_Amplifiers.MonoBlendOperatorProcessor_swigregister(MonoBlendOperatorProcessor)


def function_morpher(x, y, frac=0.5):
    return _Amplifiers.function_morpher(x, y, frac)
DISTORTION_NONE = _Amplifiers.DISTORTION_NONE
DISTORTION_DC = _Amplifiers.DISTORTION_DC
DISTORTION_BIPOLAR = _Amplifiers.DISTORTION_BIPOLAR
DISTORTION_QUADRATIC = _Amplifiers.DISTORTION_QUADRATIC
DISTORTION_QUADRATIC2 = _Amplifiers.DISTORTION_QUADRATIC2
DISTORTION_QUADRATIC3 = _Amplifiers.DISTORTION_QUADRATIC3
DISTORTION_PARAMETRIC = _Amplifiers.DISTORTION_PARAMETRIC
DISTORTION_ARCTAN2 = _Amplifiers.DISTORTION_ARCTAN2
DISTORTION_SOFT = _Amplifiers.DISTORTION_SOFT
DISTORTION_ERF = _Amplifiers.DISTORTION_ERF
DISTORTION_HARDCLIP = _Amplifiers.DISTORTION_HARDCLIP
DISTORTION_HYPERTAN = _Amplifiers.DISTORTION_HYPERTAN
DISTORTION_DIODECLIP = _Amplifiers.DISTORTION_DIODECLIP
DISTORTION_FUZZEXP = _Amplifiers.DISTORTION_FUZZEXP
DISTORTION_PIECEWISE = _Amplifiers.DISTORTION_PIECEWISE
DISTORTION_TUBE = _Amplifiers.DISTORTION_TUBE
DISTORTION_ARRAYA = _Amplifiers.DISTORTION_ARRAYA
DISTORTION_GALLO = _Amplifiers.DISTORTION_GALLO
DISTORTION_DOUBLESOFT = _Amplifiers.DISTORTION_DOUBLESOFT
DISTORTION_CRUSH = _Amplifiers.DISTORTION_CRUSH
DISTORTION_TUBOID = _Amplifiers.DISTORTION_TUBOID
DISTORTION_YEH = _Amplifiers.DISTORTION_YEH
DISTORTION_FULLRECTIFY = _Amplifiers.DISTORTION_FULLRECTIFY
DISTORTION_HALFRECTIFY = _Amplifiers.DISTORTION_HALFRECTIFY
DISTORTION_ATAN = _Amplifiers.DISTORTION_ATAN
DISTORTION_EXP = _Amplifiers.DISTORTION_EXP
DISTORTION_ASIGMOID = _Amplifiers.DISTORTION_ASIGMOID
DISTORTION_ASIGMOID2 = _Amplifiers.DISTORTION_ASIGMOID2
DISTORTION_DISTORTION = _Amplifiers.DISTORTION_DISTORTION
DISTORTION_CUBIC = _Amplifiers.DISTORTION_CUBIC
DISTORTION_CHEBY2 = _Amplifiers.DISTORTION_CHEBY2
DISTORTION_CHEBY3 = _Amplifiers.DISTORTION_CHEBY3
DISTORTION_CHEBY4 = _Amplifiers.DISTORTION_CHEBY4
DISTORTION_CHEBY5 = _Amplifiers.DISTORTION_CHEBY5
DISTORTION_CHEBY6 = _Amplifiers.DISTORTION_CHEBY6
DISTORTION_CHEBY7 = _Amplifiers.DISTORTION_CHEBY7
DISTORTION_CHEBY8 = _Amplifiers.DISTORTION_CHEBY8
DISTORTION_CHEBY9 = _Amplifiers.DISTORTION_CHEBY9
DISTORTION_ARCTAN = _Amplifiers.DISTORTION_ARCTAN
DISTORTION_CLIPPER = _Amplifiers.DISTORTION_CLIPPER
DISTORTION_ONE = _Amplifiers.DISTORTION_ONE
DISTORTION_TWO = _Amplifiers.DISTORTION_TWO
DISTORTION_OVERDRIVE = _Amplifiers.DISTORTION_OVERDRIVE
DISTORTION_OVERDRIVE2 = _Amplifiers.DISTORTION_OVERDRIVE2
DISTORTION_ASYMETRIC = _Amplifiers.DISTORTION_ASYMETRIC
DISTORTION_SQUASHEDLOG = _Amplifiers.DISTORTION_SQUASHEDLOG
DISTORTION_WICKEDLOG = _Amplifiers.DISTORTION_WICKEDLOG
DISTORTION_HALFWAVE = _Amplifiers.DISTORTION_HALFWAVE
DISTORTION_FULLWAVE = _Amplifiers.DISTORTION_FULLWAVE
DISTORTION_SATURATE = _Amplifiers.DISTORTION_SATURATE
DISTORTION_FUZZ = _Amplifiers.DISTORTION_FUZZ
DISTORTION_SIGMOID_FUZZ = _Amplifiers.DISTORTION_SIGMOID_FUZZ
DISTORTION_TANH_FUZZ = _Amplifiers.DISTORTION_TANH_FUZZ
SIGMOID_SIGMOID_FUNCTION = _Amplifiers.SIGMOID_SIGMOID_FUNCTION
SIGMOID_SERPENT_CURVE = _Amplifiers.SIGMOID_SERPENT_CURVE
SIGMOID_SIGMOIDER = _Amplifiers.SIGMOID_SIGMOIDER
SIGMOID_ERFMOIDER = _Amplifiers.SIGMOID_ERFMOIDER
SIGMOID_GUNDERBALLS = _Amplifiers.SIGMOID_GUNDERBALLS
SIGMOID_ALGEBRABALLS = _Amplifiers.SIGMOID_ALGEBRABALLS
SIGMOID_ALGEBRAMOIDER = _Amplifiers.SIGMOID_ALGEBRAMOIDER
SIGMOID_TANHIFY = _Amplifiers.SIGMOID_TANHIFY
SIGMOID_TANHMOIDER = _Amplifiers.SIGMOID_TANHMOIDER
SIGMOID_TANHBALLS = _Amplifiers.SIGMOID_TANHBALLS
SIGMOID_ATANBALLS = _Amplifiers.SIGMOID_ATANBALLS
SIGMOID_ATANMOIDER = _Amplifiers.SIGMOID_ATANMOIDER
DISTORTION_UDO1 = _Amplifiers.DISTORTION_UDO1
DISTORTION_FOLD = _Amplifiers.DISTORTION_FOLD
DISTORTION_WRAP = _Amplifiers.DISTORTION_WRAP
DISTORTION_SINFOLD = _Amplifiers.DISTORTION_SINFOLD
DISTORTION_DIODE = _Amplifiers.DISTORTION_DIODE
DISTORTION_TANH = _Amplifiers.DISTORTION_TANH
DISTORTION_TANH_NORMAL = _Amplifiers.DISTORTION_TANH_NORMAL
DISTORTION_POSITIVE = _Amplifiers.DISTORTION_POSITIVE
DISTORTION_NEGATIVE = _Amplifiers.DISTORTION_NEGATIVE
DISTORTION_SIGMOID = _Amplifiers.DISTORTION_SIGMOID
DISTORTION_SIGMOID_MINUS = _Amplifiers.DISTORTION_SIGMOID_MINUS
DISTORTION_BPSIGMOID = _Amplifiers.DISTORTION_BPSIGMOID
DISTORTION_LAST = _Amplifiers.DISTORTION_LAST
DISTORTION_ASIN = _Amplifiers.DISTORTION_ASIN
DISTORTION_ASINH = _Amplifiers.DISTORTION_ASINH
DISTORTION_ACOS = _Amplifiers.DISTORTION_ACOS
DISTORTION_TRI1 = _Amplifiers.DISTORTION_TRI1
DISTORTION_TRI2 = _Amplifiers.DISTORTION_TRI2
DISTORTION_ASIN2 = _Amplifiers.DISTORTION_ASIN2
DISTORTION_ACOS2 = _Amplifiers.DISTORTION_ACOS2
DISTORTION_ASINH2 = _Amplifiers.DISTORTION_ASINH2
DISTORTION_ACOSH = _Amplifiers.DISTORTION_ACOSH
DISTORTION_ATANH = _Amplifiers.DISTORTION_ATANH
class Amplifier(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    G = property(_Amplifiers.Amplifier_G_get, _Amplifiers.Amplifier_G_set)
    bias = property(_Amplifiers.Amplifier_bias_get, _Amplifiers.Amplifier_bias_set)
    prv = property(_Amplifiers.Amplifier_prv_get, _Amplifiers.Amplifier_prv_set)
    min = property(_Amplifiers.Amplifier_min_get, _Amplifiers.Amplifier_min_set)
    max = property(_Amplifiers.Amplifier_max_get, _Amplifiers.Amplifier_max_set)
    postgain = property(_Amplifiers.Amplifier_postgain_get, _Amplifiers.Amplifier_postgain_set)
    pregain = property(_Amplifiers.Amplifier_pregain_get, _Amplifiers.Amplifier_pregain_set)
    sat_threshold = property(_Amplifiers.Amplifier_sat_threshold_get, _Amplifiers.Amplifier_sat_threshold_set)
    fuzz_mix = property(_Amplifiers.Amplifier_fuzz_mix_get, _Amplifiers.Amplifier_fuzz_mix_set)
    dist1_clip = property(_Amplifiers.Amplifier_dist1_clip_get, _Amplifiers.Amplifier_dist1_clip_set)
    dist2_clip = property(_Amplifiers.Amplifier_dist2_clip_get, _Amplifiers.Amplifier_dist2_clip_set)
    distortion_morph = property(_Amplifiers.Amplifier_distortion_morph_get, _Amplifiers.Amplifier_distortion_morph_set)
    preGain = property(_Amplifiers.Amplifier_preGain_get, _Amplifiers.Amplifier_preGain_set)
    postGain = property(_Amplifiers.Amplifier_postGain_get, _Amplifiers.Amplifier_postGain_set)
    PORT_G = _Amplifiers.Amplifier_PORT_G
    PORT_BIAS = _Amplifiers.Amplifier_PORT_BIAS
    PORT_MIN = _Amplifiers.Amplifier_PORT_MIN
    PORT_MAX = _Amplifiers.Amplifier_PORT_MAX
    PORT_POSTGAIN = _Amplifiers.Amplifier_PORT_POSTGAIN
    PORT_PREGAIN = _Amplifiers.Amplifier_PORT_PREGAIN
    PORT_SATTHRSH = _Amplifiers.Amplifier_PORT_SATTHRSH
    PORT_FUZZ = _Amplifiers.Amplifier_PORT_FUZZ
    PORT_DIST1 = _Amplifiers.Amplifier_PORT_DIST1
    PORT_DIST2 = _Amplifiers.Amplifier_PORT_DIST2
    PORT_DISTMORPH = _Amplifiers.Amplifier_PORT_DISTMORPH

    def printPorts(self):
        return _Amplifiers.Amplifier_printPorts(self)

    def setPort(self, port, v):
        return _Amplifiers.Amplifier_setPort(self, port, v)

    def __init__(self, Gain=1.0, b=0.0):
        _Amplifiers.Amplifier_swiginit(self, _Amplifiers.new_Amplifier(Gain, b))

    def RandomClip(self):
        return _Amplifiers.Amplifier_RandomClip(self)

    def Integrator(self, _in):
        return _Amplifiers.Amplifier_Integrator(self, _in)

    def Differencer(self, _in):
        return _Amplifiers.Amplifier_Differencer(self, _in)

    def Comparator(self, _in):
        return _Amplifiers.Amplifier_Comparator(self, _in)

    def SetBias(self, b):
        return _Amplifiers.Amplifier_SetBias(self, b)

    def distortionClip(self, dist_clip, I, K):
        return _Amplifiers.Amplifier_distortionClip(self, dist_clip, I, K)

    def Tick(self, I, A=1, X=-1, Y=1):
        return _Amplifiers.Amplifier_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_Amplifier

# Register Amplifier in _Amplifiers:
_Amplifiers.Amplifier_swigregister(Amplifier)

class TwinAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amp = property(_Amplifiers.TwinAmplifier_amp_get, _Amplifiers.TwinAmplifier_amp_set)

    def __init__(self):
        _Amplifiers.TwinAmplifier_swiginit(self, _Amplifiers.new_TwinAmplifier())

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.TwinAmplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_TwinAmplifier

# Register TwinAmplifier in _Amplifiers:
_Amplifiers.TwinAmplifier_swigregister(TwinAmplifier)

class RangeAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.RangeAmplifier_swiginit(self, _Amplifiers.new_RangeAmplifier())

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.RangeAmplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_RangeAmplifier

# Register RangeAmplifier in _Amplifiers:
_Amplifiers.RangeAmplifier_swigregister(RangeAmplifier)

class Range4Amplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dist3_clip = property(_Amplifiers.Range4Amplifier_dist3_clip_get, _Amplifiers.Range4Amplifier_dist3_clip_set)
    dist4_clip = property(_Amplifiers.Range4Amplifier_dist4_clip_get, _Amplifiers.Range4Amplifier_dist4_clip_set)

    def __init__(self):
        _Amplifiers.Range4Amplifier_swiginit(self, _Amplifiers.new_Range4Amplifier())

    def RandomClip(self):
        return _Amplifiers.Range4Amplifier_RandomClip(self)

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.Range4Amplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_Range4Amplifier

# Register Range4Amplifier in _Amplifiers:
_Amplifiers.Range4Amplifier_swigregister(Range4Amplifier)

class QuadAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dist3_clip = property(_Amplifiers.QuadAmplifier_dist3_clip_get, _Amplifiers.QuadAmplifier_dist3_clip_set)
    dist4_clip = property(_Amplifiers.QuadAmplifier_dist4_clip_get, _Amplifiers.QuadAmplifier_dist4_clip_set)

    def __init__(self):
        _Amplifiers.QuadAmplifier_swiginit(self, _Amplifiers.new_QuadAmplifier())

    def RandomClip(self):
        return _Amplifiers.QuadAmplifier_RandomClip(self)

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.QuadAmplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_QuadAmplifier

# Register QuadAmplifier in _Amplifiers:
_Amplifiers.QuadAmplifier_swigregister(QuadAmplifier)

class BipolarAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.BipolarAmplifier_swiginit(self, _Amplifiers.new_BipolarAmplifier())

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.BipolarAmplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_BipolarAmplifier

# Register BipolarAmplifier in _Amplifiers:
_Amplifiers.BipolarAmplifier_swigregister(BipolarAmplifier)

class BipolarAmplifier2(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dist3_clip = property(_Amplifiers.BipolarAmplifier2_dist3_clip_get, _Amplifiers.BipolarAmplifier2_dist3_clip_set)
    dist4_clip = property(_Amplifiers.BipolarAmplifier2_dist4_clip_get, _Amplifiers.BipolarAmplifier2_dist4_clip_set)

    def __init__(self):
        _Amplifiers.BipolarAmplifier2_swiginit(self, _Amplifiers.new_BipolarAmplifier2())

    def RandomClip(self):
        return _Amplifiers.BipolarAmplifier2_RandomClip(self)

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.BipolarAmplifier2_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_BipolarAmplifier2

# Register BipolarAmplifier2 in _Amplifiers:
_Amplifiers.BipolarAmplifier2_swigregister(BipolarAmplifier2)

class DiodeClipperAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bias = property(_Amplifiers.DiodeClipperAmplifier_bias_get, _Amplifiers.DiodeClipperAmplifier_bias_set)
    preG = property(_Amplifiers.DiodeClipperAmplifier_preG_get, _Amplifiers.DiodeClipperAmplifier_preG_set)
    postG = property(_Amplifiers.DiodeClipperAmplifier_postG_get, _Amplifiers.DiodeClipperAmplifier_postG_set)
    cmin = property(_Amplifiers.DiodeClipperAmplifier_cmin_get, _Amplifiers.DiodeClipperAmplifier_cmin_set)
    cmax = property(_Amplifiers.DiodeClipperAmplifier_cmax_get, _Amplifiers.DiodeClipperAmplifier_cmax_set)

    def __init__(self):
        _Amplifiers.DiodeClipperAmplifier_swiginit(self, _Amplifiers.new_DiodeClipperAmplifier())

    def Tick(self, I, A=1, X=-1, Y=1, B=0):
        return _Amplifiers.DiodeClipperAmplifier_Tick(self, I, A, X, Y, B)
    __swig_destroy__ = _Amplifiers.delete_DiodeClipperAmplifier

# Register DiodeClipperAmplifier in _Amplifiers:
_Amplifiers.DiodeClipperAmplifier_swigregister(DiodeClipperAmplifier)

class DiodeSimAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.DiodeSimAmplifier_swiginit(self, _Amplifiers.new_DiodeSimAmplifier())
    __swig_destroy__ = _Amplifiers.delete_DiodeSimAmplifier

# Register DiodeSimAmplifier in _Amplifiers:
_Amplifiers.DiodeSimAmplifier_swigregister(DiodeSimAmplifier)

class DiodAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.DiodAmplifier_swiginit(self, _Amplifiers.new_DiodAmplifier())
    __swig_destroy__ = _Amplifiers.delete_DiodAmplifier

# Register DiodAmplifier in _Amplifiers:
_Amplifiers.DiodAmplifier_swigregister(DiodAmplifier)

class WDFDiodeClipperAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.WDFDiodeClipperAmplifier_swiginit(self, _Amplifiers.new_WDFDiodeClipperAmplifier())
    __swig_destroy__ = _Amplifiers.delete_WDFDiodeClipperAmplifier

# Register WDFDiodeClipperAmplifier in _Amplifiers:
_Amplifiers.WDFDiodeClipperAmplifier_swigregister(WDFDiodeClipperAmplifier)

class ValveAmplifier(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.ValveAmplifier_swiginit(self, _Amplifiers.new_ValveAmplifier())
    __swig_destroy__ = _Amplifiers.delete_ValveAmplifier

# Register ValveAmplifier in _Amplifiers:
_Amplifiers.ValveAmplifier_swigregister(ValveAmplifier)

class Amplifier8(Amplifier):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    amps = property(_Amplifiers.Amplifier8_amps_get, _Amplifiers.Amplifier8_amps_set)

    def __init__(self):
        _Amplifiers.Amplifier8_swiginit(self, _Amplifiers.new_Amplifier8())

    def Tick(self, I, A=1, X=-1, Y=1):
        return _Amplifiers.Amplifier8_Tick(self, I, A, X, Y)

    def Serial(self, I, A=1, X=-1, Y=1):
        return _Amplifiers.Amplifier8_Serial(self, I, A, X, Y)

    def Parallel(self, I, A=1, X=-1, Y=1):
        return _Amplifiers.Amplifier8_Parallel(self, I, A, X, Y)

    def Modulus(self, I, A=1, X=-1, Y=1):
        return _Amplifiers.Amplifier8_Modulus(self, I, A, X, Y)

    def RandomClip(self):
        return _Amplifiers.Amplifier8_RandomClip(self)
    __swig_destroy__ = _Amplifiers.delete_Amplifier8

# Register Amplifier8 in _Amplifiers:
_Amplifiers.Amplifier8_swigregister(Amplifier8)

class FoldAmp(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.FoldAmp_swiginit(self, _Amplifiers.new_FoldAmp())

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.FoldAmp_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_FoldAmp

# Register FoldAmp in _Amplifiers:
_Amplifiers.FoldAmp_swigregister(FoldAmp)

class AmplifierFunction1(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    func = property(_Amplifiers.AmplifierFunction1_func_get, _Amplifiers.AmplifierFunction1_func_set)

    def __init__(self, *args):
        _Amplifiers.AmplifierFunction1_swiginit(self, _Amplifiers.new_AmplifierFunction1(*args))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.AmplifierFunction1_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_AmplifierFunction1

# Register AmplifierFunction1 in _Amplifiers:
_Amplifiers.AmplifierFunction1_swigregister(AmplifierFunction1)
cvar = _Amplifiers.cvar

class AmplifierFunction2(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    func = property(_Amplifiers.AmplifierFunction2_func_get, _Amplifiers.AmplifierFunction2_func_set)

    def __init__(self, *args):
        _Amplifiers.AmplifierFunction2_swiginit(self, _Amplifiers.new_AmplifierFunction2(*args))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.AmplifierFunction2_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_AmplifierFunction2

# Register AmplifierFunction2 in _Amplifiers:
_Amplifiers.AmplifierFunction2_swigregister(AmplifierFunction2)

class AmplifierFunction3(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    func = property(_Amplifiers.AmplifierFunction3_func_get, _Amplifiers.AmplifierFunction3_func_set)

    def __init__(self, *args):
        _Amplifiers.AmplifierFunction3_swiginit(self, _Amplifiers.new_AmplifierFunction3(*args))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.AmplifierFunction3_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_AmplifierFunction3

# Register AmplifierFunction3 in _Amplifiers:
_Amplifiers.AmplifierFunction3_swigregister(AmplifierFunction3)

class AmplifierFunction4(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    func = property(_Amplifiers.AmplifierFunction4_func_get, _Amplifiers.AmplifierFunction4_func_set)

    def __init__(self, *args):
        _Amplifiers.AmplifierFunction4_swiginit(self, _Amplifiers.new_AmplifierFunction4(*args))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.AmplifierFunction4_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_AmplifierFunction4

# Register AmplifierFunction4 in _Amplifiers:
_Amplifiers.AmplifierFunction4_swigregister(AmplifierFunction4)


def udo1(x, g=1.0):
    return _Amplifiers.udo1(x, g)

def Fold(x):
    return _Amplifiers.Fold(x)

def Wrap(x):
    return _Amplifiers.Wrap(x)

def SinFold(x):
    return _Amplifiers.SinFold(x)

def cheby(n, x):
    return _Amplifiers.cheby(n, x)

def cheby_polynomial(n, x):
    return _Amplifiers.cheby_polynomial(n, x)

def amp_clamp(x, a, b):
    return _Amplifiers.amp_clamp(x, a, b)

def preamp(x):
    return _Amplifiers.preamp(x)

def postamp(x):
    return _Amplifiers.postamp(x)

def tanh_normal(x, K=10, r=1.0):
    return _Amplifiers.tanh_normal(x, K, r)

def positive_signal(x):
    return _Amplifiers.positive_signal(x)

def negative_signal(x):
    return _Amplifiers.negative_signal(x)

def sigmoid_function(x, K=10):
    return _Amplifiers.sigmoid_function(x, K)

def sigmoid_minus(x, K=10):
    return _Amplifiers.sigmoid_minus(x, K)

def bpsigmoid(x, g=10):
    return _Amplifiers.bpsigmoid(x, g)

def full_rectify(x):
    return _Amplifiers.full_rectify(x)

def half_rectify(x):
    return _Amplifiers.half_rectify(x)

def modulated_signals(a, b):
    return _Amplifiers.modulated_signals(a, b)

def circular_modulated_signals(a, b):
    return _Amplifiers.circular_modulated_signals(a, b)

def positive_modulated_signals(a, b):
    return _Amplifiers.positive_modulated_signals(a, b)

def negative_modulated_signals(a, b):
    return _Amplifiers.negative_modulated_signals(a, b)

def sigmoidDistortionFunction(x, gain, max, dc):
    return _Amplifiers.sigmoidDistortionFunction(x, gain, max, dc)

def asymmetricSigmoidDistortionFunction(x):
    return _Amplifiers.asymmetricSigmoidDistortionFunction(x)

def assymetric_sigmoid(I, A=1, X=-1, Y=1):
    return _Amplifiers.assymetric_sigmoid(I, A, X, Y)

def asymmetricSigmoidDistortionFunction2(x):
    return _Amplifiers.asymmetricSigmoidDistortionFunction2(x)

def assymetric_sigmoid2(I, A=1, X=-1, Y=1):
    return _Amplifiers.assymetric_sigmoid2(I, A, X, Y)

def distortionFunction(x):
    return _Amplifiers.distortionFunction(x)

def distortion_function(I, A=1, X=-1, Y=1):
    return _Amplifiers.distortion_function(I, A, X, Y)

def cubic_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.cubic_distortion(_in, A, X, Y)

def asin_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.asin_distortion(_in, A, X, Y)

def acos_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.acos_distortion(_in, A, X, Y)

def atan_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.atan_distortion(_in, A, X, Y)

def asinh_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.asinh_distortion(_in, A, X, Y)

def acosh_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.acosh_distortion(_in, A, X, Y)

def atanh_distortion(_in, A=1, X=-1, Y=1):
    return _Amplifiers.atanh_distortion(_in, A, X, Y)

def exp_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.exp_distortion(x, A, X, Y)

def dc_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.dc_distortion(x, A, X, Y)

def bipolar_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.bipolar_distortion(x, A, X, Y)

def quadratic_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.quadratic_distortion(x, A, X, Y)

def quadratic2_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.quadratic2_distortion(x, A, X, Y)

def quadratic3_distortion(x, A=1, X=-1, Y=1):
    return _Amplifiers.quadratic3_distortion(x, A, X, Y)

def parametric_clip(input, A=1, X=-1, Y=1):
    return _Amplifiers.parametric_clip(input, A, X, Y)

def arcTanDistortion(input, A=1, X=-1, Y=1):
    return _Amplifiers.arcTanDistortion(input, A, X, Y)

def softClipper(input, A=1, X=-1, Y=1):
    return _Amplifiers.softClipper(input, A, X, Y)

def errorf(x, K=10, X=-1, Y=1):
    return _Amplifiers.errorf(x, K, X, Y)

def sigmoided(input, A=1, X=-1, Y=1):
    return _Amplifiers.sigmoided(input, A, X, Y)

def hardclip(input, A=1, X=-1, Y=1):
    return _Amplifiers.hardclip(input, A, X, Y)

def hyperbolicTangent(input, gain=1, X=-1, Y=1):
    return _Amplifiers.hyperbolicTangent(input, gain, X, Y)

def diodeClipping(input, gain=1, X=-1, Y=1):
    return _Amplifiers.diodeClipping(input, gain, X, Y)

def fuzzExponential(input, gain=1, X=1, Y=1):
    return _Amplifiers.fuzzExponential(input, gain, X, Y)

def pieceWiseOverdrive(input, gain, X=-1, Y=1):
    return _Amplifiers.pieceWiseOverdrive(input, gain, X, Y)

def tube(input, gain, X=-1, Y=1):
    return _Amplifiers.tube(input, gain, X, Y)

def arraya(input, gain, X=-1, Y=1):
    return _Amplifiers.arraya(input, gain, X, Y)

def gallo(input, gain, X=-1, Y=1):
    return _Amplifiers.gallo(input, gain, X, Y)

def doubleSoftClipper(input, gain, X=-1, Y=1):
    return _Amplifiers.doubleSoftClipper(input, gain, X, Y)

def crush(input, gain, X=-1, Y=1):
    return _Amplifiers.crush(input, gain, X, Y)

def tuboid(input, gain, X=-1, Y=1):
    return _Amplifiers.tuboid(input, gain, X, Y)

def pakarinen_Yeh(input, gain, X=-1, Y=1):
    return _Amplifiers.pakarinen_Yeh(input, gain, X, Y)

def FuzzCtrTable(x):
    return _Amplifiers.FuzzCtrTable(x)

def absfunc(x):
    return _Amplifiers.absfunc(x)

def cubefunc(x):
    return _Amplifiers.cubefunc(x)

def Rectify(sample, RectifierThreshold=0.9):
    return _Amplifiers.Rectify(sample, RectifierThreshold)

def HardClip(sample, thresh):
    return _Amplifiers.HardClip(sample, thresh)

def SoftCubicClip(sample, thresh):
    return _Amplifiers.SoftCubicClip(sample, thresh)

def SoftCubic(sample, CubicSoftClipThreshold=0.9, CubicHarmonicBalance=0.5):
    return _Amplifiers.SoftCubic(sample, CubicSoftClipThreshold, CubicHarmonicBalance)

def SKClip(sample, knee):
    return _Amplifiers.SKClip(sample, knee)

def SoftKnee(sample, SoftClipKnee=0.9):
    return _Amplifiers.SoftKnee(sample, SoftClipKnee)

def LeakyInt(sample, previous_sample, TcRise=0.5, TcFall=0.5):
    return _Amplifiers.LeakyInt(sample, previous_sample, TcRise, TcFall)

def linearScale(_in, min, max):
    return _Amplifiers.linearScale(_in, min, max)

def linearDescale(_in, min, max):
    return _Amplifiers.linearDescale(_in, min, max)

def expoScale(_in, min, max):
    return _Amplifiers.expoScale(_in, min, max)

def expoDescale(_in, min, max):
    return _Amplifiers.expoDescale(_in, min, max)

def floorScale(_in, min, max):
    return _Amplifiers.floorScale(_in, min, max)

def expoShape(_in, amount):
    return _Amplifiers.expoShape(_in, amount)

def softClipShape(_in, amount):
    return _Amplifiers.softClipShape(_in, amount)

def sineShape(_in, amount):
    return _Amplifiers.sineShape(_in, amount)

def chebyshevRec(sample, depth, softClipThreshold=0.9):
    return _Amplifiers.chebyshevRec(sample, depth, softClipThreshold)

def chebyshevShape(_in, amount):
    return _Amplifiers.chebyshevShape(_in, amount)

def arctangent(sample, alpha):
    return _Amplifiers.arctangent(sample, alpha)

def hardClip(sample):
    return _Amplifiers.hardClip(sample)

def squareLaw(sample, alpha):
    return _Amplifiers.squareLaw(sample, alpha)

def cubicWaveShaper(sample):
    return _Amplifiers.cubicWaveShaper(sample)

def foldback(sample, threshold=0.96):
    return _Amplifiers.foldback(sample, threshold)

def waveShaper1(sample, alpha):
    return _Amplifiers.waveShaper1(sample, alpha)

def waveShaper2(sample, alpha):
    return _Amplifiers.waveShaper2(sample, alpha)

def waveShaper3(sample, alpha):
    return _Amplifiers.waveShaper3(sample, alpha)

def gloubiBoulga(sample):
    return _Amplifiers.gloubiBoulga(sample)

def gloubiApprox(sample):
    return _Amplifiers.gloubiApprox(sample)

def FuzzEdgeTable(x):
    return _Amplifiers.FuzzEdgeTable(x)
class table1d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    low = property(_Amplifiers.table1d_low_get, _Amplifiers.table1d_low_set)
    high = property(_Amplifiers.table1d_high_get, _Amplifiers.table1d_high_set)
    istep = property(_Amplifiers.table1d_istep_get, _Amplifiers.table1d_istep_set)
    size = property(_Amplifiers.table1d_size_get, _Amplifiers.table1d_size_set)
    data = property(_Amplifiers.table1d_data_get, _Amplifiers.table1d_data_set)

    def __init__(self):
        _Amplifiers.table1d_swiginit(self, _Amplifiers.new_table1d())
    __swig_destroy__ = _Amplifiers.delete_table1d

# Register table1d in _Amplifiers:
_Amplifiers.table1d_swigregister(table1d)


def tubeclip(x):
    return _Amplifiers.tubeclip(x)

def hardClipping(_in):
    return _Amplifiers.hardClipping(_in)

def softClipping(_in):
    return _Amplifiers.softClipping(_in)

def exponential(_in):
    return _Amplifiers.exponential(_in)

def fullWaveRectifier(_in):
    return _Amplifiers.fullWaveRectifier(_in)

def halfWaveRectifier(_in):
    return _Amplifiers.halfWaveRectifier(_in)

def ArayaAndSuyama(_in):
    return _Amplifiers.ArayaAndSuyama(_in)

def doidicSymmetric(_in):
    return _Amplifiers.doidicSymmetric(_in)

def doidicAssymetric(_in):
    return _Amplifiers.doidicAssymetric(_in)
class Udo1(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gain = property(_Amplifiers.Udo1_gain_get, _Amplifiers.Udo1_gain_set)

    def __init__(self, g=1):
        _Amplifiers.Udo1_swiginit(self, _Amplifiers.new_Udo1(g))

    def setGain(self, a):
        return _Amplifiers.Udo1_setGain(self, a)
    PORT_GAIN = _Amplifiers.Udo1_PORT_GAIN

    def setPort(self, port, v):
        return _Amplifiers.Udo1_setPort(self, port, v)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.Udo1_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_Udo1

# Register Udo1 in _Amplifiers:
_Amplifiers.Udo1_swigregister(Udo1)


def Diode(x, Vt=0.0253, eta=1.68, Is=.105):
    return _Amplifiers.Diode(x, Vt, eta, Is)
class DiodeClipperNR(FunctionProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controlledR = property(_Amplifiers.DiodeClipperNR_controlledR_get, _Amplifiers.DiodeClipperNR_controlledR_set)
    Id = property(_Amplifiers.DiodeClipperNR_Id_get, _Amplifiers.DiodeClipperNR_Id_set)
    C = property(_Amplifiers.DiodeClipperNR_C_get, _Amplifiers.DiodeClipperNR_C_set)
    Ve = property(_Amplifiers.DiodeClipperNR_Ve_get, _Amplifiers.DiodeClipperNR_Ve_set)
    Vp = property(_Amplifiers.DiodeClipperNR_Vp_get, _Amplifiers.DiodeClipperNR_Vp_set)
    R = property(_Amplifiers.DiodeClipperNR_R_get, _Amplifiers.DiodeClipperNR_R_set)
    err = property(_Amplifiers.DiodeClipperNR_err_get, _Amplifiers.DiodeClipperNR_err_set)
    Fs = property(_Amplifiers.DiodeClipperNR_Fs_get, _Amplifiers.DiodeClipperNR_Fs_set)
    T = property(_Amplifiers.DiodeClipperNR_T_get, _Amplifiers.DiodeClipperNR_T_set)
    vNom = property(_Amplifiers.DiodeClipperNR_vNom_get, _Amplifiers.DiodeClipperNR_vNom_set)
    vDenom = property(_Amplifiers.DiodeClipperNR_vDenom_get, _Amplifiers.DiodeClipperNR_vDenom_set)
    vin = property(_Amplifiers.DiodeClipperNR_vin_get, _Amplifiers.DiodeClipperNR_vin_set)
    vout = property(_Amplifiers.DiodeClipperNR_vout_get, _Amplifiers.DiodeClipperNR_vout_set)
    voutTemp = property(_Amplifiers.DiodeClipperNR_voutTemp_get, _Amplifiers.DiodeClipperNR_voutTemp_set)
    voutOld = property(_Amplifiers.DiodeClipperNR_voutOld_get, _Amplifiers.DiodeClipperNR_voutOld_set)
    beta = property(_Amplifiers.DiodeClipperNR_beta_get, _Amplifiers.DiodeClipperNR_beta_set)
    betaM1 = property(_Amplifiers.DiodeClipperNR_betaM1_get, _Amplifiers.DiodeClipperNR_betaM1_set)
    oversample = property(_Amplifiers.DiodeClipperNR_oversample_get, _Amplifiers.DiodeClipperNR_oversample_set)
    blockInput = property(_Amplifiers.DiodeClipperNR_blockInput_get, _Amplifiers.DiodeClipperNR_blockInput_set)
    blockOutput = property(_Amplifiers.DiodeClipperNR_blockOutput_get, _Amplifiers.DiodeClipperNR_blockOutput_set)
    blockOutputDownsampled = property(_Amplifiers.DiodeClipperNR_blockOutputDownsampled_get, _Amplifiers.DiodeClipperNR_blockOutputDownsampled_set)
    oldBlockOutput = property(_Amplifiers.DiodeClipperNR_oldBlockOutput_get, _Amplifiers.DiodeClipperNR_oldBlockOutput_set)

    def __init__(self, sampleRate=44100.0):
        _Amplifiers.DiodeClipperNR_swiginit(self, _Amplifiers.new_DiodeClipperNR(sampleRate))

    def gdExp(self, vc):
        return _Amplifiers.DiodeClipperNR_gdExp(self, vc)

    def gdExpDiff(self, vc):
        return _Amplifiers.DiodeClipperNR_gdExpDiff(self, vc)

    def limiter(self, val):
        return _Amplifiers.DiodeClipperNR_limiter(self, val)

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.DiodeClipperNR_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_DiodeClipperNR

# Register DiodeClipperNR in _Amplifiers:
_Amplifiers.DiodeClipperNR_swigregister(DiodeClipperNR)

class DiodeClipperFP(FunctionProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controlledR = property(_Amplifiers.DiodeClipperFP_controlledR_get, _Amplifiers.DiodeClipperFP_controlledR_set)
    Id = property(_Amplifiers.DiodeClipperFP_Id_get, _Amplifiers.DiodeClipperFP_Id_set)
    C = property(_Amplifiers.DiodeClipperFP_C_get, _Amplifiers.DiodeClipperFP_C_set)
    Ve = property(_Amplifiers.DiodeClipperFP_Ve_get, _Amplifiers.DiodeClipperFP_Ve_set)
    Vp = property(_Amplifiers.DiodeClipperFP_Vp_get, _Amplifiers.DiodeClipperFP_Vp_set)
    R = property(_Amplifiers.DiodeClipperFP_R_get, _Amplifiers.DiodeClipperFP_R_set)
    err = property(_Amplifiers.DiodeClipperFP_err_get, _Amplifiers.DiodeClipperFP_err_set)
    Fs = property(_Amplifiers.DiodeClipperFP_Fs_get, _Amplifiers.DiodeClipperFP_Fs_set)
    T = property(_Amplifiers.DiodeClipperFP_T_get, _Amplifiers.DiodeClipperFP_T_set)
    vin = property(_Amplifiers.DiodeClipperFP_vin_get, _Amplifiers.DiodeClipperFP_vin_set)
    vout = property(_Amplifiers.DiodeClipperFP_vout_get, _Amplifiers.DiodeClipperFP_vout_set)
    voutTemp = property(_Amplifiers.DiodeClipperFP_voutTemp_get, _Amplifiers.DiodeClipperFP_voutTemp_set)
    voutOld = property(_Amplifiers.DiodeClipperFP_voutOld_get, _Amplifiers.DiodeClipperFP_voutOld_set)
    upsamplingScale = property(_Amplifiers.DiodeClipperFP_upsamplingScale_get, _Amplifiers.DiodeClipperFP_upsamplingScale_set)

    def gdExpDiff(self, vc):
        return _Amplifiers.DiodeClipperFP_gdExpDiff(self, vc)

    def gdExp(self, vc):
        return _Amplifiers.DiodeClipperFP_gdExp(self, vc)

    def gdPoly(self, vc):
        return _Amplifiers.DiodeClipperFP_gdPoly(self, vc)

    def Heaviside(self, vc):
        return _Amplifiers.DiodeClipperFP_Heaviside(self, vc)

    def limiter(self, val):
        return _Amplifiers.DiodeClipperFP_limiter(self, val)

    def __init__(self, sampleRate=44100.0):
        _Amplifiers.DiodeClipperFP_swiginit(self, _Amplifiers.new_DiodeClipperFP(sampleRate))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.DiodeClipperFP_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_DiodeClipperFP

# Register DiodeClipperFP in _Amplifiers:
_Amplifiers.DiodeClipperFP_swigregister(DiodeClipperFP)


def signum(x):
    return _Amplifiers.signum(x)

def clamp(x, min, max):
    return _Amplifiers.clamp(x, min, max)

def serpent_curve(x, g=1):
    return _Amplifiers.serpent_curve(x, g)

def sigmoider(_in, g=1):
    return _Amplifiers.sigmoider(_in, g)

def erfmoider(_in, g=2):
    return _Amplifiers.erfmoider(_in, g)

def gunderballs(x, g=2):
    return _Amplifiers.gunderballs(x, g)

def algebraballs(x, g=2):
    return _Amplifiers.algebraballs(x, g)

def algebramoider(x, g=2):
    return _Amplifiers.algebramoider(x, g)

def tanhify(x, g=2):
    return _Amplifiers.tanhify(x, g)

def tanhballs(x, g=2):
    return _Amplifiers.tanhballs(x, g)

def tanhmoider(x, g=2):
    return _Amplifiers.tanhmoider(x, g)

def atanballs(x, g=2):
    return _Amplifiers.atanballs(x, g)

def atanmoider(x, g=2):
    return _Amplifiers.atanmoider(x, g)

def bipolar_tanh(x, p=2.0, m=2.0):
    return _Amplifiers.bipolar_tanh(x, p, m)

def quadrant_tanh(x, p1=2.0, p2=2.0, p3=2.0, p4=2.0):
    return _Amplifiers.quadrant_tanh(x, p1, p2, p3, p4)
class ClipFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SERPENT_CURVE = _Amplifiers.ClipFunction_SERPENT_CURVE
    SIGMOIDER = _Amplifiers.ClipFunction_SIGMOIDER
    ERFMOIDER = _Amplifiers.ClipFunction_ERFMOIDER
    GUNDERBALLS = _Amplifiers.ClipFunction_GUNDERBALLS
    ALGEBRABALLS = _Amplifiers.ClipFunction_ALGEBRABALLS
    ALGEBRAMOIDER = _Amplifiers.ClipFunction_ALGEBRAMOIDER
    TANHIFY = _Amplifiers.ClipFunction_TANHIFY
    TANHBALLS = _Amplifiers.ClipFunction_TANHBALLS
    TANHMOIDER = _Amplifiers.ClipFunction_TANHMOIDER
    ATANBALLS = _Amplifiers.ClipFunction_ATANBALLS
    ATANMOIDER = _Amplifiers.ClipFunction_ATANMOIDER
    RANDOM = _Amplifiers.ClipFunction_RANDOM
    Type = property(_Amplifiers.ClipFunction_Type_get, _Amplifiers.ClipFunction_Type_set)

    def __init__(self, *args):
        _Amplifiers.ClipFunction_swiginit(self, _Amplifiers.new_ClipFunction(*args))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.ClipFunction_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_ClipFunction

# Register ClipFunction in _Amplifiers:
_Amplifiers.ClipFunction_swigregister(ClipFunction)

class MorphClipper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    clip1 = property(_Amplifiers.MorphClipper_clip1_get, _Amplifiers.MorphClipper_clip1_set)
    clip2 = property(_Amplifiers.MorphClipper_clip2_get, _Amplifiers.MorphClipper_clip2_set)

    def __init__(self, t1, t2):
        _Amplifiers.MorphClipper_swiginit(self, _Amplifiers.new_MorphClipper(t1, t2))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.MorphClipper_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_MorphClipper

# Register MorphClipper in _Amplifiers:
_Amplifiers.MorphClipper_swigregister(MorphClipper)

class SerpentCurve(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gain = property(_Amplifiers.SerpentCurve_gain_get, _Amplifiers.SerpentCurve_gain_set)

    def __init__(self, g=1.0):
        _Amplifiers.SerpentCurve_swiginit(self, _Amplifiers.new_SerpentCurve(g))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.SerpentCurve_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_SerpentCurve

# Register SerpentCurve in _Amplifiers:
_Amplifiers.SerpentCurve_swigregister(SerpentCurve)

PI = _Amplifiers.PI
TAU = _Amplifiers.TAU
class PeakLevelDetector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate):
        _Amplifiers.PeakLevelDetector_swiginit(self, _Amplifiers.new_PeakLevelDetector(sampleRate))
    __swig_destroy__ = _Amplifiers.delete_PeakLevelDetector

    def tick(self, inputSample):
        return _Amplifiers.PeakLevelDetector_tick(self, inputSample)

    def setDetector(self, sampleRate):
        return _Amplifiers.PeakLevelDetector_setDetector(self, sampleRate)

# Register PeakLevelDetector in _Amplifiers:
_Amplifiers.PeakLevelDetector_swigregister(PeakLevelDetector)

class GainDynamics(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, sampleRate, attackTime, releaseTime):
        _Amplifiers.GainDynamics_swiginit(self, _Amplifiers.new_GainDynamics(sampleRate, attackTime, releaseTime))
    __swig_destroy__ = _Amplifiers.delete_GainDynamics

    def tick(self, inputSample):
        return _Amplifiers.GainDynamics_tick(self, inputSample)

    def setDetector(self, sampleRate):
        return _Amplifiers.GainDynamics_setDetector(self, sampleRate)

    def setAttack(self, attackTime):
        return _Amplifiers.GainDynamics_setAttack(self, attackTime)

    def setRelease(self, releaseTime):
        return _Amplifiers.GainDynamics_setRelease(self, releaseTime)

# Register GainDynamics in _Amplifiers:
_Amplifiers.GainDynamics_swigregister(GainDynamics)

class Controls(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_Amplifiers.Controls_mode_get, _Amplifiers.Controls_mode_set)
    drive = property(_Amplifiers.Controls_drive_get, _Amplifiers.Controls_drive_set)
    threshold = property(_Amplifiers.Controls_threshold_get, _Amplifiers.Controls_threshold_set)
    mix = property(_Amplifiers.Controls_mix_get, _Amplifiers.Controls_mix_set)

    def __init__(self):
        _Amplifiers.Controls_swiginit(self, _Amplifiers.new_Controls())
    __swig_destroy__ = _Amplifiers.delete_Controls

# Register Controls in _Amplifiers:
_Amplifiers.Controls_swigregister(Controls)

class Distortion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    controls = property(_Amplifiers.Distortion_controls_get, _Amplifiers.Distortion_controls_set)

    def __init__(self):
        _Amplifiers.Distortion_swiginit(self, _Amplifiers.new_Distortion())
    __swig_destroy__ = _Amplifiers.delete_Distortion

    def processSample(self, arg2, arg3):
        return _Amplifiers.Distortion_processSample(self, arg2, arg3)
    input = property(_Amplifiers.Distortion_input_get, _Amplifiers.Distortion_input_set)
    output = property(_Amplifiers.Distortion_output_get, _Amplifiers.Distortion_output_set)

# Register Distortion in _Amplifiers:
_Amplifiers.Distortion_swigregister(Distortion)


def distortionOne(input):
    return _Amplifiers.distortionOne(input)

def distortionTwo(input):
    return _Amplifiers.distortionTwo(input)

def softSaturation(input, param):
    return _Amplifiers.softSaturation(input, param)

def overdrive2(input, drive=1.0):
    return _Amplifiers.overdrive2(input, drive)

def clipper(input, drive):
    return _Amplifiers.clipper(input, drive)

def arctanDistortion(x, g=1):
    return _Amplifiers.arctanDistortion(x, g)

def triangleDistortion1(x, g=1):
    return _Amplifiers.triangleDistortion1(x, g)

def triangleDistortion2(x, g=1):
    return _Amplifiers.triangleDistortion2(x, g)

def asinDistortion(x, g=1):
    return _Amplifiers.asinDistortion(x, g)

def acosDistortion(x, g=1):
    return _Amplifiers.acosDistortion(x, g)

def asinhDistortion(x, g=1):
    return _Amplifiers.asinhDistortion(x, g)

def assymetricDistortion(x, dc=0.1):
    return _Amplifiers.assymetricDistortion(x, dc)

def squashedlog(x, g=1, h=1):
    return _Amplifiers.squashedlog(x, g, h)

def wickedlog(x, g=1, h=1):
    return _Amplifiers.wickedlog(x, g, h)

def logarithmic(x):
    return _Amplifiers.logarithmic(x)

def soft(x, g=1):
    return _Amplifiers.soft(x, g)

def exp1(x, gain=1):
    return _Amplifiers.exp1(x, gain)

def iexp(x, gain=1):
    return _Amplifiers.iexp(x, gain)

def exp2(x, gain=1):
    return _Amplifiers.exp2(x, gain)

def logi(x, gain=1):
    return _Amplifiers.logi(x, gain)

def ilogi(x, gain=1):
    return _Amplifiers.ilogi(x, gain)

def softlog(x, gain=1):
    return _Amplifiers.softlog(x, gain)

def curvey(x, g=1):
    return _Amplifiers.curvey(x, g)

def curv2(x, g=1):
    return _Amplifiers.curv2(x, g)

def erf(x, g=1):
    return _Amplifiers.erf(x, g)

def fasterf(x, g=1):
    return _Amplifiers.fasterf(x, g)

def gd2(x, g=1):
    return _Amplifiers.gd2(x, g)

def tan2(x, g=1):
    return _Amplifiers.tan2(x, g)

def atan(x, g=1):
    return _Amplifiers.atan(x, g)

def asymsoft(x, g=1):
    return _Amplifiers.asymsoft(x, g)

def sigmoid(x, g=10.0):
    return _Amplifiers.sigmoid(x, g)

def halfwave(x):
    return _Amplifiers.halfwave(x)

def fullwave(x):
    return _Amplifiers.fullwave(x)

def saturate(x, t, g):
    return _Amplifiers.saturate(x, t, g)

def overdrive(x, thresh=0.333):
    return _Amplifiers.overdrive(x, thresh)

def fuzz(x, a, mix=0.5):
    return _Amplifiers.fuzz(x, a, mix)

def sigmoid_fuzz(x, a, mix=0.5):
    return _Amplifiers.sigmoid_fuzz(x, a, mix)

def tanh_fuzz(x, a, mix=0.5):
    return _Amplifiers.tanh_fuzz(x, a, mix)

def dafe_foldback(_in, threshold):
    return _Amplifiers.dafe_foldback(_in, threshold)
class BezierDistortion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cbezier = property(_Amplifiers.BezierDistortion_cbezier_get, _Amplifiers.BezierDistortion_cbezier_set)

    def __init__(self):
        _Amplifiers.BezierDistortion_swiginit(self, _Amplifiers.new_BezierDistortion())
    __swig_destroy__ = _Amplifiers.delete_BezierDistortion

    def init(self):
        return _Amplifiers.BezierDistortion_init(self)

    def Tick(self, I):
        return _Amplifiers.BezierDistortion_Tick(self, I)

# Register BezierDistortion in _Amplifiers:
_Amplifiers.BezierDistortion_swigregister(BezierDistortion)

class ATanSoftClipper(AmplifierProcessor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gain = property(_Amplifiers.ATanSoftClipper_gain_get, _Amplifiers.ATanSoftClipper_gain_set)

    def __init__(self, g=1.0):
        _Amplifiers.ATanSoftClipper_swiginit(self, _Amplifiers.new_ATanSoftClipper(g))

    def Tick(self, I, A=1, X=1, Y=1):
        return _Amplifiers.ATanSoftClipper_Tick(self, I, A, X, Y)
    __swig_destroy__ = _Amplifiers.delete_ATanSoftClipper

# Register ATanSoftClipper in _Amplifiers:
_Amplifiers.ATanSoftClipper_swigregister(ATanSoftClipper)


def sinular(x, K=3):
    return _Amplifiers.sinular(x, K)

def asym_tanh(x, dc=0, gain=1.0):
    return _Amplifiers.asym_tanh(x, dc, gain)

def wave_clamp(_in, min=-1.0, max=1.0):
    return _Amplifiers.wave_clamp(_in, min, max)

def biased_clamp(_in, x, min=-1.0, max=1.0):
    return _Amplifiers.biased_clamp(_in, x, min, max)

def waveshaper(x, a=1):
    return _Amplifiers.waveshaper(x, a)

def waveshaper2(x, a=1):
    return _Amplifiers.waveshaper2(x, a)

def waveshaper3(x, a=1):
    return _Amplifiers.waveshaper3(x, a)

def waveshaper4(x, a=1):
    return _Amplifiers.waveshaper4(x, a)

def waveshaper5(x, y, a=1):
    return _Amplifiers.waveshaper5(x, y, a)

def waveshaper6(x, a=1):
    return _Amplifiers.waveshaper6(x, a)

def waveshaper7(x, y, a=1):
    return _Amplifiers.waveshaper7(x, y, a)

def tanh_normalized(x, y=1, a=1):
    return _Amplifiers.tanh_normalized(x, y, a)

def sinshaper(x, a=1):
    return _Amplifiers.sinshaper(x, a)

def dsf_line(x, amount=1):
    return _Amplifiers.dsf_line(x, amount)

def dc_shaper(x, dc, a=1):
    return _Amplifiers.dc_shaper(x, dc, a)

def cubic_waveshaper(_in, a=1):
    return _Amplifiers.cubic_waveshaper(_in, a)

def gloubi_waveshaper(_in, amp=1):
    return _Amplifiers.gloubi_waveshaper(_in, amp)

def crusher(input, bits):
    return _Amplifiers.crusher(input, bits)
class HardClipper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.HardClipper_swiginit(self, _Amplifiers.new_HardClipper())
    __swig_destroy__ = _Amplifiers.delete_HardClipper

    def process(self, input):
        return _Amplifiers.HardClipper_process(self, input)

    def signum(self, x):
        return _Amplifiers.HardClipper_signum(self, x)

    def hardClipN0(self, x):
        return _Amplifiers.HardClipper_hardClipN0(self, x)

    def hardClipN1(self, x):
        return _Amplifiers.HardClipper_hardClipN1(self, x)

    def hardClipN2(self, x):
        return _Amplifiers.HardClipper_hardClipN2(self, x)

    def antialiasedHardClipN1(self, x):
        return _Amplifiers.HardClipper_antialiasedHardClipN1(self, x)

    def getClippedOutput(self):
        return _Amplifiers.HardClipper_getClippedOutput(self)

# Register HardClipper in _Amplifiers:
_Amplifiers.HardClipper_swigregister(HardClipper)

class Wavefolder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.Wavefolder_swiginit(self, _Amplifiers.new_Wavefolder())
    __swig_destroy__ = _Amplifiers.delete_Wavefolder

    def process(self, input):
        return _Amplifiers.Wavefolder_process(self, input)

    def foldFunctionN0(self, x):
        return _Amplifiers.Wavefolder_foldFunctionN0(self, x)

    def foldFunctionN1(self, x):
        return _Amplifiers.Wavefolder_foldFunctionN1(self, x)

    def foldFunctionN2(self, x):
        return _Amplifiers.Wavefolder_foldFunctionN2(self, x)

    def antialiasedFoldN1(self, x):
        return _Amplifiers.Wavefolder_antialiasedFoldN1(self, x)

    def antialiasedFoldN2(self, x):
        return _Amplifiers.Wavefolder_antialiasedFoldN2(self, x)

    def getFoldedOutput(self):
        return _Amplifiers.Wavefolder_getFoldedOutput(self)

# Register Wavefolder in _Amplifiers:
_Amplifiers.Wavefolder_swigregister(Wavefolder)

class SoftClipper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Amplifiers.SoftClipper_swiginit(self, _Amplifiers.new_SoftClipper())
    __swig_destroy__ = _Amplifiers.delete_SoftClipper

    def process(self, input):
        return _Amplifiers.SoftClipper_process(self, input)

    def signum(self, x):
        return _Amplifiers.SoftClipper_signum(self, x)

    def softClipN0(self, x):
        return _Amplifiers.SoftClipper_softClipN0(self, x)

    def softClipN1(self, x):
        return _Amplifiers.SoftClipper_softClipN1(self, x)

    def antialiasedSoftClipN1(self, x):
        return _Amplifiers.SoftClipper_antialiasedSoftClipN1(self, x)

    def getClippedOutput(self):
        return _Amplifiers.SoftClipper_getClippedOutput(self)

# Register SoftClipper in _Amplifiers:
_Amplifiers.SoftClipper_swigregister(SoftClipper)

class SstWaveshaper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    waState = property(_Amplifiers.SstWaveshaper_waState_get, _Amplifiers.SstWaveshaper_waState_set)
    pWaveShaper = property(_Amplifiers.SstWaveshaper_pWaveShaper_get, _Amplifiers.SstWaveshaper_pWaveShaper_set)
    Distortion = property(_Amplifiers.SstWaveshaper_Distortion_get, _Amplifiers.SstWaveshaper_Distortion_set)
    WaveshaperType_wst_none = _Amplifiers.SstWaveshaper_WaveshaperType_wst_none
    WaveshaperType_wst_soft = _Amplifiers.SstWaveshaper_WaveshaperType_wst_soft
    WaveshaperType_wst_hard = _Amplifiers.SstWaveshaper_WaveshaperType_wst_hard
    WaveshaperType_wst_asym = _Amplifiers.SstWaveshaper_WaveshaperType_wst_asym
    WaveshaperType_wst_sine = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sine
    WaveshaperType_wst_digital = _Amplifiers.SstWaveshaper_WaveshaperType_wst_digital
    WaveshaperType_wst_cheby2 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_cheby2
    WaveshaperType_wst_cheby3 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_cheby3
    WaveshaperType_wst_cheby4 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_cheby4
    WaveshaperType_wst_cheby5 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_cheby5
    WaveshaperType_wst_fwrectify = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fwrectify
    WaveshaperType_wst_poswav = _Amplifiers.SstWaveshaper_WaveshaperType_wst_poswav
    WaveshaperType_wst_negwav = _Amplifiers.SstWaveshaper_WaveshaperType_wst_negwav
    WaveshaperType_wst_softrect = _Amplifiers.SstWaveshaper_WaveshaperType_wst_softrect
    WaveshaperType_wst_singlefold = _Amplifiers.SstWaveshaper_WaveshaperType_wst_singlefold
    WaveshaperType_wst_dualfold = _Amplifiers.SstWaveshaper_WaveshaperType_wst_dualfold
    WaveshaperType_wst_westfold = _Amplifiers.SstWaveshaper_WaveshaperType_wst_westfold
    WaveshaperType_wst_add12 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_add12
    WaveshaperType_wst_add13 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_add13
    WaveshaperType_wst_add14 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_add14
    WaveshaperType_wst_add15 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_add15
    WaveshaperType_wst_add12345 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_add12345
    WaveshaperType_wst_addsaw3 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_addsaw3
    WaveshaperType_wst_addsqr3 = _Amplifiers.SstWaveshaper_WaveshaperType_wst_addsqr3
    WaveshaperType_wst_fuzz = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fuzz
    WaveshaperType_wst_fuzzsoft = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fuzzsoft
    WaveshaperType_wst_fuzzheavy = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fuzzheavy
    WaveshaperType_wst_fuzzctr = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fuzzctr
    WaveshaperType_wst_fuzzsoftedge = _Amplifiers.SstWaveshaper_WaveshaperType_wst_fuzzsoftedge
    WaveshaperType_wst_sinpx = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sinpx
    WaveshaperType_wst_sin2xpb = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sin2xpb
    WaveshaperType_wst_sin3xpb = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sin3xpb
    WaveshaperType_wst_sin7xpb = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sin7xpb
    WaveshaperType_wst_sin10xpb = _Amplifiers.SstWaveshaper_WaveshaperType_wst_sin10xpb
    WaveshaperType_wst_2cyc = _Amplifiers.SstWaveshaper_WaveshaperType_wst_2cyc
    WaveshaperType_wst_7cyc = _Amplifiers.SstWaveshaper_WaveshaperType_wst_7cyc
    WaveshaperType_wst_10cyc = _Amplifiers.SstWaveshaper_WaveshaperType_wst_10cyc
    WaveshaperType_wst_2cycbound = _Amplifiers.SstWaveshaper_WaveshaperType_wst_2cycbound
    WaveshaperType_wst_7cycbound = _Amplifiers.SstWaveshaper_WaveshaperType_wst_7cycbound
    WaveshaperType_wst_10cycbound = _Amplifiers.SstWaveshaper_WaveshaperType_wst_10cycbound
    WaveshaperType_wst_zamsat = _Amplifiers.SstWaveshaper_WaveshaperType_wst_zamsat
    WaveshaperType_wst_ojd = _Amplifiers.SstWaveshaper_WaveshaperType_wst_ojd
    WaveshaperType_wst_softfold = _Amplifiers.SstWaveshaper_WaveshaperType_wst_softfold
    WaveshaperType_n_ws_types = _Amplifiers.SstWaveshaper_WaveshaperType_n_ws_types

    def __init__(self, *args):
        _Amplifiers.SstWaveshaper_swiginit(self, _Amplifiers.new_SstWaveshaper(*args))
    __swig_destroy__ = _Amplifiers.delete_SstWaveshaper

    def ProcessInplace(self, framesPerBuffer, buffer):
        return _Amplifiers.SstWaveshaper_ProcessInplace(self, framesPerBuffer, buffer)

    def ProcessBlock(self, framesPerBuffer, buffer, out):
        return _Amplifiers.SstWaveshaper_ProcessBlock(self, framesPerBuffer, buffer, out)

# Register SstWaveshaper in _Amplifiers:
_Amplifiers.SstWaveshaper_swigregister(SstWaveshaper)

class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Amplifiers.float_vector_swiginit(self, _Amplifiers.new_float_vector(*args))

    def __getitem__(self, i):
        return _Amplifiers.float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Amplifiers.float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Amplifiers.float_vector_ibegin(self)

    def iend(self):
        return _Amplifiers.float_vector_iend(self)

    def erase(self, *args):
        return _Amplifiers.float_vector_erase(self, *args)

    def front(self):
        return _Amplifiers.float_vector_front(self)

    def back(self):
        return _Amplifiers.float_vector_back(self)

    def push_back(self, q):
        return _Amplifiers.float_vector_push_back(self, q)

    def pop_back(self):
        return _Amplifiers.float_vector_pop_back(self)

    def at(self, i):
        return _Amplifiers.float_vector_at(self, i)

    def assign(self, n, val):
        return _Amplifiers.float_vector_assign(self, n, val)

    def data(self):
        return _Amplifiers.float_vector_data(self)

    def size(self):
        return _Amplifiers.float_vector_size(self)

    def empty(self):
        return _Amplifiers.float_vector_empty(self)

    def resize(self, n):
        return _Amplifiers.float_vector_resize(self, n)

    def clear(self):
        return _Amplifiers.float_vector_clear(self)

    def swap(self, x):
        return _Amplifiers.float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Amplifiers.float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Amplifiers.float_vector_reserve(self, n)

    def max_size(self):
        return _Amplifiers.float_vector_max_size(self)

    def capacity(self):
        return _Amplifiers.float_vector_capacity(self)
    __swig_destroy__ = _Amplifiers.delete_float_vector

# Register float_vector in _Amplifiers:
_Amplifiers.float_vector_swigregister(float_vector)

class double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Amplifiers.double_vector_swiginit(self, _Amplifiers.new_double_vector(*args))

    def __getitem__(self, i):
        return _Amplifiers.double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Amplifiers.double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Amplifiers.double_vector_ibegin(self)

    def iend(self):
        return _Amplifiers.double_vector_iend(self)

    def erase(self, *args):
        return _Amplifiers.double_vector_erase(self, *args)

    def front(self):
        return _Amplifiers.double_vector_front(self)

    def back(self):
        return _Amplifiers.double_vector_back(self)

    def push_back(self, q):
        return _Amplifiers.double_vector_push_back(self, q)

    def pop_back(self):
        return _Amplifiers.double_vector_pop_back(self)

    def at(self, i):
        return _Amplifiers.double_vector_at(self, i)

    def assign(self, n, val):
        return _Amplifiers.double_vector_assign(self, n, val)

    def data(self):
        return _Amplifiers.double_vector_data(self)

    def size(self):
        return _Amplifiers.double_vector_size(self)

    def empty(self):
        return _Amplifiers.double_vector_empty(self)

    def resize(self, n):
        return _Amplifiers.double_vector_resize(self, n)

    def clear(self):
        return _Amplifiers.double_vector_clear(self)

    def swap(self, x):
        return _Amplifiers.double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Amplifiers.double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Amplifiers.double_vector_reserve(self, n)

    def max_size(self):
        return _Amplifiers.double_vector_max_size(self)

    def capacity(self):
        return _Amplifiers.double_vector_capacity(self)
    __swig_destroy__ = _Amplifiers.delete_double_vector

# Register double_vector in _Amplifiers:
_Amplifiers.double_vector_swigregister(double_vector)

class complex_float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Amplifiers.complex_float_vector_swiginit(self, _Amplifiers.new_complex_float_vector(*args))

    def __getitem__(self, i):
        return _Amplifiers.complex_float_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Amplifiers.complex_float_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Amplifiers.complex_float_vector_ibegin(self)

    def iend(self):
        return _Amplifiers.complex_float_vector_iend(self)

    def erase(self, *args):
        return _Amplifiers.complex_float_vector_erase(self, *args)

    def front(self):
        return _Amplifiers.complex_float_vector_front(self)

    def back(self):
        return _Amplifiers.complex_float_vector_back(self)

    def push_back(self, q):
        return _Amplifiers.complex_float_vector_push_back(self, q)

    def pop_back(self):
        return _Amplifiers.complex_float_vector_pop_back(self)

    def at(self, i):
        return _Amplifiers.complex_float_vector_at(self, i)

    def assign(self, n, val):
        return _Amplifiers.complex_float_vector_assign(self, n, val)

    def data(self):
        return _Amplifiers.complex_float_vector_data(self)

    def size(self):
        return _Amplifiers.complex_float_vector_size(self)

    def empty(self):
        return _Amplifiers.complex_float_vector_empty(self)

    def resize(self, n):
        return _Amplifiers.complex_float_vector_resize(self, n)

    def clear(self):
        return _Amplifiers.complex_float_vector_clear(self)

    def swap(self, x):
        return _Amplifiers.complex_float_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Amplifiers.complex_float_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Amplifiers.complex_float_vector_reserve(self, n)

    def max_size(self):
        return _Amplifiers.complex_float_vector_max_size(self)

    def capacity(self):
        return _Amplifiers.complex_float_vector_capacity(self)
    __swig_destroy__ = _Amplifiers.delete_complex_float_vector

# Register complex_float_vector in _Amplifiers:
_Amplifiers.complex_float_vector_swigregister(complex_float_vector)

class complex_double_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Amplifiers.complex_double_vector_swiginit(self, _Amplifiers.new_complex_double_vector(*args))

    def __getitem__(self, i):
        return _Amplifiers.complex_double_vector___getitem__(self, i)

    def __setitem__(self, i, val):
        return _Amplifiers.complex_double_vector___setitem__(self, i, val)

    def ibegin(self):
        return _Amplifiers.complex_double_vector_ibegin(self)

    def iend(self):
        return _Amplifiers.complex_double_vector_iend(self)

    def erase(self, *args):
        return _Amplifiers.complex_double_vector_erase(self, *args)

    def front(self):
        return _Amplifiers.complex_double_vector_front(self)

    def back(self):
        return _Amplifiers.complex_double_vector_back(self)

    def push_back(self, q):
        return _Amplifiers.complex_double_vector_push_back(self, q)

    def pop_back(self):
        return _Amplifiers.complex_double_vector_pop_back(self)

    def at(self, i):
        return _Amplifiers.complex_double_vector_at(self, i)

    def assign(self, n, val):
        return _Amplifiers.complex_double_vector_assign(self, n, val)

    def data(self):
        return _Amplifiers.complex_double_vector_data(self)

    def size(self):
        return _Amplifiers.complex_double_vector_size(self)

    def empty(self):
        return _Amplifiers.complex_double_vector_empty(self)

    def resize(self, n):
        return _Amplifiers.complex_double_vector_resize(self, n)

    def clear(self):
        return _Amplifiers.complex_double_vector_clear(self)

    def swap(self, x):
        return _Amplifiers.complex_double_vector_swap(self, x)

    def shrink_to_fit(self):
        return _Amplifiers.complex_double_vector_shrink_to_fit(self)

    def reserve(self, n):
        return _Amplifiers.complex_double_vector_reserve(self, n)

    def max_size(self):
        return _Amplifiers.complex_double_vector_max_size(self)

    def capacity(self):
        return _Amplifiers.complex_double_vector_capacity(self)
    __swig_destroy__ = _Amplifiers.delete_complex_double_vector

# Register complex_double_vector in _Amplifiers:
_Amplifiers.complex_double_vector_swigregister(complex_double_vector)



