%module frankenstein
%{
#include "electric-frankenstein.hpp"    
%}
%include "std_math.i"
%include "std_vector.i"

%template(float_vector) std::vector<float>;
%template(double_vector) std::vector<double>;

%include "electric-frankenstein.hpp"

%template(absf)  Ops::abs<floatType>;
%template(cubef) Ops::cube<floatType>;
%template(sqrtf) Ops::sqrt<floatType>;
%template(expf)  Ops::exp<floatType>;
%template(exp2f) Ops::exp2<floatType>;
%template(logf)  Ops::log<floatType>;
%template(log10f) Ops::log10<floatType>;
%template(log2f) Ops::log2<floatType>;
%template(logbf) Ops::logb<floatType>;
%template(powf) Ops::pow<floatType>;
%template(floorf) Ops::floor<floatType>;
%template(acosf) Ops::acos<floatType>;
%template(asinf) Ops::asin<floatType>;
%template(atanf) Ops::atan<floatType>;
%template(atan2f) Ops::atan2<floatType>;
%template(cosf) Ops::cos<floatType>;
%template(sinf) Ops::sin<floatType>;
%template(tanf) Ops::tan<floatType>;
%template(coshf) Ops::cosh<floatType>;
%template(sinhf) Ops::sinh<floatType>;
%template(tanhf) Ops::tanh<floatType>;
%template(lgammaf) Ops::lgamma<floatType>;
%template(acoshf) Ops::acosh<floatType>;
%template(asinhf) Ops::asinh<floatType>;
%template(atanhf) Ops::atanh<floatType>;
%template(cbrtf) Ops::cbrt<floatType>;
%template(ceilf) Ops::cbrt<floatType>;
%template(copysignf) Ops::copysign<floatType>;
%template(erff) Ops::erf<floatType>;
%template(erfcf) Ops::erfc<floatType>;
%template(expm1f) Ops::expm1<floatType>;
%template(fdimf) Ops::fdim<floatType>;
%template(fmaf) Ops::fma<floatType>;
%template(fmaxf) Ops::fmax<floatType>;
%template(fminf) Ops::fmin<floatType>;
%template(fmodf) Ops::fmod<floatType>;
%template(fpclassifyf) Ops::fpclassify<floatType>;
%template(hypotf) Ops::hypot<floatType>;
%template(ilogbf) Ops::ilogb<floatType>;
%template(isfinitef) Ops::isfinite<floatType>;
%template(isgreaterf) Ops::isgreater<floatType>;
%template(isgreaterequalf) Ops::isgreaterequal<floatType>;
%template(isinff) Ops::isinf<floatType>;
%template(islessf) Ops::isless<floatType>;
%template(islessequalf) Ops::islessequal<floatType>;
%template(isnanf) Ops::isnan<floatType>;
%template(isnormalf) Ops::isnormal<floatType>;
%template(isunorderedf) Ops::isunordered<floatType>;
%template(ldexpf) Ops::ldexp<floatType>;
%template(lgammaf) Ops::lgamma<floatType>;
%template(llrintf) Ops::llrint<floatType>;
%template(llroundf) Ops::llround<floatType>;
%template(log1pf) Ops::log1p<floatType>;
%template(lrintf) Ops::lrint<floatType>;
%template(lroundf) Ops::lround<floatType>;
%template(nanf) Ops::nan<floatType>;
%template(nanff) Ops::nanf<floatType>;
%template(nanlf) Ops::nanl<floatType>;
%template(nearbyintf) Ops::nearbyint<floatType>;
%template(nextafterf) Ops::nextafter<floatType>;
%template(nexttowardf) Ops::nexttoward<floatType>;
%template(remainderf) Ops::remainder<floatType>;
%template(rintf) Ops::rint<floatType>;
%template(roundf) Ops::round<floatType>;
%template(scalblnf) Ops::scalbln<floatType>;
%template(scalbnf) Ops::scalbn<floatType>;
%template(squaref) Ops::square<floatType>;
%template(tgammaf) Ops::tgamma<floatType>;
%template(truncf) Ops::trunc<floatType>;


%template(crealf) std::real<floatType>;
%template(cimagf) std::imag<floatType>;
%template(cabsf) std::abs<floatType>;
%template(cargf) std::arg<floatType>;
%template(cexpf) std::exp<floatType>;
%template(clogf) std::log<floatType>;
%template(clog10f) std::log10<floatType>;
%template(cpowf) std::pow<floatType>;
%template(csqrtf) std::sqrt<floatType>;
%template(cnormf) std::norm<floatType>;
%template(cprojf) std::proj<floatType>;
%template(cpolarf) std::polar<floatType>;
%template(csinf) std::sin<floatType>;
%template(ccosf) std::cos<floatType>;
%template(ctanf) std::tan<floatType>;
%template(casinf) std::asin<floatType>;
%template(cacosf) std::acos<floatType>;
%template(catanf) std::atan<floatType>;
%template(csinhf) std::sinh<floatType>;
%template(ccoshf) std::cosh<floatType>;
%template(ctanhf) std::tanh<floatType>;
%template(casinhf) std::asinh<floatType>;
%template(cacoshf) std::acosh<floatType>;
%template(catanhf) std::atanh<floatType>;